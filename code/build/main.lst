ARM GAS  /tmp/ccNOyEeR.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rotation_cb,"ax",%progbits
  16              		.align	1
  17              		.global	rotation_cb
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	rotation_cb:
  24              	.LFB67:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** 
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    **** TODO: add license
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   */
   7:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
   8:Src/main.c    **** #include "main.h"
   9:Src/main.c    **** #include "stm32l1xx_hal.h"
  10:Src/main.c    **** #include "adc.h"
  11:Src/main.c    **** #include "gpio.h"
  12:Src/main.c    **** #include "pwm.h"
  13:Src/main.c    **** #include "encoder.h"
  14:Src/main.c    **** 
  15:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  16:Src/main.c    **** 
  17:Src/main.c    **** int8_t encoder_rotation = 0;  /* flag for encoder rotation (1=cw ; -1=ccw ; 0=nothing) */
  18:Src/main.c    **** 
  19:Src/main.c    **** uint8_t encoder_button_pressed = 0;  /* flag for encoder button press */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  22:Src/main.c    **** void SystemClock_Config(void);
  23:Src/main.c    **** 
  24:Src/main.c    **** void rotation_cb(uint8_t direction);
  25:Src/main.c    **** void button_cb(void);
  26:Src/main.c    **** 
  27:Src/main.c    **** int main(void) {
  28:Src/main.c    **** 
  29:Src/main.c    **** 	/* MCU Configuration----------------------------------------------------------*/
  30:Src/main.c    **** 
  31:Src/main.c    **** 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  32:Src/main.c    **** 	HAL_Init();
  33:Src/main.c    **** 
ARM GAS  /tmp/ccNOyEeR.s 			page 2


  34:Src/main.c    **** 	/* Configure the system clock */
  35:Src/main.c    **** 	SystemClock_Config();
  36:Src/main.c    **** 
  37:Src/main.c    **** 	/* Initialize all configured peripherals */
  38:Src/main.c    **** 	MX_GPIO_Init();
  39:Src/main.c    **** 	MX_ADC_Init();
  40:Src/main.c    **** 
  41:Src/main.c    **** 	/* initilaize pwm for controlling the LED strip */
  42:Src/main.c    **** 	pwm_init();
  43:Src/main.c    **** 	pwm_start();
  44:Src/main.c    **** 
  45:Src/main.c    **** 	encoder_init();
  46:Src/main.c    **** 	encoder_set_rotation_callback(rotation_cb);
  47:Src/main.c    **** 	encoder_set_button_callback(button_cb);
  48:Src/main.c    **** 	encoder_start();
  49:Src/main.c    **** 	/* Infinite loop */
  50:Src/main.c    **** 	while (1) {
  51:Src/main.c    **** 
  52:Src/main.c    **** 		if(encoder_rotation==1)
  53:Src/main.c    **** 		{
  54:Src/main.c    **** 			encoder_rotation = 0;
  55:Src/main.c    **** 			/* test pattern, cycle colors for visualisation */
  56:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.3);
  57:Src/main.c    **** 			HAL_Delay(100);
  58:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.0);
  59:Src/main.c    **** 
  60:Src/main.c    **** 		}
  61:Src/main.c    **** 		else if (encoder_rotation==-1)
  62:Src/main.c    **** 		{
  63:Src/main.c    **** 			encoder_rotation = 0;
  64:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.3);
  65:Src/main.c    **** 			HAL_Delay(100);
  66:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.0);
  67:Src/main.c    **** 		}
  68:Src/main.c    **** 
  69:Src/main.c    **** 		if(encoder_button_pressed==1)
  70:Src/main.c    **** 		{
  71:Src/main.c    **** 			encoder_button_pressed = 0;
  72:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_G, 0.3);
  73:Src/main.c    **** 			HAL_Delay(100);
  74:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_G, 0.0);
  75:Src/main.c    **** 		}
  76:Src/main.c    **** 
  77:Src/main.c    **** 	}
  78:Src/main.c    **** 
  79:Src/main.c    **** }
  80:Src/main.c    **** 
  81:Src/main.c    **** /** System Clock Configuration (generated by CubeMX)
  82:Src/main.c    **** */
  83:Src/main.c    **** void SystemClock_Config(void)
  84:Src/main.c    **** {
  85:Src/main.c    **** 
  86:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
  87:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  88:Src/main.c    **** 
  89:Src/main.c    ****     /**Configure the main internal regulator output voltage 
  90:Src/main.c    ****     */
ARM GAS  /tmp/ccNOyEeR.s 			page 3


  91:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  92:Src/main.c    **** 
  93:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
  94:Src/main.c    ****     */
  95:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  96:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  97:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
  98:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  99:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 100:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 101:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV4;
 102:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 103:Src/main.c    ****   {
 104:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 105:Src/main.c    ****   }
 106:Src/main.c    **** 
 107:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 108:Src/main.c    ****     */
 109:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 110:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 111:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 112:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 113:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 114:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 115:Src/main.c    **** 
 116:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 117:Src/main.c    ****   {
 118:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 119:Src/main.c    ****   }
 120:Src/main.c    **** 
 121:Src/main.c    ****     /**Configure the Systick interrupt time 
 122:Src/main.c    ****     */
 123:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 124:Src/main.c    **** 
 125:Src/main.c    ****     /**Configure the Systick 
 126:Src/main.c    ****     */
 127:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 130:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 131:Src/main.c    **** }
 132:Src/main.c    **** 
 133:Src/main.c    **** 
 134:Src/main.c    **** /**
 135:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 136:Src/main.c    ****   * @param  None
 137:Src/main.c    ****   * @retval None
 138:Src/main.c    ****   */
 139:Src/main.c    **** void _Error_Handler(char * file, int line)
 140:Src/main.c    **** {
 141:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 142:Src/main.c    ****   while(1) 
 143:Src/main.c    ****   {
 144:Src/main.c    ****   }
 145:Src/main.c    **** }
 146:Src/main.c    **** 
 147:Src/main.c    **** 
ARM GAS  /tmp/ccNOyEeR.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** void rotation_cb(uint8_t direction)
 150:Src/main.c    **** {
  26              		.loc 1 150 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 151:Src/main.c    **** 	if(direction)
  32              		.loc 1 151 0
  33 0000 18B9     		cbnz	r0, .L4
 152:Src/main.c    **** 	{
 153:Src/main.c    **** 		encoder_rotation = 1;
 154:Src/main.c    **** 	}else{
 155:Src/main.c    **** 		encoder_rotation = -1;
  34              		.loc 1 155 0
  35 0002 FF22     		movs	r2, #255
  36 0004 034B     		ldr	r3, .L5
  37 0006 1A70     		strb	r2, [r3]
  38 0008 7047     		bx	lr
  39              	.L4:
 153:Src/main.c    **** 	}else{
  40              		.loc 1 153 0
  41 000a 0122     		movs	r2, #1
  42 000c 014B     		ldr	r3, .L5
  43 000e 1A70     		strb	r2, [r3]
  44 0010 7047     		bx	lr
  45              	.L6:
  46 0012 00BF     		.align	2
  47              	.L5:
  48 0014 00000000 		.word	.LANCHOR0
  49              		.cfi_endproc
  50              	.LFE67:
  52              		.section	.text.button_cb,"ax",%progbits
  53              		.align	1
  54              		.global	button_cb
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu softvfp
  60              	button_cb:
  61              	.LFB68:
 156:Src/main.c    **** 	}
 157:Src/main.c    **** }
 158:Src/main.c    **** 
 159:Src/main.c    **** void button_cb(void)
 160:Src/main.c    **** {
  62              		.loc 1 160 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 161:Src/main.c    **** 	encoder_button_pressed = 1;
  67              		.loc 1 161 0
  68 0000 0122     		movs	r2, #1
  69 0002 014B     		ldr	r3, .L8
ARM GAS  /tmp/ccNOyEeR.s 			page 5


  70 0004 1A70     		strb	r2, [r3]
  71 0006 7047     		bx	lr
  72              	.L9:
  73              		.align	2
  74              	.L8:
  75 0008 00000000 		.word	.LANCHOR1
  76              		.cfi_endproc
  77              	.LFE68:
  79              		.section	.text._Error_Handler,"ax",%progbits
  80              		.align	1
  81              		.global	_Error_Handler
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  85              		.fpu softvfp
  87              	_Error_Handler:
  88              	.LFB66:
 140:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
  89              		.loc 1 140 0
  90              		.cfi_startproc
  91              		@ Volatile: function does not return.
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.LVL1:
  96              	.L11:
  97 0000 FEE7     		b	.L11
  98              		.cfi_endproc
  99              	.LFE66:
 101              		.section	.text.SystemClock_Config,"ax",%progbits
 102              		.align	1
 103              		.global	SystemClock_Config
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu softvfp
 109              	SystemClock_Config:
 110              	.LFB65:
  84:Src/main.c    **** 
 111              		.loc 1 84 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 72
 114              		@ frame_needed = 0, uses_anonymous_args = 0
  84:Src/main.c    **** 
 115              		.loc 1 84 0
 116 0000 00B5     		push	{lr}
 117              	.LCFI0:
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 14, -4
 120 0002 93B0     		sub	sp, sp, #76
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 80
  91:Src/main.c    **** 
 123              		.loc 1 91 0
 124 0004 1F4A     		ldr	r2, .L18
 125 0006 1368     		ldr	r3, [r2]
 126 0008 23F4C053 		bic	r3, r3, #6144
ARM GAS  /tmp/ccNOyEeR.s 			page 6


 127 000c 43F40063 		orr	r3, r3, #2048
 128 0010 1360     		str	r3, [r2]
  95:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 129              		.loc 1 95 0
 130 0012 0223     		movs	r3, #2
 131 0014 0593     		str	r3, [sp, #20]
  96:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 132              		.loc 1 96 0
 133 0016 0122     		movs	r2, #1
 134 0018 0892     		str	r2, [sp, #32]
  97:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 135              		.loc 1 97 0
 136 001a 1022     		movs	r2, #16
 137 001c 0992     		str	r2, [sp, #36]
  98:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 138              		.loc 1 98 0
 139 001e 0E93     		str	r3, [sp, #56]
  99:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 140              		.loc 1 99 0
 141 0020 0023     		movs	r3, #0
 142 0022 0F93     		str	r3, [sp, #60]
 100:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV4;
 143              		.loc 1 100 0
 144 0024 1093     		str	r3, [sp, #64]
 101:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 145              		.loc 1 101 0
 146 0026 4FF44003 		mov	r3, #12582912
 147 002a 1193     		str	r3, [sp, #68]
 102:Src/main.c    ****   {
 148              		.loc 1 102 0
 149 002c 05A8     		add	r0, sp, #20
 150 002e FFF7FEFF 		bl	HAL_RCC_OscConfig
 151              	.LVL2:
 152 0032 F8B9     		cbnz	r0, .L16
 109:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 153              		.loc 1 109 0
 154 0034 0F23     		movs	r3, #15
 155 0036 0093     		str	r3, [sp]
 111:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 156              		.loc 1 111 0
 157 0038 0323     		movs	r3, #3
 158 003a 0193     		str	r3, [sp, #4]
 112:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 159              		.loc 1 112 0
 160 003c 0021     		movs	r1, #0
 161 003e 0291     		str	r1, [sp, #8]
 113:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 162              		.loc 1 113 0
 163 0040 0391     		str	r1, [sp, #12]
 114:Src/main.c    **** 
 164              		.loc 1 114 0
 165 0042 0491     		str	r1, [sp, #16]
 116:Src/main.c    ****   {
 166              		.loc 1 116 0
 167 0044 6846     		mov	r0, sp
 168 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 169              	.LVL3:
ARM GAS  /tmp/ccNOyEeR.s 			page 7


 170 004a B8B9     		cbnz	r0, .L17
 123:Src/main.c    **** 
 171              		.loc 1 123 0
 172 004c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 173              	.LVL4:
 174 0050 0D4B     		ldr	r3, .L18+4
 175 0052 A3FB0030 		umull	r3, r0, r3, r0
 176 0056 8009     		lsrs	r0, r0, #6
 177 0058 FFF7FEFF 		bl	HAL_SYSTICK_Config
 178              	.LVL5:
 127:Src/main.c    **** 
 179              		.loc 1 127 0
 180 005c 0420     		movs	r0, #4
 181 005e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 182              	.LVL6:
 130:Src/main.c    **** }
 183              		.loc 1 130 0
 184 0062 0022     		movs	r2, #0
 185 0064 1146     		mov	r1, r2
 186 0066 4FF0FF30 		mov	r0, #-1
 187 006a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 188              	.LVL7:
 131:Src/main.c    **** 
 189              		.loc 1 131 0
 190 006e 13B0     		add	sp, sp, #76
 191              	.LCFI2:
 192              		.cfi_remember_state
 193              		.cfi_def_cfa_offset 4
 194              		@ sp needed
 195 0070 5DF804FB 		ldr	pc, [sp], #4
 196              	.L16:
 197              	.LCFI3:
 198              		.cfi_restore_state
 104:Src/main.c    ****   }
 199              		.loc 1 104 0
 200 0074 6821     		movs	r1, #104
 201 0076 0548     		ldr	r0, .L18+8
 202 0078 FFF7FEFF 		bl	_Error_Handler
 203              	.LVL8:
 204              	.L17:
 118:Src/main.c    ****   }
 205              		.loc 1 118 0
 206 007c 7621     		movs	r1, #118
 207 007e 0348     		ldr	r0, .L18+8
 208 0080 FFF7FEFF 		bl	_Error_Handler
 209              	.LVL9:
 210              	.L19:
 211              		.align	2
 212              	.L18:
 213 0084 00700040 		.word	1073770496
 214 0088 D34D6210 		.word	274877907
 215 008c 00000000 		.word	.LC0
 216              		.cfi_endproc
 217              	.LFE65:
 219              		.section	.text.main,"ax",%progbits
 220              		.align	1
 221              		.global	main
ARM GAS  /tmp/ccNOyEeR.s 			page 8


 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu softvfp
 227              	main:
 228              	.LFB64:
  27:Src/main.c    **** 
 229              		.loc 1 27 0
 230              		.cfi_startproc
 231              		@ Volatile: function does not return.
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              	.LCFI4:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 3, -8
 238              		.cfi_offset 14, -4
  32:Src/main.c    **** 
 239              		.loc 1 32 0
 240 0002 FFF7FEFF 		bl	HAL_Init
 241              	.LVL10:
  35:Src/main.c    **** 
 242              		.loc 1 35 0
 243 0006 FFF7FEFF 		bl	SystemClock_Config
 244              	.LVL11:
  38:Src/main.c    **** 	MX_ADC_Init();
 245              		.loc 1 38 0
 246 000a FFF7FEFF 		bl	MX_GPIO_Init
 247              	.LVL12:
  39:Src/main.c    **** 
 248              		.loc 1 39 0
 249 000e FFF7FEFF 		bl	MX_ADC_Init
 250              	.LVL13:
  42:Src/main.c    **** 	pwm_start();
 251              		.loc 1 42 0
 252 0012 FFF7FEFF 		bl	pwm_init
 253              	.LVL14:
  43:Src/main.c    **** 
 254              		.loc 1 43 0
 255 0016 FFF7FEFF 		bl	pwm_start
 256              	.LVL15:
  45:Src/main.c    **** 	encoder_set_rotation_callback(rotation_cb);
 257              		.loc 1 45 0
 258 001a FFF7FEFF 		bl	encoder_init
 259              	.LVL16:
  46:Src/main.c    **** 	encoder_set_button_callback(button_cb);
 260              		.loc 1 46 0
 261 001e 2048     		ldr	r0, .L28
 262 0020 FFF7FEFF 		bl	encoder_set_rotation_callback
 263              	.LVL17:
  47:Src/main.c    **** 	encoder_start();
 264              		.loc 1 47 0
 265 0024 1F48     		ldr	r0, .L28+4
 266 0026 FFF7FEFF 		bl	encoder_set_button_callback
 267              	.LVL18:
  48:Src/main.c    **** 	/* Infinite loop */
 268              		.loc 1 48 0
ARM GAS  /tmp/ccNOyEeR.s 			page 9


 269 002a FFF7FEFF 		bl	encoder_start
 270              	.LVL19:
 271 002e 11E0     		b	.L23
 272              	.L27:
  54:Src/main.c    **** 			/* test pattern, cycle colors for visualisation */
 273              		.loc 1 54 0
 274 0030 0022     		movs	r2, #0
 275 0032 1D4B     		ldr	r3, .L28+8
 276 0034 1A70     		strb	r2, [r3]
  56:Src/main.c    **** 			HAL_Delay(100);
 277              		.loc 1 56 0
 278 0036 1D49     		ldr	r1, .L28+12
 279 0038 0120     		movs	r0, #1
 280 003a FFF7FEFF 		bl	pwm_set_dutycyle
 281              	.LVL20:
  57:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.0);
 282              		.loc 1 57 0
 283 003e 6420     		movs	r0, #100
 284 0040 FFF7FEFF 		bl	HAL_Delay
 285              	.LVL21:
  58:Src/main.c    **** 
 286              		.loc 1 58 0
 287 0044 0021     		movs	r1, #0
 288 0046 0120     		movs	r0, #1
 289 0048 FFF7FEFF 		bl	pwm_set_dutycyle
 290              	.LVL22:
 291              	.L22:
  69:Src/main.c    **** 		{
 292              		.loc 1 69 0
 293 004c 184B     		ldr	r3, .L28+16
 294 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 295 0050 012B     		cmp	r3, #1
 296 0052 16D0     		beq	.L26
 297              	.L23:
  52:Src/main.c    **** 		{
 298              		.loc 1 52 0
 299 0054 144B     		ldr	r3, .L28+8
 300 0056 93F90030 		ldrsb	r3, [r3]
 301 005a 012B     		cmp	r3, #1
 302 005c E8D0     		beq	.L27
  61:Src/main.c    **** 		{
 303              		.loc 1 61 0
 304 005e B3F1FF3F 		cmp	r3, #-1
 305 0062 F3D1     		bne	.L22
  63:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.3);
 306              		.loc 1 63 0
 307 0064 0022     		movs	r2, #0
 308 0066 104B     		ldr	r3, .L28+8
 309 0068 1A70     		strb	r2, [r3]
  64:Src/main.c    **** 			HAL_Delay(100);
 310              		.loc 1 64 0
 311 006a 1049     		ldr	r1, .L28+12
 312 006c 0320     		movs	r0, #3
 313 006e FFF7FEFF 		bl	pwm_set_dutycyle
 314              	.LVL23:
  65:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.0);
 315              		.loc 1 65 0
ARM GAS  /tmp/ccNOyEeR.s 			page 10


 316 0072 6420     		movs	r0, #100
 317 0074 FFF7FEFF 		bl	HAL_Delay
 318              	.LVL24:
  66:Src/main.c    **** 		}
 319              		.loc 1 66 0
 320 0078 0021     		movs	r1, #0
 321 007a 0320     		movs	r0, #3
 322 007c FFF7FEFF 		bl	pwm_set_dutycyle
 323              	.LVL25:
 324 0080 E4E7     		b	.L22
 325              	.L26:
  71:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_G, 0.3);
 326              		.loc 1 71 0
 327 0082 0022     		movs	r2, #0
 328 0084 0A4B     		ldr	r3, .L28+16
 329 0086 1A70     		strb	r2, [r3]
  72:Src/main.c    **** 			HAL_Delay(100);
 330              		.loc 1 72 0
 331 0088 0849     		ldr	r1, .L28+12
 332 008a 0220     		movs	r0, #2
 333 008c FFF7FEFF 		bl	pwm_set_dutycyle
 334              	.LVL26:
  73:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_G, 0.0);
 335              		.loc 1 73 0
 336 0090 6420     		movs	r0, #100
 337 0092 FFF7FEFF 		bl	HAL_Delay
 338              	.LVL27:
  74:Src/main.c    **** 		}
 339              		.loc 1 74 0
 340 0096 0021     		movs	r1, #0
 341 0098 0220     		movs	r0, #2
 342 009a FFF7FEFF 		bl	pwm_set_dutycyle
 343              	.LVL28:
 344 009e D9E7     		b	.L23
 345              	.L29:
 346              		.align	2
 347              	.L28:
 348 00a0 00000000 		.word	rotation_cb
 349 00a4 00000000 		.word	button_cb
 350 00a8 00000000 		.word	.LANCHOR0
 351 00ac 9A99993E 		.word	1050253722
 352 00b0 00000000 		.word	.LANCHOR1
 353              		.cfi_endproc
 354              	.LFE64:
 356              		.global	encoder_button_pressed
 357              		.global	encoder_rotation
 358              		.section	.bss.encoder_button_pressed,"aw",%nobits
 359              		.set	.LANCHOR1,. + 0
 362              	encoder_button_pressed:
 363 0000 00       		.space	1
 364              		.section	.bss.encoder_rotation,"aw",%nobits
 365              		.set	.LANCHOR0,. + 0
 368              	encoder_rotation:
 369 0000 00       		.space	1
 370              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 371              		.align	2
 372              	.LC0:
ARM GAS  /tmp/ccNOyEeR.s 			page 11


 373 0000 5372632F 		.ascii	"Src/main.c\000"
 373      6D61696E 
 373      2E6300
 374              		.text
 375              	.Letext0:
 376              		.file 2 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 377              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 378              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 379              		.file 5 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 380              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 381              		.file 7 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 382              		.file 8 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 383              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/
 384              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 385              		.file 11 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 386              		.file 12 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rcc.h"
 387              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 388              		.file 14 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc.h"
 389              		.file 15 "Inc/adc.h"
 390              		.file 16 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_cortex.h"
 391              		.file 17 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 392              		.file 18 "Inc/gpio.h"
 393              		.file 19 "Inc/pwm.h"
 394              		.file 20 "Inc/encoder.h"
ARM GAS  /tmp/ccNOyEeR.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNOyEeR.s:16     .text.rotation_cb:0000000000000000 $t
     /tmp/ccNOyEeR.s:23     .text.rotation_cb:0000000000000000 rotation_cb
     /tmp/ccNOyEeR.s:48     .text.rotation_cb:0000000000000014 $d
     /tmp/ccNOyEeR.s:53     .text.button_cb:0000000000000000 $t
     /tmp/ccNOyEeR.s:60     .text.button_cb:0000000000000000 button_cb
     /tmp/ccNOyEeR.s:75     .text.button_cb:0000000000000008 $d
     /tmp/ccNOyEeR.s:80     .text._Error_Handler:0000000000000000 $t
     /tmp/ccNOyEeR.s:87     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccNOyEeR.s:102    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNOyEeR.s:109    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNOyEeR.s:213    .text.SystemClock_Config:0000000000000084 $d
     /tmp/ccNOyEeR.s:220    .text.main:0000000000000000 $t
     /tmp/ccNOyEeR.s:227    .text.main:0000000000000000 main
     /tmp/ccNOyEeR.s:348    .text.main:00000000000000a0 $d
     /tmp/ccNOyEeR.s:362    .bss.encoder_button_pressed:0000000000000000 encoder_button_pressed
     /tmp/ccNOyEeR.s:368    .bss.encoder_rotation:0000000000000000 encoder_rotation
     /tmp/ccNOyEeR.s:363    .bss.encoder_button_pressed:0000000000000000 $d
     /tmp/ccNOyEeR.s:369    .bss.encoder_rotation:0000000000000000 $d
     /tmp/ccNOyEeR.s:371    .rodata.SystemClock_Config.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_ADC_Init
pwm_init
pwm_start
encoder_init
encoder_set_rotation_callback
encoder_set_button_callback
encoder_start
pwm_set_dutycyle
HAL_Delay
