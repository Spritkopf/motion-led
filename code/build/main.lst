ARM GAS  /tmp/cc5wagoz.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rotation_cb,"ax",%progbits
  16              		.align	1
  17              		.global	rotation_cb
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	rotation_cb:
  24              	.LFB67:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /*
   2:Src/main.c    **** 
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    **** TODO: add license
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   */
   7:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
   8:Src/main.c    **** #include "main.h"
   9:Src/main.c    **** #include "stm32l1xx_hal.h"
  10:Src/main.c    **** #include "adc.h"
  11:Src/main.c    **** #include "gpio.h"
  12:Src/main.c    **** #include "pwm.h"
  13:Src/main.c    **** #include "encoder.h"
  14:Src/main.c    **** 
  15:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  16:Src/main.c    **** 
  17:Src/main.c    **** int8_t test = 0;
  18:Src/main.c    **** 
  19:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  20:Src/main.c    **** void SystemClock_Config(void);
  21:Src/main.c    **** 
  22:Src/main.c    **** void rotation_cb(uint8_t direction);
  23:Src/main.c    **** 
  24:Src/main.c    **** int main(void) {
  25:Src/main.c    **** 
  26:Src/main.c    **** 	/* MCU Configuration----------------------------------------------------------*/
  27:Src/main.c    **** 
  28:Src/main.c    **** 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  29:Src/main.c    **** 	HAL_Init();
  30:Src/main.c    **** 
  31:Src/main.c    **** 	/* Configure the system clock */
  32:Src/main.c    **** 	SystemClock_Config();
  33:Src/main.c    **** 
ARM GAS  /tmp/cc5wagoz.s 			page 2


  34:Src/main.c    **** 	/* Initialize all configured peripherals */
  35:Src/main.c    **** 	MX_GPIO_Init();
  36:Src/main.c    **** 	MX_ADC_Init();
  37:Src/main.c    **** 
  38:Src/main.c    **** 	/* initilaize pwm for controlling the LED strip */
  39:Src/main.c    **** 	pwm_init();
  40:Src/main.c    **** 	pwm_start();
  41:Src/main.c    **** 
  42:Src/main.c    **** 	encoder_init();
  43:Src/main.c    **** 	encoder_set_rotation_callback(rotation_cb);
  44:Src/main.c    **** 	encoder_start();
  45:Src/main.c    **** 	/* Infinite loop */
  46:Src/main.c    **** 	while (1) {
  47:Src/main.c    **** 
  48:Src/main.c    **** 		if(test==1)
  49:Src/main.c    **** 		{
  50:Src/main.c    **** 			test = 0;
  51:Src/main.c    **** 			/* test pattern, cycle colors for visualisation */
  52:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.3);
  53:Src/main.c    **** 			HAL_Delay(100);
  54:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.0);
  55:Src/main.c    **** 
  56:Src/main.c    **** 		}
  57:Src/main.c    **** 		else if (test==-1)
  58:Src/main.c    **** 		{
  59:Src/main.c    **** 			test = 0;
  60:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.3);
  61:Src/main.c    **** 			HAL_Delay(100);
  62:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.0);
  63:Src/main.c    **** 		}
  64:Src/main.c    **** 
  65:Src/main.c    **** 	}
  66:Src/main.c    **** 
  67:Src/main.c    **** }
  68:Src/main.c    **** 
  69:Src/main.c    **** /** System Clock Configuration (generated by CubeMX)
  70:Src/main.c    **** */
  71:Src/main.c    **** void SystemClock_Config(void)
  72:Src/main.c    **** {
  73:Src/main.c    **** 
  74:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
  75:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  76:Src/main.c    **** 
  77:Src/main.c    ****     /**Configure the main internal regulator output voltage 
  78:Src/main.c    ****     */
  79:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  80:Src/main.c    **** 
  81:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
  82:Src/main.c    ****     */
  83:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  84:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  85:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
  86:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  87:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  88:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
  89:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV4;
  90:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/cc5wagoz.s 			page 3


  91:Src/main.c    ****   {
  92:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
  93:Src/main.c    ****   }
  94:Src/main.c    **** 
  95:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
  96:Src/main.c    ****     */
  97:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  98:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  99:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 100:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 101:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 102:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 103:Src/main.c    **** 
 104:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 105:Src/main.c    ****   {
 106:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 107:Src/main.c    ****   }
 108:Src/main.c    **** 
 109:Src/main.c    ****     /**Configure the Systick interrupt time 
 110:Src/main.c    ****     */
 111:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 112:Src/main.c    **** 
 113:Src/main.c    ****     /**Configure the Systick 
 114:Src/main.c    ****     */
 115:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 118:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 119:Src/main.c    **** }
 120:Src/main.c    **** 
 121:Src/main.c    **** 
 122:Src/main.c    **** /**
 123:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 124:Src/main.c    ****   * @param  None
 125:Src/main.c    ****   * @retval None
 126:Src/main.c    ****   */
 127:Src/main.c    **** void _Error_Handler(char * file, int line)
 128:Src/main.c    **** {
 129:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 130:Src/main.c    ****   while(1) 
 131:Src/main.c    ****   {
 132:Src/main.c    ****   }
 133:Src/main.c    **** }
 134:Src/main.c    **** 
 135:Src/main.c    **** 
 136:Src/main.c    **** 
 137:Src/main.c    **** void rotation_cb(uint8_t direction)
 138:Src/main.c    **** {
  26              		.loc 1 138 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 139:Src/main.c    **** 	if(direction)
  32              		.loc 1 139 0
  33 0000 18B9     		cbnz	r0, .L4
ARM GAS  /tmp/cc5wagoz.s 			page 4


 140:Src/main.c    **** 	{
 141:Src/main.c    **** 		test = 1;
 142:Src/main.c    **** 	}else{
 143:Src/main.c    **** 		test = -1;
  34              		.loc 1 143 0
  35 0002 FF22     		movs	r2, #255
  36 0004 034B     		ldr	r3, .L5
  37 0006 1A70     		strb	r2, [r3]
  38 0008 7047     		bx	lr
  39              	.L4:
 141:Src/main.c    **** 	}else{
  40              		.loc 1 141 0
  41 000a 0122     		movs	r2, #1
  42 000c 014B     		ldr	r3, .L5
  43 000e 1A70     		strb	r2, [r3]
  44 0010 7047     		bx	lr
  45              	.L6:
  46 0012 00BF     		.align	2
  47              	.L5:
  48 0014 00000000 		.word	.LANCHOR0
  49              		.cfi_endproc
  50              	.LFE67:
  52              		.section	.text._Error_Handler,"ax",%progbits
  53              		.align	1
  54              		.global	_Error_Handler
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu softvfp
  60              	_Error_Handler:
  61              	.LFB66:
 128:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
  62              		.loc 1 128 0
  63              		.cfi_startproc
  64              		@ Volatile: function does not return.
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LVL1:
  69              	.L8:
  70 0000 FEE7     		b	.L8
  71              		.cfi_endproc
  72              	.LFE66:
  74              		.section	.text.SystemClock_Config,"ax",%progbits
  75              		.align	1
  76              		.global	SystemClock_Config
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	SystemClock_Config:
  83              	.LFB65:
  72:Src/main.c    **** 
  84              		.loc 1 72 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 72
  87              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc5wagoz.s 			page 5


  72:Src/main.c    **** 
  88              		.loc 1 72 0
  89 0000 00B5     		push	{lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 14, -4
  93 0002 93B0     		sub	sp, sp, #76
  94              	.LCFI1:
  95              		.cfi_def_cfa_offset 80
  79:Src/main.c    **** 
  96              		.loc 1 79 0
  97 0004 1F4A     		ldr	r2, .L15
  98 0006 1368     		ldr	r3, [r2]
  99 0008 23F4C053 		bic	r3, r3, #6144
 100 000c 43F40063 		orr	r3, r3, #2048
 101 0010 1360     		str	r3, [r2]
  83:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 102              		.loc 1 83 0
 103 0012 0223     		movs	r3, #2
 104 0014 0593     		str	r3, [sp, #20]
  84:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 105              		.loc 1 84 0
 106 0016 0122     		movs	r2, #1
 107 0018 0892     		str	r2, [sp, #32]
  85:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 108              		.loc 1 85 0
 109 001a 1022     		movs	r2, #16
 110 001c 0992     		str	r2, [sp, #36]
  86:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 111              		.loc 1 86 0
 112 001e 0E93     		str	r3, [sp, #56]
  87:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 113              		.loc 1 87 0
 114 0020 0023     		movs	r3, #0
 115 0022 0F93     		str	r3, [sp, #60]
  88:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV4;
 116              		.loc 1 88 0
 117 0024 1093     		str	r3, [sp, #64]
  89:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 118              		.loc 1 89 0
 119 0026 4FF44003 		mov	r3, #12582912
 120 002a 1193     		str	r3, [sp, #68]
  90:Src/main.c    ****   {
 121              		.loc 1 90 0
 122 002c 05A8     		add	r0, sp, #20
 123 002e FFF7FEFF 		bl	HAL_RCC_OscConfig
 124              	.LVL2:
 125 0032 F8B9     		cbnz	r0, .L13
  97:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 126              		.loc 1 97 0
 127 0034 0F23     		movs	r3, #15
 128 0036 0093     		str	r3, [sp]
  99:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 129              		.loc 1 99 0
 130 0038 0323     		movs	r3, #3
 131 003a 0193     		str	r3, [sp, #4]
 100:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/cc5wagoz.s 			page 6


 132              		.loc 1 100 0
 133 003c 0021     		movs	r1, #0
 134 003e 0291     		str	r1, [sp, #8]
 101:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 135              		.loc 1 101 0
 136 0040 0391     		str	r1, [sp, #12]
 102:Src/main.c    **** 
 137              		.loc 1 102 0
 138 0042 0491     		str	r1, [sp, #16]
 104:Src/main.c    ****   {
 139              		.loc 1 104 0
 140 0044 6846     		mov	r0, sp
 141 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 142              	.LVL3:
 143 004a B8B9     		cbnz	r0, .L14
 111:Src/main.c    **** 
 144              		.loc 1 111 0
 145 004c FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 146              	.LVL4:
 147 0050 0D4B     		ldr	r3, .L15+4
 148 0052 A3FB0030 		umull	r3, r0, r3, r0
 149 0056 8009     		lsrs	r0, r0, #6
 150 0058 FFF7FEFF 		bl	HAL_SYSTICK_Config
 151              	.LVL5:
 115:Src/main.c    **** 
 152              		.loc 1 115 0
 153 005c 0420     		movs	r0, #4
 154 005e FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 155              	.LVL6:
 118:Src/main.c    **** }
 156              		.loc 1 118 0
 157 0062 0022     		movs	r2, #0
 158 0064 1146     		mov	r1, r2
 159 0066 4FF0FF30 		mov	r0, #-1
 160 006a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 161              	.LVL7:
 119:Src/main.c    **** 
 162              		.loc 1 119 0
 163 006e 13B0     		add	sp, sp, #76
 164              	.LCFI2:
 165              		.cfi_remember_state
 166              		.cfi_def_cfa_offset 4
 167              		@ sp needed
 168 0070 5DF804FB 		ldr	pc, [sp], #4
 169              	.L13:
 170              	.LCFI3:
 171              		.cfi_restore_state
  92:Src/main.c    ****   }
 172              		.loc 1 92 0
 173 0074 5C21     		movs	r1, #92
 174 0076 0548     		ldr	r0, .L15+8
 175 0078 FFF7FEFF 		bl	_Error_Handler
 176              	.LVL8:
 177              	.L14:
 106:Src/main.c    ****   }
 178              		.loc 1 106 0
 179 007c 6A21     		movs	r1, #106
ARM GAS  /tmp/cc5wagoz.s 			page 7


 180 007e 0348     		ldr	r0, .L15+8
 181 0080 FFF7FEFF 		bl	_Error_Handler
 182              	.LVL9:
 183              	.L16:
 184              		.align	2
 185              	.L15:
 186 0084 00700040 		.word	1073770496
 187 0088 D34D6210 		.word	274877907
 188 008c 00000000 		.word	.LC0
 189              		.cfi_endproc
 190              	.LFE65:
 192              		.section	.text.main,"ax",%progbits
 193              		.align	1
 194              		.global	main
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu softvfp
 200              	main:
 201              	.LFB64:
  24:Src/main.c    **** 
 202              		.loc 1 24 0
 203              		.cfi_startproc
 204              		@ Volatile: function does not return.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
  29:Src/main.c    **** 
 212              		.loc 1 29 0
 213 0002 FFF7FEFF 		bl	HAL_Init
 214              	.LVL10:
  32:Src/main.c    **** 
 215              		.loc 1 32 0
 216 0006 FFF7FEFF 		bl	SystemClock_Config
 217              	.LVL11:
  35:Src/main.c    **** 	MX_ADC_Init();
 218              		.loc 1 35 0
 219 000a FFF7FEFF 		bl	MX_GPIO_Init
 220              	.LVL12:
  36:Src/main.c    **** 
 221              		.loc 1 36 0
 222 000e FFF7FEFF 		bl	MX_ADC_Init
 223              	.LVL13:
  39:Src/main.c    **** 	pwm_start();
 224              		.loc 1 39 0
 225 0012 FFF7FEFF 		bl	pwm_init
 226              	.LVL14:
  40:Src/main.c    **** 
 227              		.loc 1 40 0
 228 0016 FFF7FEFF 		bl	pwm_start
 229              	.LVL15:
  42:Src/main.c    **** 	encoder_set_rotation_callback(rotation_cb);
 230              		.loc 1 42 0
ARM GAS  /tmp/cc5wagoz.s 			page 8


 231 001a FFF7FEFF 		bl	encoder_init
 232              	.LVL16:
  43:Src/main.c    **** 	encoder_start();
 233              		.loc 1 43 0
 234 001e 1548     		ldr	r0, .L23
 235 0020 FFF7FEFF 		bl	encoder_set_rotation_callback
 236              	.LVL17:
  44:Src/main.c    **** 	/* Infinite loop */
 237              		.loc 1 44 0
 238 0024 FFF7FEFF 		bl	encoder_start
 239              	.LVL18:
 240 0028 0DE0     		b	.L18
 241              	.L22:
  50:Src/main.c    **** 			/* test pattern, cycle colors for visualisation */
 242              		.loc 1 50 0
 243 002a 0022     		movs	r2, #0
 244 002c 124B     		ldr	r3, .L23+4
 245 002e 1A70     		strb	r2, [r3]
  52:Src/main.c    **** 			HAL_Delay(100);
 246              		.loc 1 52 0
 247 0030 1249     		ldr	r1, .L23+8
 248 0032 0120     		movs	r0, #1
 249 0034 FFF7FEFF 		bl	pwm_set_dutycyle
 250              	.LVL19:
  53:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_R, 0.0);
 251              		.loc 1 53 0
 252 0038 6420     		movs	r0, #100
 253 003a FFF7FEFF 		bl	HAL_Delay
 254              	.LVL20:
  54:Src/main.c    **** 
 255              		.loc 1 54 0
 256 003e 0021     		movs	r1, #0
 257 0040 0120     		movs	r0, #1
 258 0042 FFF7FEFF 		bl	pwm_set_dutycyle
 259              	.LVL21:
 260              	.L18:
  48:Src/main.c    **** 		{
 261              		.loc 1 48 0
 262 0046 0C4B     		ldr	r3, .L23+4
 263 0048 93F90030 		ldrsb	r3, [r3]
 264 004c 012B     		cmp	r3, #1
 265 004e ECD0     		beq	.L22
  57:Src/main.c    **** 		{
 266              		.loc 1 57 0
 267 0050 B3F1FF3F 		cmp	r3, #-1
 268 0054 F7D1     		bne	.L18
  59:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.3);
 269              		.loc 1 59 0
 270 0056 0022     		movs	r2, #0
 271 0058 074B     		ldr	r3, .L23+4
 272 005a 1A70     		strb	r2, [r3]
  60:Src/main.c    **** 			HAL_Delay(100);
 273              		.loc 1 60 0
 274 005c 0749     		ldr	r1, .L23+8
 275 005e 0320     		movs	r0, #3
 276 0060 FFF7FEFF 		bl	pwm_set_dutycyle
 277              	.LVL22:
ARM GAS  /tmp/cc5wagoz.s 			page 9


  61:Src/main.c    **** 			pwm_set_dutycyle(PWM_CH_B, 0.0);
 278              		.loc 1 61 0
 279 0064 6420     		movs	r0, #100
 280 0066 FFF7FEFF 		bl	HAL_Delay
 281              	.LVL23:
  62:Src/main.c    **** 		}
 282              		.loc 1 62 0
 283 006a 0021     		movs	r1, #0
 284 006c 0320     		movs	r0, #3
 285 006e FFF7FEFF 		bl	pwm_set_dutycyle
 286              	.LVL24:
 287 0072 E8E7     		b	.L18
 288              	.L24:
 289              		.align	2
 290              	.L23:
 291 0074 00000000 		.word	rotation_cb
 292 0078 00000000 		.word	.LANCHOR0
 293 007c 9A99993E 		.word	1050253722
 294              		.cfi_endproc
 295              	.LFE64:
 297              		.global	test
 298              		.section	.bss.test,"aw",%nobits
 299              		.set	.LANCHOR0,. + 0
 302              	test:
 303 0000 00       		.space	1
 304              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 305              		.align	2
 306              	.LC0:
 307 0000 5372632F 		.ascii	"Src/main.c\000"
 307      6D61696E 
 307      2E6300
 308              		.text
 309              	.Letext0:
 310              		.file 2 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 311              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 312              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 313              		.file 5 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 314              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 315              		.file 7 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 316              		.file 8 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 317              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/
 318              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 319              		.file 11 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 320              		.file 12 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rcc.h"
 321              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 322              		.file 14 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc.h"
 323              		.file 15 "Inc/adc.h"
 324              		.file 16 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_cortex.h"
 325              		.file 17 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 326              		.file 18 "Inc/gpio.h"
 327              		.file 19 "Inc/pwm.h"
 328              		.file 20 "Inc/encoder.h"
ARM GAS  /tmp/cc5wagoz.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc5wagoz.s:16     .text.rotation_cb:0000000000000000 $t
     /tmp/cc5wagoz.s:23     .text.rotation_cb:0000000000000000 rotation_cb
     /tmp/cc5wagoz.s:48     .text.rotation_cb:0000000000000014 $d
     /tmp/cc5wagoz.s:53     .text._Error_Handler:0000000000000000 $t
     /tmp/cc5wagoz.s:60     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc5wagoz.s:75     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc5wagoz.s:82     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc5wagoz.s:186    .text.SystemClock_Config:0000000000000084 $d
     /tmp/cc5wagoz.s:193    .text.main:0000000000000000 $t
     /tmp/cc5wagoz.s:200    .text.main:0000000000000000 main
     /tmp/cc5wagoz.s:291    .text.main:0000000000000074 $d
     /tmp/cc5wagoz.s:302    .bss.test:0000000000000000 test
     /tmp/cc5wagoz.s:303    .bss.test:0000000000000000 $d
     /tmp/cc5wagoz.s:305    .rodata.SystemClock_Config.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
MX_GPIO_Init
MX_ADC_Init
pwm_init
pwm_start
encoder_init
encoder_set_rotation_callback
encoder_start
pwm_set_dutycyle
HAL_Delay
