ARM GAS  /tmp/ccT2fac3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_adc_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_ADCEx_InjectedStart
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_ADCEx_InjectedStart:
  24              	.LFB64:
  25              		.file 1 "Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c"
   1:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @file    stm32l1xx_hal_adc_ex.c
   4:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          peripheral:
   8:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *           + Operation functions
   9:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  10:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  11:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  12:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *           + Control functions
  13:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  14:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  15:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          "stm32l1xx_hal_adc.c".
  16:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
  17:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   @verbatim
  18:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   [..] 
  19:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  20:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       available in file of generic functions "stm32l1xx_hal_adc.c".
  21:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   [..]
  22:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   @endverbatim
  23:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   ******************************************************************************
  24:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @attention
  25:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
  26:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  27:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
  28:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
  30:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  32:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
ARM GAS  /tmp/ccT2fac3.s 			page 2


  34:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  35:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  37:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *      without specific prior written permission.
  38:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
  39:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
  50:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   ******************************************************************************
  51:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
  52:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  53:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  54:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** #include "stm32l1xx_hal.h"
  55:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  56:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @addtogroup STM32L1xx_HAL_Driver
  57:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
  58:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
  59:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  60:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  61:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  62:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
  63:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
  64:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  65:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  66:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  67:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  68:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  69:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  70:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
  71:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
  72:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  73:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* ADC conversion cycles (unit: ADC clock cycles)                           */
  74:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* (selected sampling time + conversion time of 12 ADC clock cycles, with   */
  75:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* resolution 12 bits)                                                      */
  76:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_4CYCLE5   ( 16U)
  77:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_9CYCLES   ( 21U)
  78:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_16CYCLES  ( 28U)
  79:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_24CYCLES  ( 36U)
  80:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_48CYCLES  ( 60U)
  81:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_96CYCLES  (108U)
  82:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_192CYCLES (204U)
  83:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_384CYCLES (396U)
  84:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  85:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  86:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  87:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  88:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         (10U)
  89:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  90:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
ARM GAS  /tmp/ccT2fac3.s 			page 3


  91:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @}
  92:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
  93:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  94:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
  95:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
  96:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  97:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
  98:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
  99:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
 101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 ADC Extended IO operation functions
 104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  *  @brief    ADC Extended Input and Output operation functions
 105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  *
 106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** @verbatim
 107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  ===============================================================================
 108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  ===============================================================================
 110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
 112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** @endverbatim
 119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
 120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
 125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval HAL status
 127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
  26              		.loc 1 129 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
 130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process locked */
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  31              		.loc 1 136 0
  32 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
  33 0004 012B     		cmp	r3, #1
  34 0006 02D1     		bne	.L9
  35 0008 0223     		movs	r3, #2
 137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
ARM GAS  /tmp/ccT2fac3.s 			page 4


 138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Process unlocked */
 162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_INJECTED(hadc)              && 
 177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
 178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Enable ADC software conversion for injected channels */
 180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_JSWSTART);
 181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return function status */
 185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_hal_status;
 186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
  36              		.loc 1 186 0
  37 000a 1846     		mov	r0, r3
  38              	.LVL1:
  39 000c 7047     		bx	lr
  40              	.LVL2:
  41              	.L9:
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  42              		.loc 1 129 0 discriminator 2
ARM GAS  /tmp/ccT2fac3.s 			page 5


  43 000e 10B5     		push	{r4, lr}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 4, -8
  47              		.cfi_offset 14, -4
  48 0010 0446     		mov	r4, r0
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
  49              		.loc 1 136 0 discriminator 2
  50 0012 0123     		movs	r3, #1
  51 0014 80F84830 		strb	r3, [r0, #72]
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
  52              		.loc 1 139 0 discriminator 2
  53 0018 FFF7FEFF 		bl	ADC_Enable
  54              	.LVL3:
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
  55              		.loc 1 142 0 discriminator 2
  56 001c 0346     		mov	r3, r0
  57 001e 08BB     		cbnz	r0, .L2
 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
  58              		.loc 1 147 0
  59 0020 E26C     		ldr	r2, [r4, #76]
  60 0022 22F44052 		bic	r2, r2, #12288
  61 0026 22F00102 		bic	r2, r2, #1
  62 002a 42F48052 		orr	r2, r2, #4096
  63 002e E264     		str	r2, [r4, #76]
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
  64              		.loc 1 155 0
  65 0030 E26C     		ldr	r2, [r4, #76]
  66 0032 12F4807F 		tst	r2, #256
  67 0036 01D1     		bne	.L3
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
  68              		.loc 1 158 0
  69 0038 0022     		movs	r2, #0
  70 003a 2265     		str	r2, [r4, #80]
  71              	.L3:
 164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
  72              		.loc 1 164 0
  73 003c 0022     		movs	r2, #0
  74 003e 84F84820 		strb	r2, [r4, #72]
 168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
  75              		.loc 1 168 0
  76 0042 2268     		ldr	r2, [r4]
  77 0044 6FF00401 		mvn	r1, #4
  78 0048 1160     		str	r1, [r2]
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
  79              		.loc 1 176 0
  80 004a 2268     		ldr	r2, [r4]
  81 004c 9168     		ldr	r1, [r2, #8]
  82 004e 11F4401F 		tst	r1, #3145728
  83 0052 07D1     		bne	.L2
 177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
  84              		.loc 1 177 0 discriminator 1
  85 0054 5168     		ldr	r1, [r2, #4]
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
  86              		.loc 1 176 0 discriminator 1
  87 0056 11F4806F 		tst	r1, #1024
  88 005a 03D1     		bne	.L2
ARM GAS  /tmp/ccT2fac3.s 			page 6


 180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
  89              		.loc 1 180 0
  90 005c 9168     		ldr	r1, [r2, #8]
  91 005e 41F48001 		orr	r1, r1, #4194304
  92 0062 9160     		str	r1, [r2, #8]
  93              	.L2:
  94              		.loc 1 186 0
  95 0064 1846     		mov	r0, r3
  96              	.LVL4:
  97 0066 10BD     		pop	{r4, pc}
  98              		.cfi_endproc
  99              	.LFE64:
 101              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 102              		.align	1
 103              		.global	HAL_ADCEx_InjectedStop
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu softvfp
 109              	HAL_ADCEx_InjectedStop:
 110              	.LFB65:
 187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval None
 199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 111              		.loc 1 201 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              	.LVL5:
 202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process locked */
 208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 116              		.loc 1 208 0
 117 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 118 0004 012B     		cmp	r3, #1
 119 0006 25D0     		beq	.L14
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 120              		.loc 1 201 0 discriminator 2
 121 0008 10B5     		push	{r4, lr}
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccT2fac3.s 			page 7


 124              		.cfi_offset 4, -8
 125              		.cfi_offset 14, -4
 126 000a 0446     		mov	r4, r0
 127              		.loc 1 208 0 discriminator 2
 128 000c 0123     		movs	r3, #1
 129 000e 80F84830 		strb	r3, [r0, #72]
 209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 130              		.loc 1 216 0 discriminator 2
 131 0012 C36C     		ldr	r3, [r0, #76]
 132 0014 13F4807F 		tst	r3, #256
 133 0018 04D1     		bne	.L12
 217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 134              		.loc 1 217 0 discriminator 1
 135 001a 0368     		ldr	r3, [r0]
 136 001c 5B68     		ldr	r3, [r3, #4]
 216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 137              		.loc 1 216 0 discriminator 1
 138 001e 13F4806F 		tst	r3, #1024
 139 0022 09D0     		beq	.L19
 140              	.L12:
 218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set ADC state */
 227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 141              		.loc 1 235 0
 142 0024 E36C     		ldr	r3, [r4, #76]
 143 0026 43F02003 		orr	r3, r3, #32
 144 002a E364     		str	r3, [r4, #76]
 145              	.LVL6:
 236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 146              		.loc 1 237 0
 147 002c 0123     		movs	r3, #1
 148              	.LVL7:
 149              	.L13:
 238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/ccT2fac3.s 			page 8


 239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process unlocked */
 241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 150              		.loc 1 241 0
 151 002e 0022     		movs	r2, #0
 152 0030 84F84820 		strb	r2, [r4, #72]
 242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return function status */
 244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_hal_status;
 245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 153              		.loc 1 245 0
 154 0034 1846     		mov	r0, r3
 155 0036 10BD     		pop	{r4, pc}
 156              	.LVL8:
 157              	.L19:
 221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 158              		.loc 1 221 0
 159 0038 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 160              	.LVL9:
 224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 161              		.loc 1 224 0
 162 003c 0346     		mov	r3, r0
 163 003e 0028     		cmp	r0, #0
 164 0040 F5D1     		bne	.L13
 227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 165              		.loc 1 227 0
 166 0042 E26C     		ldr	r2, [r4, #76]
 167 0044 22F48852 		bic	r2, r2, #4352
 168 0048 22F00102 		bic	r2, r2, #1
 169 004c 42F00102 		orr	r2, r2, #1
 170 0050 E264     		str	r2, [r4, #76]
 171 0052 ECE7     		b	.L13
 172              	.LVL10:
 173              	.L14:
 174              	.LCFI2:
 175              		.cfi_def_cfa_offset 0
 176              		.cfi_restore 4
 177              		.cfi_restore 14
 208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 178              		.loc 1 208 0
 179 0054 0223     		movs	r3, #2
 180              		.loc 1 245 0
 181 0056 1846     		mov	r0, r3
 182              	.LVL11:
 183 0058 7047     		bx	lr
 184              		.cfi_endproc
 185              	.LFE65:
 187              		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 188              		.align	1
 189              		.global	HAL_ADCEx_InjectedPollForConversion
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu softvfp
 195              	HAL_ADCEx_InjectedPollForConversion:
 196              	.LFB66:
 246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccT2fac3.s 			page 9


 247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval HAL status
 252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 197              		.loc 1 254 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL12:
 202 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 24
 205              		.cfi_offset 4, -24
 206              		.cfi_offset 5, -20
 207              		.cfi_offset 6, -16
 208              		.cfi_offset 7, -12
 209              		.cfi_offset 8, -8
 210              		.cfi_offset 14, -4
 211 0004 0446     		mov	r4, r0
 212 0006 0D46     		mov	r5, r1
 213              	.LVL13:
 255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   uint32_t tickstart;
 256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Note: Variable "conversion_timeout_cpu_cycles" set to offset 28 CPU      */
 260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* cycles to compensate number of CPU cycles for processing of variable     */
 261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* "conversion_timeout_cpu_cycles_max"                                      */
 262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   uint32_t conversion_timeout_cpu_cycles = 28;
 263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   uint32_t conversion_timeout_cpu_cycles_max = 0;
 264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Get timeout */
 269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 214              		.loc 1 269 0
 215 0008 FFF7FEFF 		bl	HAL_GetTick
 216              	.LVL14:
 217 000c 0746     		mov	r7, r0
 218              	.LVL15:
 270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      
 271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
 275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* If setting "EOCSelection" is set to poll for each single conversion,     */
 276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* management of polling depends on setting of injected group sequencer:    */ 
 277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
 281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
ARM GAS  /tmp/ccT2fac3.s 			page 10


 282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    12 ADC clock cycles) and APB2/ADC clock prescalers (depending on      */
 286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    settings, conversion time range can vary from 8 to several thousands  */
 287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*    of CPU cycles).                                                       */
 288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Note: On STM32L1, setting "EOCSelection" is related to regular group     */
 290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       only, by hardware. For compatibility with other STM32 devices,     */
 291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       this setting is related also to injected group by software.        */
 292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)  ||
 219              		.loc 1 292 0
 220 000e 2368     		ldr	r3, [r4]
 221 0010 5A6C     		ldr	r2, [r3, #68]
 222 0012 12F4401F 		tst	r2, #3145728
 223 0016 03D0     		beq	.L23
 293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (hadc->Init.EOCSelection != ADC_EOC_SINGLE_CONV)   )
 224              		.loc 1 293 0 discriminator 1
 225 0018 6269     		ldr	r2, [r4, #20]
 292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (hadc->Init.EOCSelection != ADC_EOC_SINGLE_CONV)   )
 226              		.loc 1 292 0 discriminator 1
 227 001a B2F5806F 		cmp	r2, #1024
 228 001e 17D0     		beq	.L46
 229              	.LVL16:
 230              	.L23:
 294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 231              		.loc 1 296 0
 232 0020 2368     		ldr	r3, [r4]
 233 0022 1B68     		ldr	r3, [r3]
 234 0024 13F0040F 		tst	r3, #4
 235 0028 4ED1     		bne	.L27
 297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 236              		.loc 1 299 0
 237 002a B5F1FF3F 		cmp	r5, #-1
 238 002e F7D0     		beq	.L23
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 239              		.loc 1 301 0
 240 0030 25B1     		cbz	r5, .L24
 241              		.loc 1 301 0 is_stmt 0 discriminator 1
 242 0032 FFF7FEFF 		bl	HAL_GetTick
 243              	.LVL17:
 244 0036 C01B     		subs	r0, r0, r7
 245 0038 8542     		cmp	r5, r0
 246 003a F1D2     		bcs	.L23
 247              	.L24:
 302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         {
 303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 248              		.loc 1 304 0 is_stmt 1
 249 003c E36C     		ldr	r3, [r4, #76]
 250 003e 43F00403 		orr	r3, r3, #4
 251 0042 E364     		str	r3, [r4, #76]
ARM GAS  /tmp/ccT2fac3.s 			page 11


 305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           
 306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           /* Process unlocked */
 307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 252              		.loc 1 307 0
 253 0044 0023     		movs	r3, #0
 254 0046 84F84830 		strb	r3, [r4, #72]
 308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           
 309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 255              		.loc 1 309 0
 256 004a 0320     		movs	r0, #3
 257 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 258              	.LVL18:
 259              	.L46:
 310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         }
 311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Computation of CPU cycles corresponding to ADC conversion cycles.      */
 317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Retrieve ADC clock prescaler and ADC maximum conversion cycles on all  */
 318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* channels.                                                              */
 319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     conversion_timeout_cpu_cycles_max = ADC_GET_CLOCK_PRESCALER_DECIMAL(hadc);
 260              		.loc 1 319 0
 261 0050 3E4A     		ldr	r2, .L47
 262 0052 5268     		ldr	r2, [r2, #4]
 263 0054 02F44032 		and	r2, r2, #196608
 264              	.LVL19:
 265              	.LBB6:
 266              	.LBB7:
 267              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/ccT2fac3.s 			page 12


  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccT2fac3.s 			page 13


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccT2fac3.s 			page 14


 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
ARM GAS  /tmp/ccT2fac3.s 			page 15


 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccT2fac3.s 			page 16


 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccT2fac3.s 			page 17


 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccT2fac3.s 			page 18


 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/ccT2fac3.s 			page 19


 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccT2fac3.s 			page 20


 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 268              		.loc 2 531 0
 269 0058 4FF44038 		mov	r8, #196608
 270              		.syntax unified
 271              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 272 005c 98FAA8F8 		rbit r8, r8
 273              	@ 0 "" 2
 274              	.LVL20:
 275              		.thumb
ARM GAS  /tmp/ccT2fac3.s 			page 21


 276              		.syntax unified
 277              	.LBE7:
 278              	.LBE6:
 279              		.loc 1 319 0
 280 0060 B8FA88F8 		clz	r8, r8
 281 0064 22FA08F2 		lsr	r2, r2, r8
 282              	.LVL21:
 320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     conversion_timeout_cpu_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 283              		.loc 1 320 0
 284 0068 5869     		ldr	r0, [r3, #20]
 285              	.LVL22:
 286 006a 3949     		ldr	r1, .L47+4
 287 006c 0842     		tst	r0, r1
 288 006e 09D1     		bne	.L35
 289              		.loc 1 320 0 is_stmt 0 discriminator 1
 290 0070 1869     		ldr	r0, [r3, #16]
 291 0072 0842     		tst	r0, r1
 292 0074 0CD1     		bne	.L36
 293              		.loc 1 320 0 discriminator 3
 294 0076 D968     		ldr	r1, [r3, #12]
 295 0078 364B     		ldr	r3, .L47+8
 296 007a 1942     		tst	r1, r3
 297 007c 0BD0     		beq	.L37
 298              		.loc 1 320 0
 299 007e 4FF4C678 		mov	r8, #396
 300 0082 01E0     		b	.L28
 301              	.L35:
 302 0084 4FF4C678 		mov	r8, #396
 303              	.L28:
 304              		.loc 1 320 0 discriminator 8
 305 0088 08FA02F8 		lsl	r8, r8, r2
 306              	.LVL23:
 262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   uint32_t conversion_timeout_cpu_cycles_max = 0;
 307              		.loc 1 262 0 is_stmt 1 discriminator 8
 308 008c 1C26     		movs	r6, #28
 321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Poll with maximum conversion time */
 323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     while(conversion_timeout_cpu_cycles < conversion_timeout_cpu_cycles_max)
 309              		.loc 1 323 0 discriminator 8
 310 008e 06E0     		b	.L29
 311              	.LVL24:
 312              	.L36:
 320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 313              		.loc 1 320 0
 314 0090 4FF4C678 		mov	r8, #396
 315 0094 F8E7     		b	.L28
 316              	.L37:
 317 0096 4FF02408 		mov	r8, #36
 318 009a F5E7     		b	.L28
 319              	.LVL25:
 320              	.L30:
 324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/ccT2fac3.s 			page 22


 330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           /* Process unlocked */
 334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           
 336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         }
 338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       conversion_timeout_cpu_cycles ++;
 321              		.loc 1 339 0
 322 009c 0136     		adds	r6, r6, #1
 323              	.LVL26:
 324              	.L29:
 323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 325              		.loc 1 323 0
 326 009e 4645     		cmp	r6, r8
 327 00a0 12D2     		bcs	.L27
 326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 328              		.loc 1 326 0
 329 00a2 B5F1FF3F 		cmp	r5, #-1
 330 00a6 F9D0     		beq	.L30
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         {
 331              		.loc 1 328 0
 332 00a8 25B1     		cbz	r5, .L31
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         {
 333              		.loc 1 328 0 is_stmt 0 discriminator 1
 334 00aa FFF7FEFF 		bl	HAL_GetTick
 335              	.LVL27:
 336 00ae C01B     		subs	r0, r0, r7
 337 00b0 8542     		cmp	r5, r0
 338 00b2 F3D2     		bcs	.L30
 339              	.L31:
 331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 340              		.loc 1 331 0 is_stmt 1
 341 00b4 E36C     		ldr	r3, [r4, #76]
 342 00b6 43F00403 		orr	r3, r3, #4
 343 00ba E364     		str	r3, [r4, #76]
 334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****           
 344              		.loc 1 334 0
 345 00bc 0023     		movs	r3, #0
 346 00be 84F84830 		strb	r3, [r4, #72]
 336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         }
 347              		.loc 1 336 0
 348 00c2 0320     		movs	r0, #3
 349 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 350              	.LVL28:
 351              	.L27:
 340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Clear end of conversion flag of injected group if low power feature      */
 344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* "Auto Wait" is disabled, to not interfere with this feature until data   */
 345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* register is read using function HAL_ADCEx_InjectedGetValue().            */
 346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 352              		.loc 1 346 0
 353 00c8 A369     		ldr	r3, [r4, #24]
ARM GAS  /tmp/ccT2fac3.s 			page 23


 354 00ca 1BB9     		cbnz	r3, .L33
 347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 355              		.loc 1 349 0
 356 00cc 2368     		ldr	r3, [r4]
 357 00ce 6FF00C02 		mvn	r2, #12
 358 00d2 1A60     		str	r2, [r3]
 359              	.L33:
 350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 360              		.loc 1 353 0
 361 00d4 E36C     		ldr	r3, [r4, #76]
 362 00d6 43F40053 		orr	r3, r3, #8192
 363 00da E364     		str	r3, [r4, #76]
 354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Note: On STM32L1, there is no independent flag of end of sequence.       */
 358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       The test of scan sequence on going is done either with scan        */
 359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       sequence disabled or with end of conversion flag set to            */
 360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       of end of sequence.                                                */
 361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 364              		.loc 1 361 0
 365 00dc 2368     		ldr	r3, [r4]
 366 00de 9A68     		ldr	r2, [r3, #8]
 367 00e0 12F4401F 		tst	r2, #3145728
 368 00e4 20D1     		bne	.L38
 362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 369              		.loc 1 362 0 discriminator 1
 370 00e6 5A6C     		ldr	r2, [r3, #68]
 361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 371              		.loc 1 361 0 discriminator 1
 372 00e8 12F4401F 		tst	r2, #3145728
 373 00ec 03D0     		beq	.L34
 363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 374              		.loc 1 363 0
 375 00ee 9A68     		ldr	r2, [r3, #8]
 362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 376              		.loc 1 362 0
 377 00f0 12F4806F 		tst	r2, #1024
 378 00f4 1BD1     		bne	.L39
 379              	.L34:
 364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 380              		.loc 1 364 0
 381 00f6 5A68     		ldr	r2, [r3, #4]
 363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 382              		.loc 1 363 0
 383 00f8 12F4806F 		tst	r2, #1024
 384 00fc 1AD1     		bne	.L40
 365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 385              		.loc 1 365 0
 386 00fe 9B68     		ldr	r3, [r3, #8]
 364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 387              		.loc 1 364 0
ARM GAS  /tmp/ccT2fac3.s 			page 24


 388 0100 13F0405F 		tst	r3, #805306368
 389 0104 19D1     		bne	.L41
 366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 390              		.loc 1 366 0
 391 0106 636A     		ldr	r3, [r4, #36]
 365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 392              		.loc 1 365 0
 393 0108 D3B9     		cbnz	r3, .L42
 367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Set ADC state */
 369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 394              		.loc 1 369 0
 395 010a E36C     		ldr	r3, [r4, #76]
 396 010c 23F48053 		bic	r3, r3, #4096
 397 0110 E364     		str	r3, [r4, #76]
 370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 398              		.loc 1 371 0
 399 0112 E36C     		ldr	r3, [r4, #76]
 400 0114 13F4807F 		tst	r3, #256
 401 0118 15D1     		bne	.L43
 372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     { 
 373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 402              		.loc 1 373 0
 403 011a E36C     		ldr	r3, [r4, #76]
 404 011c 43F00103 		orr	r3, r3, #1
 405 0120 E364     		str	r3, [r4, #76]
 374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return ADC state */
 378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return HAL_OK;
 406              		.loc 1 378 0
 407 0122 0020     		movs	r0, #0
 408 0124 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 409              	.LVL29:
 410              	.L38:
 411 0128 0020     		movs	r0, #0
 412 012a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 413              	.LVL30:
 414              	.L39:
 415 012e 0020     		movs	r0, #0
 416 0130 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 417              	.LVL31:
 418              	.L40:
 419 0134 0020     		movs	r0, #0
 420 0136 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 421              	.LVL32:
 422              	.L41:
 423 013a 0020     		movs	r0, #0
 424 013c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 425              	.LVL33:
 426              	.L42:
 427 0140 0020     		movs	r0, #0
 428 0142 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 429              	.LVL34:
 430              	.L43:
ARM GAS  /tmp/ccT2fac3.s 			page 25


 431 0146 0020     		movs	r0, #0
 379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 432              		.loc 1 379 0
 433 0148 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 434              	.LVL35:
 435              	.L48:
 436              		.align	2
 437              	.L47:
 438 014c 00270140 		.word	1073817344
 439 0150 24499224 		.word	613566756
 440 0154 24491200 		.word	1198372
 441              		.cfi_endproc
 442              	.LFE66:
 444              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 445              		.align	1
 446              		.global	HAL_ADCEx_InjectedStart_IT
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu softvfp
 452              	HAL_ADCEx_InjectedStart_IT:
 453              	.LFB67:
 380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval HAL status.
 387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 454              		.loc 1 389 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              	.LVL36:
 390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process locked */
 396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 459              		.loc 1 396 0
 460 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 461 0004 012B     		cmp	r3, #1
 462 0006 02D1     		bne	.L57
 463 0008 0223     		movs	r3, #2
 397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
ARM GAS  /tmp/ccT2fac3.s 			page 26


 405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Process unlocked */
 422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_INJECTED(hadc)              && 
 440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Enable ADC software conversion for injected channels */
 443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_JSWSTART);
 444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return function status */
 448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_hal_status;
 449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 464              		.loc 1 449 0
 465 000a 1846     		mov	r0, r3
 466              	.LVL37:
 467 000c 7047     		bx	lr
 468              	.LVL38:
 469              	.L57:
 389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 470              		.loc 1 389 0 discriminator 2
 471 000e 10B5     		push	{r4, lr}
 472              	.LCFI4:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 4, -8
ARM GAS  /tmp/ccT2fac3.s 			page 27


 475              		.cfi_offset 14, -4
 476 0010 0446     		mov	r4, r0
 396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 477              		.loc 1 396 0 discriminator 2
 478 0012 0123     		movs	r3, #1
 479 0014 80F84830 		strb	r3, [r0, #72]
 399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 480              		.loc 1 399 0 discriminator 2
 481 0018 FFF7FEFF 		bl	ADC_Enable
 482              	.LVL39:
 402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 483              		.loc 1 402 0 discriminator 2
 484 001c 0346     		mov	r3, r0
 485 001e 30BB     		cbnz	r0, .L50
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 486              		.loc 1 407 0
 487 0020 E26C     		ldr	r2, [r4, #76]
 488 0022 22F44052 		bic	r2, r2, #12288
 489 0026 22F00102 		bic	r2, r2, #1
 490 002a 42F48052 		orr	r2, r2, #4096
 491 002e E264     		str	r2, [r4, #76]
 415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 492              		.loc 1 415 0
 493 0030 E26C     		ldr	r2, [r4, #76]
 494 0032 12F4807F 		tst	r2, #256
 495 0036 01D1     		bne	.L51
 418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 496              		.loc 1 418 0
 497 0038 0022     		movs	r2, #0
 498 003a 2265     		str	r2, [r4, #80]
 499              	.L51:
 424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 500              		.loc 1 424 0
 501 003c 0022     		movs	r2, #0
 502 003e 84F84820 		strb	r2, [r4, #72]
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 503              		.loc 1 428 0
 504 0042 2268     		ldr	r2, [r4]
 505 0044 6FF00401 		mvn	r1, #4
 506 0048 1160     		str	r1, [r2]
 431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 507              		.loc 1 431 0
 508 004a 2168     		ldr	r1, [r4]
 509 004c 4A68     		ldr	r2, [r1, #4]
 510 004e 42F08002 		orr	r2, r2, #128
 511 0052 4A60     		str	r2, [r1, #4]
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
 512              		.loc 1 439 0
 513 0054 2268     		ldr	r2, [r4]
 514 0056 9168     		ldr	r1, [r2, #8]
 515 0058 11F4401F 		tst	r1, #3145728
 516 005c 07D1     		bne	.L50
 440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 517              		.loc 1 440 0 discriminator 1
 518 005e 5168     		ldr	r1, [r2, #4]
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)  )
 519              		.loc 1 439 0 discriminator 1
ARM GAS  /tmp/ccT2fac3.s 			page 28


 520 0060 11F4806F 		tst	r1, #1024
 521 0064 03D1     		bne	.L50
 443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 522              		.loc 1 443 0
 523 0066 9168     		ldr	r1, [r2, #8]
 524 0068 41F48001 		orr	r1, r1, #4194304
 525 006c 9160     		str	r1, [r2, #8]
 526              	.L50:
 527              		.loc 1 449 0
 528 006e 1846     		mov	r0, r3
 529              	.LVL40:
 530 0070 10BD     		pop	{r4, pc}
 531              		.cfi_endproc
 532              	.LFE67:
 534              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 535              		.align	1
 536              		.global	HAL_ADCEx_InjectedStop_IT
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu softvfp
 542              	HAL_ADCEx_InjectedStop_IT:
 543              	.LFB68:
 450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         is on going.
 455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval None
 462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 544              		.loc 1 464 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LVL41:
 465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process locked */
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 549              		.loc 1 471 0
 550 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 551 0004 012B     		cmp	r3, #1
 552 0006 2AD0     		beq	.L62
 464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 553              		.loc 1 464 0 discriminator 2
 554 0008 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccT2fac3.s 			page 29


 555              	.LCFI5:
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 4, -8
 558              		.cfi_offset 14, -4
 559 000a 0446     		mov	r4, r0
 560              		.loc 1 471 0 discriminator 2
 561 000c 0123     		movs	r3, #1
 562 000e 80F84830 		strb	r3, [r0, #72]
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 563              		.loc 1 479 0 discriminator 2
 564 0012 C36C     		ldr	r3, [r0, #76]
 565 0014 13F4807F 		tst	r3, #256
 566 0018 04D1     		bne	.L60
 480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 567              		.loc 1 480 0 discriminator 1
 568 001a 0368     		ldr	r3, [r0]
 569 001c 5B68     		ldr	r3, [r3, #4]
 479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 570              		.loc 1 479 0 discriminator 1
 571 001e 13F4806F 		tst	r3, #1024
 572 0022 09D0     		beq	.L67
 573              	.L60:
 481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set ADC state */
 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 574              		.loc 1 501 0
 575 0024 E36C     		ldr	r3, [r4, #76]
 576 0026 43F02003 		orr	r3, r3, #32
 577 002a E364     		str	r3, [r4, #76]
 578              	.LVL42:
 502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
ARM GAS  /tmp/ccT2fac3.s 			page 30


 579              		.loc 1 503 0
 580 002c 0123     		movs	r3, #1
 581              	.LVL43:
 582              	.L61:
 504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process unlocked */
 507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 583              		.loc 1 507 0
 584 002e 0022     		movs	r2, #0
 585 0030 84F84820 		strb	r2, [r4, #72]
 508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return function status */
 510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_hal_status;
 511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 586              		.loc 1 511 0
 587 0034 1846     		mov	r0, r3
 588 0036 10BD     		pop	{r4, pc}
 589              	.LVL44:
 590              	.L67:
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 591              		.loc 1 484 0
 592 0038 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 593              	.LVL45:
 487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 594              		.loc 1 487 0
 595 003c 0346     		mov	r3, r0
 596 003e 0028     		cmp	r0, #0
 597 0040 F5D1     		bne	.L61
 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 598              		.loc 1 490 0
 599 0042 2168     		ldr	r1, [r4]
 600 0044 4A68     		ldr	r2, [r1, #4]
 601 0046 22F08002 		bic	r2, r2, #128
 602 004a 4A60     		str	r2, [r1, #4]
 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 603              		.loc 1 493 0
 604 004c E26C     		ldr	r2, [r4, #76]
 605 004e 22F48852 		bic	r2, r2, #4352
 606 0052 22F00102 		bic	r2, r2, #1
 607 0056 42F00102 		orr	r2, r2, #1
 608 005a E264     		str	r2, [r4, #76]
 609 005c E7E7     		b	.L61
 610              	.LVL46:
 611              	.L62:
 612              	.LCFI6:
 613              		.cfi_def_cfa_offset 0
 614              		.cfi_restore 4
 615              		.cfi_restore 14
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 616              		.loc 1 471 0
 617 005e 0223     		movs	r3, #2
 618              		.loc 1 511 0
 619 0060 1846     		mov	r0, r3
 620              	.LVL47:
 621 0062 7047     		bx	lr
 622              		.cfi_endproc
ARM GAS  /tmp/ccT2fac3.s 			page 31


 623              	.LFE68:
 625              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 626              		.align	1
 627              		.global	HAL_ADCEx_InjectedGetValue
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu softvfp
 633              	HAL_ADCEx_InjectedGetValue:
 634              	.LFB69:
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
 515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
 519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            to flag JEOC.
 522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 635              		.loc 1 542 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640              	.LVL48:
 543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0;
 544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Get ADC converted value */
 550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   switch(InjectedRank)
 641              		.loc 1 550 0
 642 0000 0329     		cmp	r1, #3
ARM GAS  /tmp/ccT2fac3.s 			page 32


 643 0002 09D0     		beq	.L70
 644 0004 0429     		cmp	r1, #4
 645 0006 04D0     		beq	.L71
 646 0008 0229     		cmp	r1, #2
 647 000a 08D0     		beq	.L75
 551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {  
 552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4:
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     default:
 563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 648              		.loc 1 563 0
 649 000c 0368     		ldr	r3, [r0]
 650 000e 986C     		ldr	r0, [r3, #72]
 651              	.LVL49:
 564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_jdr;
 569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 652              		.loc 1 569 0
 653 0010 7047     		bx	lr
 654              	.LVL50:
 655              	.L71:
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 656              		.loc 1 553 0
 657 0012 0368     		ldr	r3, [r0]
 658 0014 586D     		ldr	r0, [r3, #84]
 659              	.LVL51:
 554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 660              		.loc 1 554 0
 661 0016 7047     		bx	lr
 662              	.LVL52:
 663              	.L70:
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 664              		.loc 1 556 0
 665 0018 0368     		ldr	r3, [r0]
 666 001a 186D     		ldr	r0, [r3, #80]
 667              	.LVL53:
 557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 668              		.loc 1 557 0
 669 001c 7047     		bx	lr
 670              	.LVL54:
 671              	.L75:
 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 672              		.loc 1 559 0
 673 001e 0368     		ldr	r3, [r0]
 674 0020 D86C     		ldr	r0, [r3, #76]
 675              	.LVL55:
ARM GAS  /tmp/ccT2fac3.s 			page 33


 560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 676              		.loc 1 560 0
 677 0022 7047     		bx	lr
 678              		.cfi_endproc
 679              	.LFE69:
 681              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 682              		.align	1
 683              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu softvfp
 689              	HAL_ADCEx_InjectedConvCpltCallback:
 690              	.LFB70:
 570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval None
 575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {
 691              		.loc 1 577 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696              	.LVL56:
 697 0000 7047     		bx	lr
 698              		.cfi_endproc
 699              	.LFE70:
 701              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 702              		.align	1
 703              		.global	HAL_ADCEx_InjectedConfigChannel
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 707              		.fpu softvfp
 709              	HAL_ADCEx_InjectedConfigChannel:
 710              	.LFB71:
 578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   UNUSED(hadc);
 580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
 583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @}
 588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 ADC Extended Peripheral Control functions
 591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief    ADC Extended Peripheral Control functions
 592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *
 593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** @verbatim   
 594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  ===============================================================================
ARM GAS  /tmp/ccT2fac3.s 			page 34


 595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
 596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****  ===============================================================================  
 597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
 599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       
 600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** @endverbatim
 601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @{
 602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** /**
 605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
 606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         linked to the injected group.
 607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
 609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
 610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
 611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
 612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
 613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
 615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   *         injected group.
 616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   * @retval None
 617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   */
 618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
 619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** {   
 711              		.loc 1 619 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 8
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 716              	.LVL57:
 717              		.loc 1 619 0
 718 0000 F0B4     		push	{r4, r5, r6, r7}
 719              	.LCFI7:
 720              		.cfi_def_cfa_offset 16
 721              		.cfi_offset 4, -16
 722              		.cfi_offset 5, -12
 723              		.cfi_offset 6, -8
 724              		.cfi_offset 7, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              	.LCFI8:
 727              		.cfi_def_cfa_offset 24
 728 0004 0346     		mov	r3, r0
 729              	.LVL58:
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 730              		.loc 1 621 0
 731 0006 0022     		movs	r2, #0
 732 0008 0192     		str	r2, [sp, #4]
 622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Check the parameters */
 624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
 629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, sConfigInjected->InjectedOffset));
ARM GAS  /tmp/ccT2fac3.s 			page 35


 630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 733              		.loc 1 631 0
 734 000a 0069     		ldr	r0, [r0, #16]
 735              	.LVL59:
 632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process locked */
 644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 736              		.loc 1 644 0
 737 000c 93F84820 		ldrb	r2, [r3, #72]	@ zero_extendqisi2
 738 0010 012A     		cmp	r2, #1
 739 0012 00F00681 		beq	.L101
 740              		.loc 1 644 0 is_stmt 0 discriminator 2
 741 0016 0122     		movs	r2, #1
 742 0018 83F84820 		strb	r2, [r3, #72]
 645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
 647:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
 648:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
 649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
 650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
 651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
 652:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
 653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
 654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*   parameter ""InjectedNbrOfConversion".                                  */
 655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 743              		.loc 1 655 0 is_stmt 1 discriminator 2
 744 001c 0028     		cmp	r0, #0
 745 001e 4FD1     		bne	.L79
 656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 657:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 746              		.loc 1 657 0
 747 0020 4A68     		ldr	r2, [r1, #4]
 748 0022 012A     		cmp	r2, #1
 749 0024 42D0     		beq	.L104
 658:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         MODIFY_REG(hadc->Instance->JSQR                              ,
 661:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JL   |
 662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ4 |
 663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ3 |
 664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ2 |
 665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JSQ1                                     ,
 666:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
 667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                     ADC_INJECTED_RANK_1,
 668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                     0x01)                             );
 669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/ccT2fac3.s 			page 36


 670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
 671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
 672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     else
 673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 750              		.loc 1 675 0
 751 0026 DA6C     		ldr	r2, [r3, #76]
 752 0028 42F02002 		orr	r2, r2, #32
 753 002c DA64     		str	r2, [r3, #76]
 754              	.LVL60:
 676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         
 677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 755              		.loc 1 677 0
 756 002e 0120     		movs	r0, #1
 757              	.LVL61:
 758              	.L81:
 678:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 680:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {   
 682:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
 683:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
 684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
 685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 687:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
 688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
 689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                                     ,
 690:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 691:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
 692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
 693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
 694:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)               ,
 695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion)             |
 697:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
 698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                                 sConfigInjected->InjectedRank,         
 699:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                                 sConfigInjected->InjectedNbrOfConversion)  );
 700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 701:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     else
 702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
 704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
 705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 706:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
 707:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
 708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
 709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
 710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  0x00000000                                                  );
 712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 713:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   } 
 714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 715:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Enable external trigger if trigger selection is different of software    */
 716:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* start.                                                                   */
 717:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Note: This configuration keeps the hardware feature of parameter         */
ARM GAS  /tmp/ccT2fac3.s 			page 37


 718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to             */
 719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*       software start.                                                    */
 720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 721:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 759              		.loc 1 721 0
 760 0030 CC69     		ldr	r4, [r1, #28]
 761 0032 102C     		cmp	r4, #16
 762 0034 6ED0     		beq	.L83
 722:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {    
 723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                        ,
 763              		.loc 1 723 0
 764 0036 1D68     		ldr	r5, [r3]
 765 0038 AA68     		ldr	r2, [r5, #8]
 766 003a 22F47C12 		bic	r2, r2, #4128768
 767 003e 0E6A     		ldr	r6, [r1, #32]
 768 0040 3443     		orrs	r4, r4, r6
 769 0042 2243     		orrs	r2, r2, r4
 770 0044 AA60     		str	r2, [r5, #8]
 771              	.L84:
 724:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_CR2_JEXTEN  |
 725:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL                            ,
 726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                sConfigInjected->ExternalTrigInjecConv    |
 727:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                sConfigInjected->ExternalTrigInjecConvEdge  );
 728:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 729:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 730:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2,
 732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_CR2_JEXTEN  |
 733:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL    ,
 734:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                0x00000000          );
 735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 736:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
 738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
 739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
 740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
 741:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
 742:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET))
 772              		.loc 1 742 0
 773 0046 1A68     		ldr	r2, [r3]
 774 0048 1468     		ldr	r4, [r2]
 775 004a 14F0400F 		tst	r4, #64
 776 004e 09D1     		bne	.L85
 743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO   |
 777              		.loc 1 744 0
 778 0050 5468     		ldr	r4, [r2, #4]
 779 0052 24F4A054 		bic	r4, r4, #5120
 780 0056 5460     		str	r4, [r2, #4]
 745:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                              ADC_CR1_JDISCEN  );
 746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
 748:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
 749:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 781              		.loc 1 749 0
 782 0058 8A69     		ldr	r2, [r1, #24]
 783 005a 012A     		cmp	r2, #1
ARM GAS  /tmp/ccT2fac3.s 			page 38


 784 005c 60D0     		beq	.L105
 785              	.LVL62:
 786              	.L86:
 750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 754:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 755:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       else
 756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 759:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         
 760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 762:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
 765:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
 766:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 787              		.loc 1 766 0
 788 005e 4A69     		ldr	r2, [r1, #20]
 789 0060 012A     		cmp	r2, #1
 790 0062 6CD0     		beq	.L106
 791              	.LVL63:
 792              	.L85:
 767:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 769:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       } 
 772:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       else
 773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         
 777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 778:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 779:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 780:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 781:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** 
 782:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Channel sampling time configuration */
 783:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For InjectedChannels 0 to 9 */
 784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel < ADC_CHANNEL_10)
 793              		.loc 1 784 0
 794 0064 0A68     		ldr	r2, [r1]
 795 0066 092A     		cmp	r2, #9
 796 0068 77D8     		bhi	.L89
 785:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 786:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR3,
 797              		.loc 1 786 0
 798 006a 1E68     		ldr	r6, [r3]
 799 006c 7469     		ldr	r4, [r6, #20]
 800 006e 02EB4202 		add	r2, r2, r2, lsl #1
 801 0072 0725     		movs	r5, #7
 802 0074 9540     		lsls	r5, r5, r2
 803 0076 24EA0504 		bic	r4, r4, r5
ARM GAS  /tmp/ccT2fac3.s 			page 39


 804 007a 8D68     		ldr	r5, [r1, #8]
 805 007c 05FA02F2 		lsl	r2, r5, r2
 806 0080 2243     		orrs	r2, r2, r4
 807 0082 7261     		str	r2, [r6, #20]
 808              	.L90:
 787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR3(ADC_SMPR3_SMP0, sConfigInjected->InjectedChannel),
 788:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR3(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
 789:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For InjectedChannels 10 to 19 */
 791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else if (sConfigInjected->InjectedChannel < ADC_CHANNEL_20)
 792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2,
 794:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel),
 795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
 796:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 797:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For InjectedChannels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
 798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For InjectedChannels 20 to 29 for devices Cat4, Cat.5 */
 799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else if (sConfigInjected->InjectedChannel <= ADC_SMPR1_CHANNEL_MAX)
 800:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {   
 801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1,
 802:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfigInjected->InjectedChannel),
 803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
 804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 805:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* For InjectedChannels 30 to 31 for devices Cat4, Cat.5 */
 806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   else
 807:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 808:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     ADC_SMPR0_CHANNEL_SET(hadc, sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedCha
 809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 810:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
 813:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 809              		.loc 1 813 0
 810 0084 4A68     		ldr	r2, [r1, #4]
 811 0086 022A     		cmp	r2, #2
 812 0088 00F09E80 		beq	.L94
 813 008c 032A     		cmp	r2, #3
 814 008e 00F0A580 		beq	.L95
 815 0092 012A     		cmp	r2, #1
 816 0094 00F08580 		beq	.L107
 814:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 1:
 816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
 817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
 818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
 819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
 820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 2:
 822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
 823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
 824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
 825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
 826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 827:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 3:
 828:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
 829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
 830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
ARM GAS  /tmp/ccT2fac3.s 			page 40


 831:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
 832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 833:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 4:
 834:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     default:
 835:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
 817              		.loc 1 835 0
 818 0098 1C68     		ldr	r4, [r3]
 819 009a 626A     		ldr	r2, [r4, #36]
 820 009c 22F47F62 		bic	r2, r2, #4080
 821 00a0 22F00F02 		bic	r2, r2, #15
 822 00a4 CD68     		ldr	r5, [r1, #12]
 823 00a6 2A43     		orrs	r2, r2, r5
 824 00a8 6262     		str	r2, [r4, #36]
 836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
 837:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
 838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       break;
 825              		.loc 1 838 0
 826 00aa 83E0     		b	.L97
 827              	.LVL64:
 828              	.L104:
 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                    ADC_JSQR_JL   |
 829              		.loc 1 660 0
 830 00ac 1868     		ldr	r0, [r3]
 831 00ae 426C     		ldr	r2, [r0, #68]
 832 00b0 920D     		lsrs	r2, r2, #22
 833 00b2 9205     		lsls	r2, r2, #22
 834 00b4 0C68     		ldr	r4, [r1]
 835 00b6 42EAC432 		orr	r2, r2, r4, lsl #15
 836 00ba 4264     		str	r2, [r0, #68]
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 837              		.loc 1 620 0
 838 00bc 0020     		movs	r0, #0
 839 00be B7E7     		b	.L81
 840              	.L79:
 685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 841              		.loc 1 685 0
 842 00c0 4A68     		ldr	r2, [r1, #4]
 843 00c2 0C69     		ldr	r4, [r1, #16]
 844 00c4 A242     		cmp	r2, r4
 845 00c6 15D8     		bhi	.L82
 689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 846              		.loc 1 689 0
 847 00c8 1F68     		ldr	r7, [r3]
 848 00ca 7D6C     		ldr	r5, [r7, #68]
 849 00cc 101B     		subs	r0, r2, r4
 850 00ce 00EB8000 		add	r0, r0, r0, lsl #2
 851 00d2 0F30     		adds	r0, r0, #15
 852 00d4 1F22     		movs	r2, #31
 853 00d6 8240     		lsls	r2, r2, r0
 854 00d8 42F44012 		orr	r2, r2, #3145728
 855 00dc 25EA0205 		bic	r5, r5, r2
 856 00e0 621E     		subs	r2, r4, #1
 857 00e2 0E68     		ldr	r6, [r1]
 858 00e4 06FA00F0 		lsl	r0, r6, r0
 859 00e8 40EA0252 		orr	r2, r0, r2, lsl #20
 860 00ec 2A43     		orrs	r2, r2, r5
 861 00ee 7A64     		str	r2, [r7, #68]
ARM GAS  /tmp/ccT2fac3.s 			page 41


 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 862              		.loc 1 620 0
 863 00f0 0020     		movs	r0, #0
 864 00f2 9DE7     		b	.L81
 865              	.L82:
 704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  
 866              		.loc 1 704 0
 867 00f4 1E68     		ldr	r6, [r3]
 868 00f6 756C     		ldr	r5, [r6, #68]
 869 00f8 121B     		subs	r2, r2, r4
 870 00fa 02EB8202 		add	r2, r2, r2, lsl #2
 871 00fe 0F32     		adds	r2, r2, #15
 872 0100 1F20     		movs	r0, #31
 873 0102 00FA02F2 		lsl	r2, r0, r2
 874 0106 42F44012 		orr	r2, r2, #3145728
 875 010a 25EA0202 		bic	r2, r5, r2
 876 010e 7264     		str	r2, [r6, #68]
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 877              		.loc 1 620 0
 878 0110 0020     		movs	r0, #0
 879 0112 8DE7     		b	.L81
 880              	.LVL65:
 881              	.L83:
 731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_CR2_JEXTEN  |
 882              		.loc 1 731 0
 883 0114 1C68     		ldr	r4, [r3]
 884 0116 A268     		ldr	r2, [r4, #8]
 885 0118 22F47C12 		bic	r2, r2, #4128768
 886 011c A260     		str	r2, [r4, #8]
 887 011e 92E7     		b	.L84
 888              	.L105:
 751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 889              		.loc 1 751 0
 890 0120 CA69     		ldr	r2, [r1, #28]
 891 0122 102A     		cmp	r2, #16
 892 0124 05D0     		beq	.L108
 758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         
 893              		.loc 1 758 0
 894 0126 DA6C     		ldr	r2, [r3, #76]
 895 0128 42F02002 		orr	r2, r2, #32
 896 012c DA64     		str	r2, [r3, #76]
 897              	.LVL66:
 760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 898              		.loc 1 760 0
 899 012e 0120     		movs	r0, #1
 900 0130 95E7     		b	.L86
 901              	.LVL67:
 902              	.L108:
 753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 903              		.loc 1 753 0
 904 0132 1C68     		ldr	r4, [r3]
 905 0134 6268     		ldr	r2, [r4, #4]
 906 0136 42F48062 		orr	r2, r2, #1024
 907 013a 6260     		str	r2, [r4, #4]
 908 013c 8FE7     		b	.L86
 909              	.L106:
 768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
ARM GAS  /tmp/ccT2fac3.s 			page 42


 910              		.loc 1 768 0
 911 013e 8A69     		ldr	r2, [r1, #24]
 912 0140 2AB9     		cbnz	r2, .L88
 770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       } 
 913              		.loc 1 770 0
 914 0142 1C68     		ldr	r4, [r3]
 915 0144 6268     		ldr	r2, [r4, #4]
 916 0146 42F48052 		orr	r2, r2, #4096
 917 014a 6260     		str	r2, [r4, #4]
 918 014c 8AE7     		b	.L85
 919              	.L88:
 775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         
 920              		.loc 1 775 0
 921 014e DA6C     		ldr	r2, [r3, #76]
 922 0150 42F02002 		orr	r2, r2, #32
 923 0154 DA64     		str	r2, [r3, #76]
 924              	.LVL68:
 777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 925              		.loc 1 777 0
 926 0156 0120     		movs	r0, #1
 927 0158 84E7     		b	.L85
 928              	.LVL69:
 929              	.L89:
 791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 930              		.loc 1 791 0
 931 015a 132A     		cmp	r2, #19
 932 015c 0ED8     		bhi	.L91
 793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel),
 933              		.loc 1 793 0
 934 015e 1E68     		ldr	r6, [r3]
 935 0160 3469     		ldr	r4, [r6, #16]
 936 0162 02EB4202 		add	r2, r2, r2, lsl #1
 937 0166 1E3A     		subs	r2, r2, #30
 938 0168 0725     		movs	r5, #7
 939 016a 9540     		lsls	r5, r5, r2
 940 016c 24EA0504 		bic	r4, r4, r5
 941 0170 8D68     		ldr	r5, [r1, #8]
 942 0172 05FA02F2 		lsl	r2, r5, r2
 943 0176 2243     		orrs	r2, r2, r4
 944 0178 3261     		str	r2, [r6, #16]
 945 017a 83E7     		b	.L90
 946              	.L91:
 799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {   
 947              		.loc 1 799 0
 948 017c 1A2A     		cmp	r2, #26
 949 017e 0ED8     		bhi	.L92
 801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfigInjected->InjectedChannel),
 950              		.loc 1 801 0
 951 0180 1E68     		ldr	r6, [r3]
 952 0182 F468     		ldr	r4, [r6, #12]
 953 0184 02EB4202 		add	r2, r2, r2, lsl #1
 954 0188 3C3A     		subs	r2, r2, #60
 955 018a 0725     		movs	r5, #7
 956 018c 9540     		lsls	r5, r5, r2
 957 018e 24EA0504 		bic	r4, r4, r5
 958 0192 8D68     		ldr	r5, [r1, #8]
 959 0194 05FA02F2 		lsl	r2, r5, r2
ARM GAS  /tmp/ccT2fac3.s 			page 43


 960 0198 2243     		orrs	r2, r2, r4
 961 019a F260     		str	r2, [r6, #12]
 962 019c 72E7     		b	.L90
 963              	.L92:
 964              	.LBB8:
 965              	.LBB9:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 966              		.loc 2 375 0
 967              		.syntax unified
 968              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 969 019e 00BF     		nop
 970              	@ 0 "" 2
 971              		.thumb
 972              		.syntax unified
 973 01a0 70E7     		b	.L90
 974              	.L107:
 975              	.LBE9:
 976              	.LBE8:
 817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
 977              		.loc 1 817 0
 978 01a2 1C68     		ldr	r4, [r3]
 979 01a4 A269     		ldr	r2, [r4, #24]
 980 01a6 22F47F62 		bic	r2, r2, #4080
 981 01aa 22F00F02 		bic	r2, r2, #15
 982 01ae CD68     		ldr	r5, [r1, #12]
 983 01b0 2A43     		orrs	r2, r2, r5
 984 01b2 A261     		str	r2, [r4, #24]
 985              	.L97:
 839:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 840:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 841:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
 842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
 843:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 986              		.loc 1 843 0
 987 01b4 0A68     		ldr	r2, [r1]
 988 01b6 103A     		subs	r2, r2, #16
 989 01b8 012A     		cmp	r2, #1
 990 01ba 19D9     		bls	.L109
 991              	.LVL70:
 992              	.L98:
 844:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   {
 846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 847:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Delay for temperature sensor stabilization time */
 851:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       /* Compute number of CPU cycles to wait for */
 852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       while(wait_loop_index != 0)
 854:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****         wait_loop_index--;
 856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 857:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     }
 858:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   }
 859:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 860:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Process unlocked */
ARM GAS  /tmp/ccT2fac3.s 			page 44


 861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 993              		.loc 1 861 0
 994 01bc 0022     		movs	r2, #0
 995 01be 83F84820 		strb	r2, [r3, #72]
 996              	.LVL71:
 997              	.L78:
 862:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 863:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   /* Return function status */
 864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   return tmp_hal_status;
 865:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c **** }
 998              		.loc 1 865 0
 999 01c2 02B0     		add	sp, sp, #8
 1000              	.LCFI9:
 1001              		.cfi_remember_state
 1002              		.cfi_def_cfa_offset 16
 1003              		@ sp needed
 1004 01c4 F0BC     		pop	{r4, r5, r6, r7}
 1005              	.LCFI10:
 1006              		.cfi_restore 7
 1007              		.cfi_restore 6
 1008              		.cfi_restore 5
 1009              		.cfi_restore 4
 1010              		.cfi_def_cfa_offset 0
 1011 01c6 7047     		bx	lr
 1012              	.LVL72:
 1013              	.L94:
 1014              	.LCFI11:
 1015              		.cfi_restore_state
 823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
 1016              		.loc 1 823 0
 1017 01c8 1C68     		ldr	r4, [r3]
 1018 01ca E269     		ldr	r2, [r4, #28]
 1019 01cc 22F47F62 		bic	r2, r2, #4080
 1020 01d0 22F00F02 		bic	r2, r2, #15
 1021 01d4 CD68     		ldr	r5, [r1, #12]
 1022 01d6 2A43     		orrs	r2, r2, r5
 1023 01d8 E261     		str	r2, [r4, #28]
 826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 3:
 1024              		.loc 1 826 0
 1025 01da EBE7     		b	.L97
 1026              	.L95:
 829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
 1027              		.loc 1 829 0
 1028 01dc 1C68     		ldr	r4, [r3]
 1029 01de 226A     		ldr	r2, [r4, #32]
 1030 01e0 22F47F62 		bic	r2, r2, #4080
 1031 01e4 22F00F02 		bic	r2, r2, #15
 1032 01e8 CD68     		ldr	r5, [r1, #12]
 1033 01ea 2A43     		orrs	r2, r2, r5
 1034 01ec 2262     		str	r2, [r4, #32]
 832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     case 4:
 1035              		.loc 1 832 0
 1036 01ee E1E7     		b	.L97
 1037              	.L109:
 846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     
 1038              		.loc 1 846 0
 1039 01f0 0D4C     		ldr	r4, .L110
ARM GAS  /tmp/ccT2fac3.s 			page 45


 1040 01f2 6268     		ldr	r2, [r4, #4]
 1041 01f4 42F40002 		orr	r2, r2, #8388608
 1042 01f8 6260     		str	r2, [r4, #4]
 848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****     {
 1043              		.loc 1 848 0
 1044 01fa 0A68     		ldr	r2, [r1]
 1045 01fc 102A     		cmp	r2, #16
 1046 01fe DDD1     		bne	.L98
 852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       while(wait_loop_index != 0)
 1047              		.loc 1 852 0
 1048 0200 0A4A     		ldr	r2, .L110+4
 1049 0202 1268     		ldr	r2, [r2]
 1050 0204 0A49     		ldr	r1, .L110+8
 1051              	.LVL73:
 1052 0206 A1FB0212 		umull	r1, r2, r1, r2
 1053 020a 920C     		lsrs	r2, r2, #18
 1054 020c 02EB8202 		add	r2, r2, r2, lsl #2
 1055 0210 5100     		lsls	r1, r2, #1
 1056 0212 0191     		str	r1, [sp, #4]
 1057              	.L99:
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       {
 1058              		.loc 1 853 0
 1059 0214 019A     		ldr	r2, [sp, #4]
 1060 0216 002A     		cmp	r2, #0
 1061 0218 D0D0     		beq	.L98
 855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****       }
 1062              		.loc 1 855 0
 1063 021a 019A     		ldr	r2, [sp, #4]
 1064 021c 013A     		subs	r2, r2, #1
 1065 021e 0192     		str	r2, [sp, #4]
 1066 0220 F8E7     		b	.L99
 1067              	.LVL74:
 1068              	.L101:
 644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc_ex.c ****   
 1069              		.loc 1 644 0
 1070 0222 0220     		movs	r0, #2
 1071 0224 CDE7     		b	.L78
 1072              	.L111:
 1073 0226 00BF     		.align	2
 1074              	.L110:
 1075 0228 00270140 		.word	1073817344
 1076 022c 00000000 		.word	SystemCoreClock
 1077 0230 83DE1B43 		.word	1125899907
 1078              		.cfi_endproc
 1079              	.LFE71:
 1081              		.text
 1082              	.Letext0:
 1083              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 1084              		.file 4 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 1085              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 1086              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 1087              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 1088              		.file 8 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 1089              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 1090              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 1091              		.file 11 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include
 1092              		.file 12 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
ARM GAS  /tmp/ccT2fac3.s 			page 46


 1093              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 1094              		.file 14 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 1095              		.file 15 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc.h"
 1096              		.file 16 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc_ex.h"
 1097              		.file 17 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
ARM GAS  /tmp/ccT2fac3.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_adc_ex.c
     /tmp/ccT2fac3.s:16     .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
     /tmp/ccT2fac3.s:23     .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
     /tmp/ccT2fac3.s:102    .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
     /tmp/ccT2fac3.s:109    .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
     /tmp/ccT2fac3.s:188    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
     /tmp/ccT2fac3.s:195    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
     /tmp/ccT2fac3.s:438    .text.HAL_ADCEx_InjectedPollForConversion:000000000000014c $d
     /tmp/ccT2fac3.s:445    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
     /tmp/ccT2fac3.s:452    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
     /tmp/ccT2fac3.s:535    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
     /tmp/ccT2fac3.s:542    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
     /tmp/ccT2fac3.s:626    .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
     /tmp/ccT2fac3.s:633    .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
     /tmp/ccT2fac3.s:682    .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
     /tmp/ccT2fac3.s:689    .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/ccT2fac3.s:702    .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
     /tmp/ccT2fac3.s:709    .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/ccT2fac3.s:1075   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000228 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_Enable
ADC_ConversionStop_Disable
HAL_GetTick
SystemCoreClock
