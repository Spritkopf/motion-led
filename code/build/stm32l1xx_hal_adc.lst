ARM GAS  /tmp/ccL9q7Dl.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_ADC_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_ADC_MspInit:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c"
   1:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @file    stm32l1xx_hal_adc.c
   4:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  16:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  17:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + State functions
  18:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ ADC state machine management
  19:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  20:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  21:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          "stm32l1xx_hal_adc_ex.c".
  22:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
  23:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   @verbatim
  24:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  25:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  26:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   [..]
  28:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  29:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  30:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  31:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  32:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  33:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
ARM GAS  /tmp/ccL9q7Dl.s 			page 2


  34:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  35:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  36:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  37:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  38:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  39:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  40:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  41:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  42:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  43:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  44:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       for both regular and injected groups.
  45:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  46:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  48:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC offset on injected channels
  49:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  50:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  51:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       slower speed.
  52:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  53:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  54:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  55:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  56:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  57:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                      ##### How to use this driver #####
  58:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  59:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
  60:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  61:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  62:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ============================================================
  63:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
  64:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  65:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Enable the ADC interface
  66:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  67:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****            Caution: On STM32L1, ADC clock frequency max is 16MHz (refer
  68:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     to device datasheet).
  69:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  70:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  71:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     this maximum frequency.
  72:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  73:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  74:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) ADC clock (core clock).
  75:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Only one possible clock source: derived from HSI RC 16MHz oscillator
  77:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    (HSI). 
  78:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC is connected directly to HSI RC 16MHz oscillator.
  79:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Therefore, RCC PLL setting has no impact on ADC.
  80:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    PLL can be disabled (".PLL.PLLState = RCC_PLL_NONE") or 
  81:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    enabled with HSI16 as clock source
  82:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    (".PLL.PLLSource = RCC_PLLSOURCE_HSI") to be used as device 
  83:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    main clock source SYSCLK.
  84:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    The only mandatory setting is ".HSIState = RCC_HSI_ON"
  85:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  86:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) Example:
  87:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    other device clock parameters configuration:
  89:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();
  90:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccL9q7Dl.s 			page 3


  91:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
  92:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = (... | RCC_OSCILLATORTYPE_HSI);
  93:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
  94:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  95:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
  96:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL.PLLSource = ...
  97:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...
  98:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  99:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC clock prescaler is configured at ADC level with
 101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC pins configuration
 104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_GPIO_Init()
 108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               ADCx_IRQHandler().
 115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_DMA_Init().
 119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ==========================================================================
 127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_Init().
 132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         sequencer, ..., of injected group)
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         monitored, thresholds, ...)
 145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
ARM GAS  /tmp/ccL9q7Dl.s 			page 4


 148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         multimode parameters
 149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ====================================
 153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         transfer by DMA.
 157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion by polling:
 159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (this function must be implemented in user program)
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 destination variable address.
 191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              with transfer by DMA:
 196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 destination variable address.
ARM GAS  /tmp/ccL9q7Dl.s 			page 5


 205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ============================================================
 221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Disable the ADC interface
 224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC clock disable
 228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) Example:
 230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    other device clock parameters configuration:
 232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC pins configuration
 238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Deinitialize the DMA
 247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_DMA_Init().
 248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     @endverbatim
 254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************
 255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @attention
 256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
ARM GAS  /tmp/ccL9q7Dl.s 			page 6


 262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *      without specific prior written permission.
 269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************  
 282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #include "stm32l1xx_hal.h"
 286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @addtogroup STM32L1xx_HAL_Driver
 288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC ADC
 292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief ADC HAL module driver
 293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              (2U)
 311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             (2U)
 312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: us                                                                 */
 316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               (3U)
 317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
ARM GAS  /tmp/ccL9q7Dl.s 			page 7


 319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: us                                                                 */
 321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         (10U)
 322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
 325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
 338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 ADC Initialization/de-initialization functions 
 347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim    
 350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) De-initialize the ADC.
 356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
 357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (clock source APB2).
 365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
ARM GAS  /tmp/ccL9q7Dl.s 			page 8


 376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
 387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
 388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check ADC handle */
 390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc == NULL)
 391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* procedure.                                                               */
 429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
ARM GAS  /tmp/ccL9q7Dl.s 			page 9


 433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Initialize ADC error code */
 435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable SYSCFG clock to control the routing Interface (RI) */
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_RCC_SYSCFG_CLK_ENABLE();
 442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Init the low level hardware */
 444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* correctly completed.                                                     */
 449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
 452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC parameters */
 457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of common ADC clock: clock source HSI with selectable    */
 459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* prescaler                                                              */
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(ADC->CCR                 ,
 461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CCR_ADCPRE           ,
 462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                hadc->Init.ClockPrescaler );
 463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - End of conversion selection                                         */
 467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - Channels bank (Banks availability depends on devices categories)    */
 469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                 |
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                              |
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                              |
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* start.                                                                 */
 478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       software start.                                                  */
 481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.ExternalTrigConvEdge );
 485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - delay selection (LowPowerAutoWait mode)                             */
ARM GAS  /tmp/ccL9q7Dl.s 			page 10


 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - resolution                                                          */
 491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - auto power off (LowPowerAutoPowerOff mode)                          */
 492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - scan mode                                                           */
 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if ((ADC_IS_ENABLE(hadc) == RESET))
 496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr1 |= (hadc->Init.Resolution                     |
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Enable discontinuous mode only if continuous mode is disabled */
 504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
 505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       discontinuous is set anyway, but has no effect on ADC HW.      */
 506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (hadc->Init.DiscontinuousConvMode == ENABLE)
 507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (hadc->Init.ContinuousConvMode == DISABLE)
 509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Enable the selected ADC regular discontinuous mode */
 511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Set the number of channels to be converted in discontinuous mode */
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         else
 516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* ADC regular group settings continuous and sequencer discontinuous*/
 518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* cannot be enabled simultaneously.                                */
 519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
 520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Update ADC state machine to error */
 521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
 523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
 524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update ADC configuration register CR1 with previous settings */
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CR1,
 530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_RES     |
 531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_PDI     |
 532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_PDD     |
 533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_DISCNUM |
 534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_DISCEN  |
 535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_SCAN     ,
 536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    tmp_cr1           );
 537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR2    ,
 541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CR2_MASK_ADCINIT() ,
 542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                tmp_cr2                 );
 543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
ARM GAS  /tmp/ccL9q7Dl.s 			page 11


 547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1                         ,
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
 558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
 560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1,
 562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L          ,
 563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  0x00000000           );
 564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check through register CR2 (excluding execution control bits ADON,     */
 569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
 570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
 573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          == tmp_cr2)
 574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to none */
 576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set the ADC state */
 579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
 584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update ADC state machine to error */
 586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
 598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccL9q7Dl.s 			page 12


 604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to its default reset values.
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   To not impact other ADCs, reset of common ADC registers have been
 609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         left commented below.
 610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check ADC handle */
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc == NULL)
 621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC state */
 629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
 633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* correctly completed.                                                     */
 638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SR */
 642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                          
 645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CR1 */
 646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 647:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAWDEN  | ADC_CR1_PDI     | ADC_CR1_PDD    |
 648:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_DISCNUM | ADC_CR1_JDISCEN | ADC_CR1_DISCEN |
 649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
 650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
 651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_AWDCH                                       ));
 652:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CR2 */
 654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CR2_CLEAR(hadc);
 655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR0 */
 657:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR0_CLEAR(hadc);
 658:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR1 */
 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR1_CLEAR(hadc);
ARM GAS  /tmp/ccL9q7Dl.s 			page 13


 661:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR2 */
 663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
 665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
 666:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP10                                      ));
 667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR3 */
 669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
 671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
 672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP0                                    ));
 673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR1 */
 675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR2 */
 677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 678:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR3 */
 679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 680:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR4 */
 681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 682:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 683:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register HTR */
 684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register LTR */
 686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 687:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR1 */
 689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 690:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 691:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR2 */
 692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
 694:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR3 */
 696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 697:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
 698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 699:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR4 */
 700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 701:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
 702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR5 */
 704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
 706:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 707:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JSQR */
 709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  ));
 712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 713:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register DR */
 714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 715:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 716:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 717:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
ARM GAS  /tmp/ccL9q7Dl.s 			page 14


 718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CCR */
 720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 721:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 722:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 724:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 725:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 727:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*                                                                        */
 728:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 729:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 730:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* DeInit the low level hardware */
 732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 733:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 734:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC error code to none */
 735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 736:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
 738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 741:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 742:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
 743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 745:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
 747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 748:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 749:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
 753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 754:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 755:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
  26              		.loc 1 755 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE66:
  36              		.section	.text.HAL_ADC_Init,"ax",%progbits
  37              		.align	1
  38              		.global	HAL_ADC_Init
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_ADC_Init:
  45              	.LFB64:
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccL9q7Dl.s 			page 15


  46              		.loc 1 384 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 8
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  51              		.loc 1 390 0
  52 0000 0028     		cmp	r0, #0
  53 0002 00F0BB80 		beq	.L14
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  54              		.loc 1 384 0
  55 0006 70B5     		push	{r4, r5, r6, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 6, -8
  61              		.cfi_offset 14, -4
  62 0008 82B0     		sub	sp, sp, #8
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 24
  65 000a 0446     		mov	r4, r0
 432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  66              		.loc 1 432 0
  67 000c C36C     		ldr	r3, [r0, #76]
  68 000e 002B     		cmp	r3, #0
  69 0010 6ED0     		beq	.L21
  70              	.LVL2:
  71              	.L4:
 449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  72              		.loc 1 449 0
  73 0012 E36C     		ldr	r3, [r4, #76]
  74 0014 13F0100F 		tst	r3, #16
  75 0018 40F0B280 		bne	.L15
 452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
  76              		.loc 1 452 0
  77 001c E36C     		ldr	r3, [r4, #76]
  78 001e 23F48853 		bic	r3, r3, #4352
  79 0022 23F00203 		bic	r3, r3, #2
  80 0026 43F00203 		orr	r3, r3, #2
  81 002a E364     		str	r3, [r4, #76]
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CCR_ADCPRE           ,
  82              		.loc 1 460 0
  83 002c 554A     		ldr	r2, .L25
  84 002e 5368     		ldr	r3, [r2, #4]
  85 0030 23F44033 		bic	r3, r3, #196608
  86 0034 6168     		ldr	r1, [r4, #4]
  87 0036 0B43     		orrs	r3, r3, r1
  88 0038 5360     		str	r3, [r2, #4]
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                              |
  89              		.loc 1 470 0
  90 003a E368     		ldr	r3, [r4, #12]
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
  91              		.loc 1 471 0
  92 003c 6269     		ldr	r2, [r4, #20]
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                              |
  93              		.loc 1 470 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 16


  94 003e 1343     		orrs	r3, r3, r2
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                              |
  95              		.loc 1 472 0
  96 0040 E16B     		ldr	r1, [r4, #60]
  97              	.LVL3:
  98              	.LBB15:
  99              	.LBB16:
 100              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccL9q7Dl.s 			page 17


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccL9q7Dl.s 			page 18


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccL9q7Dl.s 			page 19


 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccL9q7Dl.s 			page 20


 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccL9q7Dl.s 			page 21


 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccL9q7Dl.s 			page 22


 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
ARM GAS  /tmp/ccL9q7Dl.s 			page 23


 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccL9q7Dl.s 			page 24


 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccL9q7Dl.s 			page 25


 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 101              		.loc 2 531 0
 102 0042 4FF40072 		mov	r2, #512
 103              		.syntax unified
 104              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 105 0046 92FAA2F2 		rbit r2, r2
 106              	@ 0 "" 2
 107              	.LVL4:
 108              		.thumb
 109              		.syntax unified
 110              	.LBE16:
 111              	.LBE15:
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                              |
 112              		.loc 1 472 0
 113 004a B2FA82F2 		clz	r2, r2
 114 004e 01FA02F2 		lsl	r2, r1, r2
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 115              		.loc 1 471 0
 116 0052 1343     		orrs	r3, r3, r2
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 117              		.loc 1 473 0
 118 0054 226A     		ldr	r2, [r4, #32]
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                              |
 119              		.loc 1 472 0
 120 0056 1A43     		orrs	r2, r2, r3
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 121              		.loc 1 474 0
 122 0058 606A     		ldr	r0, [r4, #36]
 123              	.LVL5:
 124              	.LBB17:
 125              	.LBB18:
 126              		.loc 2 531 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 26


 127 005a 0223     		movs	r3, #2
 128              		.syntax unified
 129              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 130 005c 93FAA3F3 		rbit r3, r3
 131              	@ 0 "" 2
 132              	.LVL6:
 133              		.thumb
 134              		.syntax unified
 135              	.LBE18:
 136              	.LBE17:
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 137              		.loc 1 474 0
 138 0060 B3FA83F3 		clz	r3, r3
 139 0064 00FA03F3 		lsl	r3, r0, r3
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 140              		.loc 1 473 0
 141 0068 1343     		orrs	r3, r3, r2
 142              	.LVL7:
 481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 143              		.loc 1 481 0
 144 006a 626B     		ldr	r2, [r4, #52]
 145 006c 102A     		cmp	r2, #16
 146 006e 02D0     		beq	.L5
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 147              		.loc 1 484 0
 148 0070 A16B     		ldr	r1, [r4, #56]
 483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.ExternalTrigConvEdge );
 149              		.loc 1 483 0
 150 0072 0A43     		orrs	r2, r2, r1
 151 0074 1343     		orrs	r3, r3, r2
 152              	.LVL8:
 153              	.L5:
 495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 154              		.loc 1 495 0
 155 0076 2168     		ldr	r1, [r4]
 156 0078 0A68     		ldr	r2, [r1]
 157 007a 12F04002 		ands	r2, r2, #64
 158 007e 13D1     		bne	.L6
 497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 159              		.loc 1 497 0
 160 0080 A569     		ldr	r5, [r4, #24]
 161 0082 2B43     		orrs	r3, r3, r5
 162              	.LVL9:
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 163              		.loc 1 499 0
 164 0084 A568     		ldr	r5, [r4, #8]
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 165              		.loc 1 500 0
 166 0086 E669     		ldr	r6, [r4, #28]
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 167              		.loc 1 499 0
 168 0088 3543     		orrs	r5, r5, r6
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 169              		.loc 1 501 0
 170 008a 2669     		ldr	r6, [r4, #16]
 171 008c B6F5807F 		cmp	r6, #256
 172 0090 41D0     		beq	.L16
ARM GAS  /tmp/ccL9q7Dl.s 			page 27


 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 173              		.loc 1 501 0 is_stmt 0 discriminator 2
 174 0092 012E     		cmp	r6, #1
 175 0094 3CD0     		beq	.L22
 176              	.L7:
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 177              		.loc 1 500 0 is_stmt 1
 178 0096 2A43     		orrs	r2, r2, r5
 179              	.LVL10:
 506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 180              		.loc 1 506 0
 181 0098 E56A     		ldr	r5, [r4, #44]
 182 009a 012D     		cmp	r5, #1
 183 009c 3ED0     		beq	.L23
 184              	.L8:
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_RES     |
 185              		.loc 1 529 0
 186 009e 4D68     		ldr	r5, [r1, #4]
 187 00a0 3948     		ldr	r0, .L25+4
 188 00a2 2840     		ands	r0, r0, r5
 189 00a4 0243     		orrs	r2, r2, r0
 190              	.LVL11:
 191 00a6 4A60     		str	r2, [r1, #4]
 192              	.L6:
 540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CR2_MASK_ADCINIT() ,
 193              		.loc 1 540 0
 194 00a8 2168     		ldr	r1, [r4]
 195 00aa 8868     		ldr	r0, [r1, #8]
 196 00ac 374A     		ldr	r2, .L25+8
 197 00ae 0240     		ands	r2, r2, r0
 198 00b0 1A43     		orrs	r2, r2, r3
 199 00b2 8A60     		str	r2, [r1, #8]
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 200              		.loc 1 553 0
 201 00b4 2269     		ldr	r2, [r4, #16]
 202 00b6 B2F5807F 		cmp	r2, #256
 203 00ba 46D0     		beq	.L10
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 204              		.loc 1 553 0 is_stmt 0 discriminator 1
 205 00bc 012A     		cmp	r2, #1
 206 00be 44D0     		beq	.L10
 561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L          ,
 207              		.loc 1 561 0 is_stmt 1
 208 00c0 2168     		ldr	r1, [r4]
 209 00c2 0A6B     		ldr	r2, [r1, #48]
 210 00c4 22F0F872 		bic	r2, r2, #32505856
 211 00c8 0A63     		str	r2, [r1, #48]
 212              	.L12:
 570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 213              		.loc 1 570 0
 214 00ca 2268     		ldr	r2, [r4]
 215 00cc 9168     		ldr	r1, [r2, #8]
 216 00ce 304A     		ldr	r2, .L25+12
 217 00d0 0A40     		ands	r2, r2, r1
 218 00d2 9342     		cmp	r3, r2
 219 00d4 49D0     		beq	.L24
 586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
ARM GAS  /tmp/ccL9q7Dl.s 			page 28


 220              		.loc 1 586 0
 221 00d6 E36C     		ldr	r3, [r4, #76]
 222              	.LVL12:
 223 00d8 23F01203 		bic	r3, r3, #18
 224 00dc 43F01003 		orr	r3, r3, #16
 225 00e0 E364     		str	r3, [r4, #76]
 591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 226              		.loc 1 591 0
 227 00e2 236D     		ldr	r3, [r4, #80]
 228 00e4 43F00103 		orr	r3, r3, #1
 229 00e8 2365     		str	r3, [r4, #80]
 230              	.LVL13:
 593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 231              		.loc 1 593 0
 232 00ea 0120     		movs	r0, #1
 233              	.LVL14:
 234              	.L3:
 604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 235              		.loc 1 604 0
 236 00ec 02B0     		add	sp, sp, #8
 237              	.LCFI2:
 238              		.cfi_remember_state
 239              		.cfi_def_cfa_offset 16
 240              		@ sp needed
 241 00ee 70BD     		pop	{r4, r5, r6, pc}
 242              	.LVL15:
 243              	.L21:
 244              	.LCFI3:
 245              		.cfi_restore_state
 435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 246              		.loc 1 435 0
 247 00f0 0365     		str	r3, [r0, #80]
 438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 248              		.loc 1 438 0
 249 00f2 80F84830 		strb	r3, [r0, #72]
 250              	.LBB19:
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 251              		.loc 1 441 0
 252 00f6 274B     		ldr	r3, .L25+16
 253 00f8 1A6A     		ldr	r2, [r3, #32]
 254 00fa 42F00102 		orr	r2, r2, #1
 255 00fe 1A62     		str	r2, [r3, #32]
 256 0100 1B6A     		ldr	r3, [r3, #32]
 257 0102 03F00103 		and	r3, r3, #1
 258 0106 0193     		str	r3, [sp, #4]
 259 0108 019B     		ldr	r3, [sp, #4]
 260              	.LBE19:
 444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 261              		.loc 1 444 0
 262 010a FFF7FEFF 		bl	HAL_ADC_MspInit
 263              	.LVL16:
 264 010e 80E7     		b	.L4
 265              	.LVL17:
 266              	.L22:
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 267              		.loc 1 501 0
 268 0110 4FF48072 		mov	r2, #256
ARM GAS  /tmp/ccL9q7Dl.s 			page 29


 269 0114 BFE7     		b	.L7
 270              	.L16:
 271 0116 4FF48072 		mov	r2, #256
 272 011a BCE7     		b	.L7
 273              	.LVL18:
 274              	.L23:
 508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 275              		.loc 1 508 0
 276 011c 60B9     		cbnz	r0, .L9
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 277              		.loc 1 512 0
 278 011e 206B     		ldr	r0, [r4, #48]
 279 0120 0138     		subs	r0, r0, #1
 280              	.LVL19:
 281              	.LBB20:
 282              	.LBB21:
 283              		.loc 2 531 0
 284 0122 4FF46045 		mov	r5, #57344
 285              		.syntax unified
 286              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 287 0126 95FAA5F5 		rbit r5, r5
 288              	@ 0 "" 2
 289              	.LVL20:
 290              		.thumb
 291              		.syntax unified
 292              	.LBE21:
 293              	.LBE20:
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 294              		.loc 1 512 0
 295 012a B5FA85F5 		clz	r5, r5
 296 012e A840     		lsls	r0, r0, r5
 297 0130 40F40060 		orr	r0, r0, #2048
 298 0134 0243     		orrs	r2, r2, r0
 299              	.LVL21:
 300 0136 B2E7     		b	.L8
 301              	.L9:
 521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
 302              		.loc 1 521 0
 303 0138 E06C     		ldr	r0, [r4, #76]
 304 013a 40F02000 		orr	r0, r0, #32
 305 013e E064     		str	r0, [r4, #76]
 524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 306              		.loc 1 524 0
 307 0140 206D     		ldr	r0, [r4, #80]
 308 0142 40F00100 		orr	r0, r0, #1
 309 0146 2065     		str	r0, [r4, #80]
 310 0148 A9E7     		b	.L8
 311              	.LVL22:
 312              	.L10:
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 313              		.loc 1 555 0
 314 014a 2568     		ldr	r5, [r4]
 315 014c 2A6B     		ldr	r2, [r5, #48]
 316 014e 22F0F872 		bic	r2, r2, #32505856
 317 0152 A16A     		ldr	r1, [r4, #40]
 318 0154 0139     		subs	r1, r1, #1
 319              	.LVL23:
ARM GAS  /tmp/ccL9q7Dl.s 			page 30


 320              	.LBB22:
 321              	.LBB23:
 322              		.loc 2 531 0
 323 0156 4FF0F870 		mov	r0, #32505856
 324              		.syntax unified
 325              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 326 015a 90FAA0F0 		rbit r0, r0
 327              	@ 0 "" 2
 328              	.LVL24:
 329              		.thumb
 330              		.syntax unified
 331              	.LBE23:
 332              	.LBE22:
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 333              		.loc 1 555 0
 334 015e B0FA80F0 		clz	r0, r0
 335 0162 8140     		lsls	r1, r1, r0
 336 0164 0A43     		orrs	r2, r2, r1
 337 0166 2A63     		str	r2, [r5, #48]
 338 0168 AFE7     		b	.L12
 339              	.L24:
 576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 340              		.loc 1 576 0
 341 016a 0020     		movs	r0, #0
 342 016c 2065     		str	r0, [r4, #80]
 579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 343              		.loc 1 579 0
 344 016e E36C     		ldr	r3, [r4, #76]
 345              	.LVL25:
 346 0170 23F00303 		bic	r3, r3, #3
 347 0174 43F00103 		orr	r3, r3, #1
 348 0178 E364     		str	r3, [r4, #76]
 349 017a B7E7     		b	.L3
 350              	.LVL26:
 351              	.L14:
 352              	.LCFI4:
 353              		.cfi_def_cfa_offset 0
 354              		.cfi_restore 4
 355              		.cfi_restore 5
 356              		.cfi_restore 6
 357              		.cfi_restore 14
 392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 358              		.loc 1 392 0
 359 017c 0120     		movs	r0, #1
 360              	.LVL27:
 361 017e 7047     		bx	lr
 362              	.LVL28:
 363              	.L15:
 364              	.LCFI5:
 365              		.cfi_def_cfa_offset 24
 366              		.cfi_offset 4, -16
 367              		.cfi_offset 5, -12
 368              		.cfi_offset 6, -8
 369              		.cfi_offset 14, -4
 599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 370              		.loc 1 599 0
 371 0180 0120     		movs	r0, #1
ARM GAS  /tmp/ccL9q7Dl.s 			page 31


 372 0182 B3E7     		b	.L3
 373              	.L26:
 374              		.align	2
 375              	.L25:
 376 0184 00270140 		.word	1073817344
 377 0188 FF16FCFC 		.word	-50587905
 378 018c 8DF1FFC0 		.word	-1056968307
 379 0190 FEFF80BF 		.word	-1082064898
 380 0194 00380240 		.word	1073887232
 381              		.cfi_endproc
 382              	.LFE64:
 384              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 385              		.align	1
 386              		.weak	HAL_ADC_MspDeInit
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu softvfp
 392              	HAL_ADC_MspDeInit:
 393              	.LFB67:
 756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
 758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 759:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */ 
 762:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 765:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 766:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 767:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
 768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 769:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 394              		.loc 1 770 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL29:
 400 0000 7047     		bx	lr
 401              		.cfi_endproc
 402              	.LFE67:
 404              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 405              		.align	1
 406              		.global	HAL_ADC_PollForConversion
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu softvfp
 412              	HAL_ADC_PollForConversion:
 413              	.LFB70:
 771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 772:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
 773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
ARM GAS  /tmp/ccL9q7Dl.s 			page 32


 775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */ 
 777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 778:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 779:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 780:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
 781:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 782:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 783:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
 784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
 785:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
 786:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim   
 787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 788:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       ##### IO operation functions #####
 789:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group.
 792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 794:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Poll for conversion event.
 795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 796:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 797:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 800:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
 802:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 805:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 807:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 808:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 810:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 813:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 814:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
 819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 827:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
 828:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 831:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
ARM GAS  /tmp/ccL9q7Dl.s 			page 33


 832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 833:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 834:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 835:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
 836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 837:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 839:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 840:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 841:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 843:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 844:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 847:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
 848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 851:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
 854:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 857:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 858:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 859:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 860:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 862:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 863:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 865:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
 866:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 867:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 868:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
 869:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 870:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 871:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 872:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 873:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 874:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
 875:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 876:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 877:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 878:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 879:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 880:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 881:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 882:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 883:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 884:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
 885:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 886:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 887:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 888:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccL9q7Dl.s 			page 34


 889:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 890:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 891:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 892:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 893:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
 894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 895:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 896:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 897:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
 898:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 899:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 900:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 901:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 902:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 903:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
 904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 905:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 906:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 907:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 908:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 909:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
 910:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 911:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 912:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 913:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
 914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 915:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 916:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 917:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 918:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 919:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 920:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 921:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 922:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 923:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 924:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 925:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 926:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 927:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 928:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 929:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 930:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
 931:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 932:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 933:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 934:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 935:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 414              		.loc 1 935 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL30:
 936:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 937:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  
 938:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 939:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 940:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
ARM GAS  /tmp/ccL9q7Dl.s 			page 35


 941:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 942:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* each conversion:                                                       */
 943:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 944:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 945:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 946:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ADC configured in DMA mode and and polling for end of each conversion. */
 947:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 419              		.loc 1 947 0
 420 0000 0368     		ldr	r3, [r0]
 421 0002 9A68     		ldr	r2, [r3, #8]
 422 0004 12F4806F 		tst	r2, #1024
 423 0008 03D0     		beq	.L29
 948:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 424              		.loc 1 948 0 discriminator 1
 425 000a 9B68     		ldr	r3, [r3, #8]
 947:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 426              		.loc 1 947 0 discriminator 1
 427 000c 13F4807F 		tst	r3, #256
 428 0010 1CD1     		bne	.L44
 429              	.L29:
 935:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 430              		.loc 1 935 0
 431 0012 70B5     		push	{r4, r5, r6, lr}
 432              	.LCFI6:
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 4, -16
 435              		.cfi_offset 5, -12
 436              		.cfi_offset 6, -8
 437              		.cfi_offset 14, -4
 438 0014 0D46     		mov	r5, r1
 439 0016 0446     		mov	r4, r0
 949:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 950:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC state machine to error */
 951:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 952:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 953:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
 954:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 955:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 956:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 957:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 958:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 959:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Get tick count */
 960:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 440              		.loc 1 960 0
 441 0018 FFF7FEFF 		bl	HAL_GetTick
 442              	.LVL31:
 443 001c 0646     		mov	r6, r0
 444              	.LVL32:
 445              	.L32:
 961:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 962:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
 963:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 446              		.loc 1 963 0
 447 001e 2368     		ldr	r3, [r4]
 448 0020 1A68     		ldr	r2, [r3]
 449 0022 12F0020F 		tst	r2, #2
 450 0026 1AD1     		bne	.L45
ARM GAS  /tmp/ccL9q7Dl.s 			page 36


 964:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 965:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 966:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 451              		.loc 1 966 0
 452 0028 B5F1FF3F 		cmp	r5, #-1
 453 002c F7D0     		beq	.L32
 967:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 968:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 454              		.loc 1 968 0
 455 002e 25B1     		cbz	r5, .L33
 456              		.loc 1 968 0 is_stmt 0 discriminator 1
 457 0030 FFF7FEFF 		bl	HAL_GetTick
 458              	.LVL33:
 459 0034 801B     		subs	r0, r0, r6
 460 0036 8542     		cmp	r5, r0
 461 0038 F1D2     		bcs	.L32
 462              	.L33:
 969:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 970:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 971:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 463              		.loc 1 971 0 is_stmt 1
 464 003a E36C     		ldr	r3, [r4, #76]
 465 003c 43F00403 		orr	r3, r3, #4
 466 0040 E364     		str	r3, [r4, #76]
 972:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 973:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
 974:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 467              		.loc 1 974 0
 468 0042 0023     		movs	r3, #0
 469 0044 84F84830 		strb	r3, [r4, #72]
 975:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 976:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_TIMEOUT;
 470              		.loc 1 976 0
 471 0048 0320     		movs	r0, #3
 472 004a 70BD     		pop	{r4, r5, r6, pc}
 473              	.LVL34:
 474              	.L44:
 475              	.LCFI7:
 476              		.cfi_def_cfa_offset 0
 477              		.cfi_restore 4
 478              		.cfi_restore 5
 479              		.cfi_restore 6
 480              		.cfi_restore 14
 951:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 481              		.loc 1 951 0
 482 004c C36C     		ldr	r3, [r0, #76]
 483 004e 43F02003 		orr	r3, r3, #32
 484 0052 C364     		str	r3, [r0, #76]
 954:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 485              		.loc 1 954 0
 486 0054 0023     		movs	r3, #0
 487 0056 80F84830 		strb	r3, [r0, #72]
 956:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 488              		.loc 1 956 0
 489 005a 0120     		movs	r0, #1
 490              	.LVL35:
 491 005c 7047     		bx	lr
ARM GAS  /tmp/ccL9q7Dl.s 			page 37


 492              	.LVL36:
 493              	.L45:
 494              	.LCFI8:
 495              		.cfi_def_cfa_offset 16
 496              		.cfi_offset 4, -16
 497              		.cfi_offset 5, -12
 498              		.cfi_offset 6, -8
 499              		.cfi_offset 14, -4
 977:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 978:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 979:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 980:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 981:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature     */
 982:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* "Auto Wait" is disabled, to not interfere with this feature until data */
 983:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* register is read using function HAL_ADC_GetValue().                    */
 984:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 500              		.loc 1 984 0
 501 005e A269     		ldr	r2, [r4, #24]
 502 0060 12B9     		cbnz	r2, .L35
 985:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 987:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 503              		.loc 1 987 0
 504 0062 6FF01202 		mvn	r2, #18
 505 0066 1A60     		str	r2, [r3]
 506              	.L35:
 988:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 989:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 990:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Update ADC state machine */
 991:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 507              		.loc 1 991 0
 508 0068 E36C     		ldr	r3, [r4, #76]
 509 006a 43F40073 		orr	r3, r3, #512
 510 006e E364     		str	r3, [r4, #76]
 992:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 993:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 994:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 995:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Note: On STM32L1, there is no independent flag of end of sequence.       */
 996:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 997:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 998:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       of end of sequence.                                                */
 999:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 511              		.loc 1 999 0
 512 0070 2368     		ldr	r3, [r4]
 513 0072 9A68     		ldr	r2, [r3, #8]
 514 0074 12F0405F 		tst	r2, #805306368
 515 0078 17D1     		bne	.L37
1000:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 516              		.loc 1 1000 0 discriminator 1
 517 007a 626A     		ldr	r2, [r4, #36]
 999:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 518              		.loc 1 999 0 discriminator 1
 519 007c BAB9     		cbnz	r2, .L38
1001:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 520              		.loc 1 1001 0
 521 007e 1A6B     		ldr	r2, [r3, #48]
1000:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
ARM GAS  /tmp/ccL9q7Dl.s 			page 38


 522              		.loc 1 1000 0
 523 0080 12F0F87F 		tst	r2, #32505856
 524 0084 03D0     		beq	.L36
1002:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 525              		.loc 1 1002 0
 526 0086 9B68     		ldr	r3, [r3, #8]
1001:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 527              		.loc 1 1001 0
 528 0088 13F4806F 		tst	r3, #1024
 529 008c 11D1     		bne	.L39
 530              	.L36:
1003:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1004:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1005:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 531              		.loc 1 1005 0
 532 008e E36C     		ldr	r3, [r4, #76]
 533 0090 23F48073 		bic	r3, r3, #256
 534 0094 E364     		str	r3, [r4, #76]
1006:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1007:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 535              		.loc 1 1007 0
 536 0096 E36C     		ldr	r3, [r4, #76]
 537 0098 13F4805F 		tst	r3, #4096
 538 009c 0BD1     		bne	.L40
1008:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     { 
1009:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 539              		.loc 1 1009 0
 540 009e E36C     		ldr	r3, [r4, #76]
 541 00a0 43F00103 		orr	r3, r3, #1
 542 00a4 E364     		str	r3, [r4, #76]
1010:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1011:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1012:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1013:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
1014:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
 543              		.loc 1 1014 0
 544 00a6 0020     		movs	r0, #0
 545 00a8 70BD     		pop	{r4, r5, r6, pc}
 546              	.LVL37:
 547              	.L37:
 548 00aa 0020     		movs	r0, #0
 549 00ac 70BD     		pop	{r4, r5, r6, pc}
 550              	.LVL38:
 551              	.L38:
 552 00ae 0020     		movs	r0, #0
 553 00b0 70BD     		pop	{r4, r5, r6, pc}
 554              	.LVL39:
 555              	.L39:
 556 00b2 0020     		movs	r0, #0
 557 00b4 70BD     		pop	{r4, r5, r6, pc}
 558              	.LVL40:
 559              	.L40:
 560 00b6 0020     		movs	r0, #0
1015:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 561              		.loc 1 1015 0
 562 00b8 70BD     		pop	{r4, r5, r6, pc}
 563              		.cfi_endproc
ARM GAS  /tmp/ccL9q7Dl.s 			page 39


 564              	.LFE70:
 566              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 567              		.align	1
 568              		.global	HAL_ADC_PollForEvent
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 572              		.fpu softvfp
 574              	HAL_ADC_PollForEvent:
 575              	.LFB71:
1016:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1017:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1018:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1019:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1020:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1021:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1022:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1023:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
1024:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1025:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1026:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1027:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1028:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 576              		.loc 1 1028 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL41:
 581 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 582              	.LCFI9:
 583              		.cfi_def_cfa_offset 24
 584              		.cfi_offset 3, -24
 585              		.cfi_offset 4, -20
 586              		.cfi_offset 5, -16
 587              		.cfi_offset 6, -12
 588              		.cfi_offset 7, -8
 589              		.cfi_offset 14, -4
 590 0002 0446     		mov	r4, r0
 591 0004 0D46     		mov	r5, r1
 592 0006 1646     		mov	r6, r2
 593              	.LVL42:
1029:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
1030:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1031:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1032:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1033:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1034:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1035:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Get tick count */
1036:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 594              		.loc 1 1036 0
 595 0008 FFF7FEFF 		bl	HAL_GetTick
 596              	.LVL43:
 597 000c 0746     		mov	r7, r0
 598              	.LVL44:
 599              	.L48:
1037:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1038:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check selected event flag */
ARM GAS  /tmp/ccL9q7Dl.s 			page 40


1039:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 600              		.loc 1 1039 0
 601 000e 2368     		ldr	r3, [r4]
 602 0010 1A68     		ldr	r2, [r3]
 603 0012 35EA0202 		bics	r2, r5, r2
 604 0016 11D0     		beq	.L56
1040:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1041:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1042:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 605              		.loc 1 1042 0
 606 0018 B6F1FF3F 		cmp	r6, #-1
 607 001c F7D0     		beq	.L48
1043:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1044:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 608              		.loc 1 1044 0
 609 001e 26B1     		cbz	r6, .L49
 610              		.loc 1 1044 0 is_stmt 0 discriminator 1
 611 0020 FFF7FEFF 		bl	HAL_GetTick
 612              	.LVL45:
 613 0024 C01B     		subs	r0, r0, r7
 614 0026 8642     		cmp	r6, r0
 615 0028 F1D2     		bcs	.L48
 616              	.L49:
1045:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1046:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1047:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 617              		.loc 1 1047 0 is_stmt 1
 618 002a E36C     		ldr	r3, [r4, #76]
 619 002c 43F00403 		orr	r3, r3, #4
 620 0030 E364     		str	r3, [r4, #76]
1048:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1049:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
1050:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 621              		.loc 1 1050 0
 622 0032 0023     		movs	r3, #0
 623 0034 84F84830 		strb	r3, [r4, #72]
1051:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1052:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_TIMEOUT;
 624              		.loc 1 1052 0
 625 0038 0320     		movs	r0, #3
 626 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 627              	.LVL46:
 628              	.L56:
1053:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1054:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1055:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1056:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1057:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   switch(EventType)
 629              		.loc 1 1057 0
 630 003c 012D     		cmp	r5, #1
 631 003e 0CD0     		beq	.L57
1058:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1059:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1060:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   case ADC_AWD_EVENT:
1061:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1062:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1063:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
ARM GAS  /tmp/ccL9q7Dl.s 			page 41


1064:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1065:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1066:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
1067:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1068:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Overrun event */
1069:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1070:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: On STM32L1, ADC overrun can be set through other parameters      */
1071:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more        */
1072:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       details.                                                         */
1073:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1074:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1075:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 632              		.loc 1 1075 0
 633 0040 E26C     		ldr	r2, [r4, #76]
 634 0042 42F48062 		orr	r2, r2, #1024
 635 0046 E264     		str	r2, [r4, #76]
1076:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC error code to overrun */
1077:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 636              		.loc 1 1077 0
 637 0048 226D     		ldr	r2, [r4, #80]
 638 004a 42F00202 		orr	r2, r2, #2
 639 004e 2265     		str	r2, [r4, #80]
1078:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1079:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear ADC overrun flag */
1080:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 640              		.loc 1 1080 0
 641 0050 6FF02002 		mvn	r2, #32
 642 0054 1A60     		str	r2, [r3]
1081:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
1082:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1083:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1084:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
1085:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
 643              		.loc 1 1085 0
 644 0056 0020     		movs	r0, #0
1086:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 645              		.loc 1 1086 0
 646 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 647              	.LVL47:
 648              	.L57:
1062:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 649              		.loc 1 1062 0
 650 005a E26C     		ldr	r2, [r4, #76]
 651 005c 42F48032 		orr	r2, r2, #65536
 652 0060 E264     		str	r2, [r4, #76]
1065:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
 653              		.loc 1 1065 0
 654 0062 6FF00102 		mvn	r2, #1
 655 0066 1A60     		str	r2, [r3]
1085:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 656              		.loc 1 1085 0
 657 0068 0020     		movs	r0, #0
1066:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 658              		.loc 1 1066 0
 659 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 660              		.cfi_endproc
 661              	.LFE71:
ARM GAS  /tmp/ccL9q7Dl.s 			page 42


 663              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 664              		.align	1
 665              		.global	HAL_ADC_GetValue
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu softvfp
 671              	HAL_ADC_GetValue:
 672              	.LFB76:
1087:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1088:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1089:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1090:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1091:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1092:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - overrun
1093:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1094:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1095:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1096:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1097:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1098:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1099:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
1114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
1122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccL9q7Dl.s 			page 43


1135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
1155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
1158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
1159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
1185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
ARM GAS  /tmp/ccL9q7Dl.s 			page 44


1192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         through DMA.
1209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - DMA transfer complete
1211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - DMA half transfer
1212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - overrun
1213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
1236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
1244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
ARM GAS  /tmp/ccL9q7Dl.s 			page 45


1249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA error callback */
1273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable ADC DMA mode */
1287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Start the DMA channel */
1290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
1296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
1301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
1302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
ARM GAS  /tmp/ccL9q7Dl.s 			page 46


1306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC peripheral.
1313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
1318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
1326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
1331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC state */
1347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update ADC state machine to error */
1354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
ARM GAS  /tmp/ccL9q7Dl.s 			page 47


1363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            to flag EOC.
1377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 673              		.loc 1 1388 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678              	.LVL48:
1389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC converted value */ 
1396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->Instance->DR;
 679              		.loc 1 1396 0
 680 0000 0368     		ldr	r3, [r0]
 681 0002 986D     		ldr	r0, [r3, #88]
 682              	.LVL49:
1397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 683              		.loc 1 1397 0
 684 0004 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE76:
 688              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 689              		.align	1
 690              		.weak	HAL_ADC_ConvCpltCallback
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu softvfp
 696              	HAL_ADC_ConvCpltCallback:
ARM GAS  /tmp/ccL9q7Dl.s 			page 48


 697              	.LFB78:
1398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
1414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
1416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: On STM32L1, there is no independent flag of end of sequence.   */
1427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       The test of scan sequence on going is done either with scan    */
1428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       sequence disabled or with end of conversion flag set to        */
1429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       of end of sequence.                                            */
1430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
1432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
1439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
1446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
1448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Conversion complete callback */
1451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear regular group conversion flag */
ARM GAS  /tmp/ccL9q7Dl.s 			page 49


1454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
1460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
1462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
1475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
1476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
1477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
1478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
1479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
1480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group injected */
1482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         { 
1489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
1491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Conversion complete callback */ 
1494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
1501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC state */
1507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Level out of window callback */ 
1510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
ARM GAS  /tmp/ccL9q7Dl.s 			page 50


1511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
1521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: On STM32L1, ADC overrun can be set through other parameters    */
1523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       refer to description of parameter "EOCSelection" for more      */
1524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       details.                                                       */
1525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to overrun */
1527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear ADC overrun flag */
1530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Error callback */ 
1533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear the Overrun flag */
1536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 698              		.loc 1 1548 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703              	.LVL50:
 704 0000 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE78:
 708              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 709              		.align	1
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu softvfp
 715              	ADC_DMAConvCplt:
 716              	.LFB88:
1549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
ARM GAS  /tmp/ccL9q7Dl.s 			page 51


1551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */
1555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA)
1590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
ARM GAS  /tmp/ccL9q7Dl.s 			page 52


1608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
1617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim   
1618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
1619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================  
1621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Configure channels on regular group
1623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Configure the analog watchdog
1624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
1626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
1627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         group.
1632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         the ADC.
1641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1644:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1645:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1647:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1648:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1650:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1652:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1653:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1655:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1656:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1657:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1658:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1659:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1661:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1662:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
1663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Regular sequence configuration */
1664:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 1 to 6 */
ARM GAS  /tmp/ccL9q7Dl.s 			page 53


1665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (sConfig->Rank < 7)
1666:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR5,
1668:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
1669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
1670:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1671:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1673:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR4,
1675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
1676:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
1677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1678:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 13 to 18 */
1679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 19)
1680:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3,
1682:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
1683:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1685:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 19 to 24 */
1686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 25)
1687:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2,
1689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ19, sConfig->Rank),
1690:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1691:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 25 to 28 */
1693:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
1694:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
1696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ25, sConfig->Rank),
1697:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1698:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1699:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1701:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Channel sampling time configuration */
1702:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 0 to 9 */
1703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (sConfig->Channel < ADC_CHANNEL_10)
1704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR3,
1706:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
1707:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
1708:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 10 to 19 */
1710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Channel < ADC_CHANNEL_20)
1711:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2,
1713:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
1714:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1715:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1716:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
1717:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 20 to 29 for devices Cat4, Cat.5 */
1718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
1719:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1,
1721:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfig->Channel),
ARM GAS  /tmp/ccL9q7Dl.s 			page 54


1722:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1723:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1724:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 30 to 31 for devices Cat4, Cat.5 */
1725:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
1726:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1727:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
1728:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1729:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1730:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1731:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
1733:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
1734:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
1736:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
1738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
1740:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
1741:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1742:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           while(wait_loop_index != 0)
1745:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
1746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             wait_loop_index--;
1747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           }
1748:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
1749:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1750:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1751:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1752:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1754:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1755:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1758:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1759:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1760:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1761:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1762:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         is on going.
1763:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1764:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1765:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1766:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1767:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1768:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1769:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1770:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1771:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1772:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1773:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1775:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1776:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1777:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1778:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
ARM GAS  /tmp/ccL9q7Dl.s 			page 55


1779:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
1780:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
1781:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1782:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
1783:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
1784:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1785:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1786:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1787:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1788:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1789:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1791:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1792:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Analog watchdog configuration */
1793:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1794:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1796:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1797:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1799:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1800:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
1801:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1802:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1804:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1805:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1806:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1807:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1808:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1809:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1810:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
1812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_JAWDEN |
1813:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_AWDEN  |
1814:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_AWDCH   );
1815:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
1817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
1818:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set the high threshold */
1820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1821:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set the low threshold */
1823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1824:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1827:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1828:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
1830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1831:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1832:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1833:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1834:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1835:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
ARM GAS  /tmp/ccL9q7Dl.s 			page 56


1836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1837:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1839:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1840:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
1841:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim
1842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
1843:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1844:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================  
1845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
1846:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1847:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     peripheral.
1848:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Check the ADC state
1849:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Check the ADC error code
1850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1851:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
1852:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
1853:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1854:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1855:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  return the ADC state
1857:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1858:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL state
1859:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1860:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1862:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
1863:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->State;
1864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1865:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1866:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1867:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Return the ADC error code
1868:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1869:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval ADC Error Code
1870:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1871:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1872:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1873:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->ErrorCode;
1874:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1875:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1876:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1877:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1878:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1879:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1880:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1881:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1882:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1883:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1884:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1885:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
1886:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1887:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1888:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1889:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1890:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1891:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1892:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
ARM GAS  /tmp/ccL9q7Dl.s 			page 57


1893:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         performed automatically by hardware.
1894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1895:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1896:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1897:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1898:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1899:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
1900:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1901:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1902:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1903:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
1904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1905:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1906:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1907:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1908:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1909:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1910:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1911:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1912:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable the Peripheral */
1913:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1915:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1916:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1917:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1918:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(wait_loop_index != 0)
1919:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1920:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       wait_loop_index--;
1921:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1922:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1923:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Get tick count */
1924:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tickstart = HAL_GetTick();    
1925:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1926:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1927:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
1928:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1929:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
1930:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1931:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to error */
1932:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1933:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1934:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1935:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1936:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1937:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
1938:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1939:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1940:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_ERROR;
1941:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1942:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1943:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1944:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
1945:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return HAL status */
1946:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
1947:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1948:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1949:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
ARM GAS  /tmp/ccL9q7Dl.s 			page 58


1950:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1951:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1952:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         stopped to disable the ADC.
1953:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc: ADC handle
1954:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
1955:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1956:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1957:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1958:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
1959:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1960:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1961:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1962:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1963:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1964:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
1965:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
1966:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Get tick count */
1967:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tickstart = HAL_GetTick();
1968:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1969:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */    
1970:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
1971:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1972:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
1973:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1974:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to error */
1975:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1976:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1977:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1978:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1979:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1980:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_ERROR;
1981:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1982:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1983:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1984:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1985:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return HAL status */
1986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
1987:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1988:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1989:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1990:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1991:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
1992:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1993:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1994:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
1995:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 717              		.loc 1 1995 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              	.LVL51:
 722              		.loc 1 1995 0
 723 0000 08B5     		push	{r3, lr}
 724              	.LCFI10:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 3, -8
 727              		.cfi_offset 14, -4
ARM GAS  /tmp/ccL9q7Dl.s 			page 59


1996:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1997:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 728              		.loc 1 1997 0
 729 0002 436A     		ldr	r3, [r0, #36]
 730              	.LVL52:
1998:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1999:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2000:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 731              		.loc 1 2000 0
 732 0004 DA6C     		ldr	r2, [r3, #76]
 733 0006 12F0500F 		tst	r2, #80
 734 000a 26D1     		bne	.L61
2001:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2002:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC state machine */
2003:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 735              		.loc 1 2003 0
 736 000c DA6C     		ldr	r2, [r3, #76]
 737 000e 42F40072 		orr	r2, r2, #512
 738 0012 DA64     		str	r2, [r3, #76]
2004:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2005:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
2006:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
2007:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: On STM32L1, there is no independent flag of end of sequence.   */
2008:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
2009:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
2010:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       of end of sequence.                                            */
2011:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 739              		.loc 1 2011 0
 740 0014 1A68     		ldr	r2, [r3]
 741 0016 9168     		ldr	r1, [r2, #8]
 742 0018 11F0405F 		tst	r1, #805306368
 743 001c 19D1     		bne	.L62
2012:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 744              		.loc 1 2012 0 discriminator 1
 745 001e 596A     		ldr	r1, [r3, #36]
2011:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 746              		.loc 1 2011 0 discriminator 1
 747 0020 B9B9     		cbnz	r1, .L62
2013:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 748              		.loc 1 2013 0
 749 0022 116B     		ldr	r1, [r2, #48]
2012:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 750              		.loc 1 2012 0
 751 0024 11F0F87F 		tst	r1, #32505856
 752 0028 03D0     		beq	.L63
2014:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 753              		.loc 1 2014 0
 754 002a 9168     		ldr	r1, [r2, #8]
2013:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 755              		.loc 1 2013 0
 756 002c 11F4806F 		tst	r1, #1024
 757 0030 0FD1     		bne	.L62
 758              	.L63:
2015:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
2016:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
2017:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
2018:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
ARM GAS  /tmp/ccL9q7Dl.s 			page 60


2019:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
2020:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 759              		.loc 1 2020 0
 760 0032 5168     		ldr	r1, [r2, #4]
 761 0034 21F02001 		bic	r1, r1, #32
 762 0038 5160     		str	r1, [r2, #4]
2021:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2022:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC state */
2023:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 763              		.loc 1 2023 0
 764 003a DA6C     		ldr	r2, [r3, #76]
 765 003c 22F48072 		bic	r2, r2, #256
 766 0040 DA64     		str	r2, [r3, #76]
2024:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2025:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 767              		.loc 1 2025 0
 768 0042 DA6C     		ldr	r2, [r3, #76]
 769 0044 12F4805F 		tst	r2, #4096
 770 0048 03D1     		bne	.L62
2026:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
2027:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 771              		.loc 1 2027 0
 772 004a DA6C     		ldr	r2, [r3, #76]
 773 004c 42F00102 		orr	r2, r2, #1
 774 0050 DA64     		str	r2, [r3, #76]
 775              	.L62:
2028:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
2029:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2030:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2031:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Conversion complete callback */
2032:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 776              		.loc 1 2032 0
 777 0052 1846     		mov	r0, r3
 778              	.LVL53:
 779 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 780              	.LVL54:
 781 0058 08BD     		pop	{r3, pc}
 782              	.LVL55:
 783              	.L61:
2033:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2034:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
2035:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2036:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Call DMA error callback */
2037:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 784              		.loc 1 2037 0
 785 005a 5B6C     		ldr	r3, [r3, #68]
 786              	.LVL56:
 787 005c 1B6B     		ldr	r3, [r3, #48]
 788 005e 9847     		blx	r3
 789              	.LVL57:
 790 0060 08BD     		pop	{r3, pc}
 791              		.cfi_endproc
 792              	.LFE88:
 794              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 795              		.align	1
 796              		.weak	HAL_ADC_ConvHalfCpltCallback
 797              		.syntax unified
ARM GAS  /tmp/ccL9q7Dl.s 			page 61


 798              		.thumb
 799              		.thumb_func
 800              		.fpu softvfp
 802              	HAL_ADC_ConvHalfCpltCallback:
 803              	.LFB79:
1563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 804              		.loc 1 1563 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809              	.LVL58:
 810 0000 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE79:
 814              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 815              		.align	1
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu softvfp
 821              	ADC_DMAHalfConvCplt:
 822              	.LFB89:
2038:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2039:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2040:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2041:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2042:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2043:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2044:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
2045:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2046:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2047:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 823              		.loc 1 2047 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              	.LVL59:
 828              		.loc 1 2047 0
 829 0000 08B5     		push	{r3, lr}
 830              	.LCFI11:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 3, -8
 833              		.cfi_offset 14, -4
 834              	.LVL60:
2048:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2049:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2050:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2051:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Half conversion callback */
2052:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 835              		.loc 1 2052 0
 836 0002 406A     		ldr	r0, [r0, #36]
 837              	.LVL61:
 838 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 839              	.LVL62:
 840 0008 08BD     		pop	{r3, pc}
 841              		.cfi_endproc
ARM GAS  /tmp/ccL9q7Dl.s 			page 62


 842              	.LFE89:
 844              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 845              		.align	1
 846              		.weak	HAL_ADC_LevelOutOfWindowCallback
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 852              	HAL_ADC_LevelOutOfWindowCallback:
 853              	.LFB80:
1578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 854              		.loc 1 1578 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859              	.LVL63:
 860 0000 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE80:
 864              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 865              		.align	1
 866              		.weak	HAL_ADC_ErrorCallback
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu softvfp
 872              	HAL_ADC_ErrorCallback:
 873              	.LFB81:
1600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 874              		.loc 1 1600 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879              	.LVL64:
 880 0000 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE81:
 884              		.section	.text.ADC_DMAError,"ax",%progbits
 885              		.align	1
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu softvfp
 891              	ADC_DMAError:
 892              	.LFB90:
2053:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2054:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2055:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2056:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA error callback 
2057:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2058:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
2059:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2060:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2061:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 893              		.loc 1 2061 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 63


 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              	.LVL65:
 898              		.loc 1 2061 0
 899 0000 08B5     		push	{r3, lr}
 900              	.LCFI12:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 3, -8
 903              		.cfi_offset 14, -4
2062:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2063:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 904              		.loc 1 2063 0
 905 0002 406A     		ldr	r0, [r0, #36]
 906              	.LVL66:
2064:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2065:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC state */
2066:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 907              		.loc 1 2066 0
 908 0004 C36C     		ldr	r3, [r0, #76]
 909 0006 43F04003 		orr	r3, r3, #64
 910 000a C364     		str	r3, [r0, #76]
2067:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2068:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2069:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 911              		.loc 1 2069 0
 912 000c 036D     		ldr	r3, [r0, #80]
 913 000e 43F00403 		orr	r3, r3, #4
 914 0012 0365     		str	r3, [r0, #80]
2070:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2071:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Error callback */
2072:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 915              		.loc 1 2072 0
 916 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 917              	.LVL67:
 918 0018 08BD     		pop	{r3, pc}
 919              		.cfi_endproc
 920              	.LFE90:
 922              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 923              		.align	1
 924              		.global	HAL_ADC_IRQHandler
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu softvfp
 930              	HAL_ADC_IRQHandler:
 931              	.LFB77:
1405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 932              		.loc 1 1405 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              	.LVL68:
 937 0000 38B5     		push	{r3, r4, r5, lr}
 938              	.LCFI13:
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 3, -16
ARM GAS  /tmp/ccL9q7Dl.s 			page 64


 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 14, -4
 944 0002 0446     		mov	r4, r0
1413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 945              		.loc 1 1413 0
 946 0004 0368     		ldr	r3, [r0]
 947 0006 5A68     		ldr	r2, [r3, #4]
 948 0008 12F0200F 		tst	r2, #32
 949 000c 30D0     		beq	.L74
1415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 950              		.loc 1 1415 0
 951 000e 1A68     		ldr	r2, [r3]
 952 0010 12F0020F 		tst	r2, #2
 953 0014 2CD0     		beq	.L74
1418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 954              		.loc 1 1418 0
 955 0016 C26C     		ldr	r2, [r0, #76]
 956 0018 12F0100F 		tst	r2, #16
 957 001c 03D1     		bne	.L75
1421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 958              		.loc 1 1421 0
 959 001e C26C     		ldr	r2, [r0, #76]
 960 0020 42F40072 		orr	r2, r2, #512
 961 0024 C264     		str	r2, [r0, #76]
 962              	.L75:
1430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
 963              		.loc 1 1430 0
 964 0026 9A68     		ldr	r2, [r3, #8]
 965 0028 12F0405F 		tst	r2, #805306368
 966 002c 19D1     		bne	.L76
1431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 967              		.loc 1 1431 0 discriminator 1
 968 002e 626A     		ldr	r2, [r4, #36]
1430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
 969              		.loc 1 1430 0 discriminator 1
 970 0030 BAB9     		cbnz	r2, .L76
1432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 971              		.loc 1 1432 0
 972 0032 1A6B     		ldr	r2, [r3, #48]
1431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 973              		.loc 1 1431 0
 974 0034 12F0F87F 		tst	r2, #32505856
 975 0038 03D0     		beq	.L77
1433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 976              		.loc 1 1433 0
 977 003a 9A68     		ldr	r2, [r3, #8]
1432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 978              		.loc 1 1432 0
 979 003c 12F4806F 		tst	r2, #1024
 980 0040 0FD1     		bne	.L76
 981              	.L77:
1439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 982              		.loc 1 1439 0
 983 0042 5A68     		ldr	r2, [r3, #4]
 984 0044 22F02002 		bic	r2, r2, #32
 985 0048 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccL9q7Dl.s 			page 65


1442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 986              		.loc 1 1442 0
 987 004a E36C     		ldr	r3, [r4, #76]
 988 004c 23F48073 		bic	r3, r3, #256
 989 0050 E364     		str	r3, [r4, #76]
1444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 990              		.loc 1 1444 0
 991 0052 E36C     		ldr	r3, [r4, #76]
 992 0054 13F4805F 		tst	r3, #4096
 993 0058 03D1     		bne	.L76
1446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 994              		.loc 1 1446 0
 995 005a E36C     		ldr	r3, [r4, #76]
 996 005c 43F00103 		orr	r3, r3, #1
 997 0060 E364     		str	r3, [r4, #76]
 998              	.L76:
1451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 999              		.loc 1 1451 0
 1000 0062 2046     		mov	r0, r4
 1001              	.LVL69:
 1002 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1003              	.LVL70:
1454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1004              		.loc 1 1454 0
 1005 0068 2368     		ldr	r3, [r4]
 1006 006a 6FF01202 		mvn	r2, #18
 1007 006e 1A60     		str	r2, [r3]
 1008              	.L74:
1459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1009              		.loc 1 1459 0
 1010 0070 2368     		ldr	r3, [r4]
 1011 0072 5A68     		ldr	r2, [r3, #4]
 1012 0074 12F0800F 		tst	r2, #128
 1013 0078 38D0     		beq	.L78
1461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1014              		.loc 1 1461 0
 1015 007a 1A68     		ldr	r2, [r3]
 1016 007c 12F0040F 		tst	r2, #4
 1017 0080 34D0     		beq	.L78
1464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1018              		.loc 1 1464 0
 1019 0082 E26C     		ldr	r2, [r4, #76]
 1020 0084 12F0100F 		tst	r2, #16
 1021 0088 03D1     		bne	.L79
1467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 1022              		.loc 1 1467 0
 1023 008a E26C     		ldr	r2, [r4, #76]
 1024 008c 42F40052 		orr	r2, r2, #8192
 1025 0090 E264     		str	r2, [r4, #76]
 1026              	.L79:
1474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1027              		.loc 1 1474 0
 1028 0092 9A68     		ldr	r2, [r3, #8]
 1029 0094 12F4401F 		tst	r2, #3145728
 1030 0098 21D1     		bne	.L80
1475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1031              		.loc 1 1475 0 discriminator 1
ARM GAS  /tmp/ccL9q7Dl.s 			page 66


 1032 009a 5A6C     		ldr	r2, [r3, #68]
1474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1033              		.loc 1 1474 0 discriminator 1
 1034 009c 12F4401F 		tst	r2, #3145728
 1035 00a0 03D0     		beq	.L81
1476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1036              		.loc 1 1476 0
 1037 00a2 9A68     		ldr	r2, [r3, #8]
1475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1038              		.loc 1 1475 0
 1039 00a4 12F4806F 		tst	r2, #1024
 1040 00a8 19D1     		bne	.L80
 1041              	.L81:
1477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1042              		.loc 1 1477 0
 1043 00aa 5A68     		ldr	r2, [r3, #4]
1476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1044              		.loc 1 1476 0
 1045 00ac 12F4806F 		tst	r2, #1024
 1046 00b0 15D1     		bne	.L80
1478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1047              		.loc 1 1478 0
 1048 00b2 9A68     		ldr	r2, [r3, #8]
1477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1049              		.loc 1 1477 0
 1050 00b4 12F0405F 		tst	r2, #805306368
 1051 00b8 11D1     		bne	.L80
1479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1052              		.loc 1 1479 0
 1053 00ba 626A     		ldr	r2, [r4, #36]
1478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1054              		.loc 1 1478 0
 1055 00bc 7AB9     		cbnz	r2, .L80
1482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1056              		.loc 1 1482 0
 1057 00be 5A68     		ldr	r2, [r3, #4]
 1058 00c0 22F08002 		bic	r2, r2, #128
 1059 00c4 5A60     		str	r2, [r3, #4]
1485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1060              		.loc 1 1485 0
 1061 00c6 E36C     		ldr	r3, [r4, #76]
 1062 00c8 23F48053 		bic	r3, r3, #4096
 1063 00cc E364     		str	r3, [r4, #76]
1487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         { 
 1064              		.loc 1 1487 0
 1065 00ce E36C     		ldr	r3, [r4, #76]
 1066 00d0 13F4807F 		tst	r3, #256
 1067 00d4 03D1     		bne	.L80
1489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 1068              		.loc 1 1489 0
 1069 00d6 E36C     		ldr	r3, [r4, #76]
 1070 00d8 43F00103 		orr	r3, r3, #1
 1071 00dc E364     		str	r3, [r4, #76]
 1072              	.L80:
1494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1073              		.loc 1 1494 0
 1074 00de 2046     		mov	r0, r4
ARM GAS  /tmp/ccL9q7Dl.s 			page 67


 1075 00e0 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1076              	.LVL71:
1497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1077              		.loc 1 1497 0
 1078 00e4 2368     		ldr	r3, [r4]
 1079 00e6 6FF00C02 		mvn	r2, #12
 1080 00ea 1A60     		str	r2, [r3]
 1081              	.L78:
1502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1082              		.loc 1 1502 0
 1083 00ec 2368     		ldr	r3, [r4]
 1084 00ee 5A68     		ldr	r2, [r3, #4]
 1085 00f0 12F0400F 		tst	r2, #64
 1086 00f4 03D0     		beq	.L82
1504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1087              		.loc 1 1504 0
 1088 00f6 1B68     		ldr	r3, [r3]
 1089 00f8 13F0010F 		tst	r3, #1
 1090 00fc 09D1     		bne	.L85
 1091              	.L82:
1518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1092              		.loc 1 1518 0
 1093 00fe 2368     		ldr	r3, [r4]
 1094 0100 5A68     		ldr	r2, [r3, #4]
 1095 0102 12F0806F 		tst	r2, #67108864
 1096 0106 03D0     		beq	.L73
1520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1097              		.loc 1 1520 0
 1098 0108 1A68     		ldr	r2, [r3]
 1099 010a 12F0200F 		tst	r2, #32
 1100 010e 0CD1     		bne	.L86
 1101              	.L73:
 1102 0110 38BD     		pop	{r3, r4, r5, pc}
 1103              	.LVL72:
 1104              	.L85:
1507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1105              		.loc 1 1507 0
 1106 0112 E36C     		ldr	r3, [r4, #76]
 1107 0114 43F48033 		orr	r3, r3, #65536
 1108 0118 E364     		str	r3, [r4, #76]
1510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1109              		.loc 1 1510 0
 1110 011a 2046     		mov	r0, r4
 1111 011c FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1112              	.LVL73:
1513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1113              		.loc 1 1513 0
 1114 0120 2368     		ldr	r3, [r4]
 1115 0122 6FF00102 		mvn	r2, #1
 1116 0126 1A60     		str	r2, [r3]
 1117 0128 E9E7     		b	.L82
 1118              	.L86:
1527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1119              		.loc 1 1527 0
 1120 012a 226D     		ldr	r2, [r4, #80]
 1121 012c 42F00202 		orr	r2, r2, #2
 1122 0130 2265     		str	r2, [r4, #80]
ARM GAS  /tmp/ccL9q7Dl.s 			page 68


1530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1123              		.loc 1 1530 0
 1124 0132 6FF02005 		mvn	r5, #32
 1125 0136 1D60     		str	r5, [r3]
1533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1126              		.loc 1 1533 0
 1127 0138 2046     		mov	r0, r4
 1128 013a FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1129              	.LVL74:
1536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1130              		.loc 1 1536 0
 1131 013e 2368     		ldr	r3, [r4]
 1132 0140 1D60     		str	r5, [r3]
1540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1133              		.loc 1 1540 0
 1134 0142 E5E7     		b	.L73
 1135              		.cfi_endproc
 1136              	.LFE77:
 1138              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1139              		.align	1
 1140              		.global	HAL_ADC_ConfigChannel
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu softvfp
 1146              	HAL_ADC_ConfigChannel:
 1147              	.LFB82:
1649:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1148              		.loc 1 1649 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 1152              		@ link register save eliminated.
 1153              	.LVL75:
 1154 0000 30B4     		push	{r4, r5}
 1155              	.LCFI14:
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 4, -8
 1158              		.cfi_offset 5, -4
 1159 0002 82B0     		sub	sp, sp, #8
 1160              	.LCFI15:
 1161              		.cfi_def_cfa_offset 16
 1162              	.LVL76:
1651:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1163              		.loc 1 1651 0
 1164 0004 0023     		movs	r3, #0
 1165 0006 0193     		str	r3, [sp, #4]
1660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1166              		.loc 1 1660 0
 1167 0008 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1168 000c 012B     		cmp	r3, #1
 1169 000e 00F0B980 		beq	.L101
1660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1170              		.loc 1 1660 0 is_stmt 0 discriminator 2
 1171 0012 0123     		movs	r3, #1
 1172 0014 80F84830 		strb	r3, [r0, #72]
1665:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
ARM GAS  /tmp/ccL9q7Dl.s 			page 69


 1173              		.loc 1 1665 0 is_stmt 1 discriminator 2
 1174 0018 4B68     		ldr	r3, [r1, #4]
 1175 001a 062B     		cmp	r3, #6
 1176 001c 28D8     		bhi	.L89
1667:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
 1177              		.loc 1 1667 0
 1178 001e 0568     		ldr	r5, [r0]
 1179 0020 2A6C     		ldr	r2, [r5, #64]
 1180 0022 03EB8303 		add	r3, r3, r3, lsl #2
 1181 0026 053B     		subs	r3, r3, #5
 1182 0028 1F24     		movs	r4, #31
 1183 002a 9C40     		lsls	r4, r4, r3
 1184 002c 22EA0402 		bic	r2, r2, r4
 1185 0030 0C68     		ldr	r4, [r1]
 1186 0032 04FA03F3 		lsl	r3, r4, r3
 1187 0036 1343     		orrs	r3, r3, r2
 1188 0038 2B64     		str	r3, [r5, #64]
 1189              	.L90:
1703:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1190              		.loc 1 1703 0
 1191 003a 0B68     		ldr	r3, [r1]
 1192 003c 092B     		cmp	r3, #9
 1193 003e 59D8     		bhi	.L94
1705:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
 1194              		.loc 1 1705 0
 1195 0040 0568     		ldr	r5, [r0]
 1196 0042 6A69     		ldr	r2, [r5, #20]
 1197 0044 03EB4303 		add	r3, r3, r3, lsl #1
 1198 0048 0724     		movs	r4, #7
 1199 004a 9C40     		lsls	r4, r4, r3
 1200 004c 22EA0402 		bic	r2, r2, r4
 1201 0050 8C68     		ldr	r4, [r1, #8]
 1202 0052 04FA03F3 		lsl	r3, r4, r3
 1203 0056 1343     		orrs	r3, r3, r2
 1204 0058 6B61     		str	r3, [r5, #20]
 1205              	.L95:
1732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 1206              		.loc 1 1732 0
 1207 005a 0B68     		ldr	r3, [r1]
 1208 005c 103B     		subs	r3, r3, #16
 1209 005e 012B     		cmp	r3, #1
 1210 0060 6CD9     		bls	.L103
 1211              	.L98:
1753:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1212              		.loc 1 1753 0
 1213 0062 0023     		movs	r3, #0
 1214 0064 80F84830 		strb	r3, [r0, #72]
1756:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1215              		.loc 1 1756 0
 1216 0068 1846     		mov	r0, r3
 1217              	.LVL77:
 1218              	.L88:
1757:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1219              		.loc 1 1757 0
 1220 006a 02B0     		add	sp, sp, #8
 1221              	.LCFI16:
 1222              		.cfi_remember_state
ARM GAS  /tmp/ccL9q7Dl.s 			page 70


 1223              		.cfi_def_cfa_offset 8
 1224              		@ sp needed
 1225 006c 30BC     		pop	{r4, r5}
 1226              	.LCFI17:
 1227              		.cfi_restore 5
 1228              		.cfi_restore 4
 1229              		.cfi_def_cfa_offset 0
 1230 006e 7047     		bx	lr
 1231              	.LVL78:
 1232              	.L89:
 1233              	.LCFI18:
 1234              		.cfi_restore_state
1672:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1235              		.loc 1 1672 0
 1236 0070 0C2B     		cmp	r3, #12
 1237 0072 0ED8     		bhi	.L91
1674:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
 1238              		.loc 1 1674 0
 1239 0074 0568     		ldr	r5, [r0]
 1240 0076 EA6B     		ldr	r2, [r5, #60]
 1241 0078 03EB8303 		add	r3, r3, r3, lsl #2
 1242 007c 233B     		subs	r3, r3, #35
 1243 007e 1F24     		movs	r4, #31
 1244 0080 9C40     		lsls	r4, r4, r3
 1245 0082 22EA0402 		bic	r2, r2, r4
 1246 0086 0C68     		ldr	r4, [r1]
 1247 0088 04FA03F3 		lsl	r3, r4, r3
 1248 008c 1343     		orrs	r3, r3, r2
 1249 008e EB63     		str	r3, [r5, #60]
 1250 0090 D3E7     		b	.L90
 1251              	.L91:
1679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1252              		.loc 1 1679 0
 1253 0092 122B     		cmp	r3, #18
 1254 0094 0ED8     		bhi	.L92
1681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
 1255              		.loc 1 1681 0
 1256 0096 0568     		ldr	r5, [r0]
 1257 0098 AA6B     		ldr	r2, [r5, #56]
 1258 009a 03EB8303 		add	r3, r3, r3, lsl #2
 1259 009e 413B     		subs	r3, r3, #65
 1260 00a0 1F24     		movs	r4, #31
 1261 00a2 9C40     		lsls	r4, r4, r3
 1262 00a4 22EA0402 		bic	r2, r2, r4
 1263 00a8 0C68     		ldr	r4, [r1]
 1264 00aa 04FA03F3 		lsl	r3, r4, r3
 1265 00ae 1343     		orrs	r3, r3, r2
 1266 00b0 AB63     		str	r3, [r5, #56]
 1267 00b2 C2E7     		b	.L90
 1268              	.L92:
1686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1269              		.loc 1 1686 0
 1270 00b4 182B     		cmp	r3, #24
 1271 00b6 0ED8     		bhi	.L93
1688:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ19, sConfig->Rank),
 1272              		.loc 1 1688 0
 1273 00b8 0568     		ldr	r5, [r0]
ARM GAS  /tmp/ccL9q7Dl.s 			page 71


 1274 00ba 6A6B     		ldr	r2, [r5, #52]
 1275 00bc 03EB8303 		add	r3, r3, r3, lsl #2
 1276 00c0 5F3B     		subs	r3, r3, #95
 1277 00c2 1F24     		movs	r4, #31
 1278 00c4 9C40     		lsls	r4, r4, r3
 1279 00c6 22EA0402 		bic	r2, r2, r4
 1280 00ca 0C68     		ldr	r4, [r1]
 1281 00cc 04FA03F3 		lsl	r3, r4, r3
 1282 00d0 1343     		orrs	r3, r3, r2
 1283 00d2 6B63     		str	r3, [r5, #52]
 1284 00d4 B1E7     		b	.L90
 1285              	.L93:
1695:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ25, sConfig->Rank),
 1286              		.loc 1 1695 0
 1287 00d6 0568     		ldr	r5, [r0]
 1288 00d8 2A6B     		ldr	r2, [r5, #48]
 1289 00da 03EB8303 		add	r3, r3, r3, lsl #2
 1290 00de 7D3B     		subs	r3, r3, #125
 1291 00e0 1F24     		movs	r4, #31
 1292 00e2 9C40     		lsls	r4, r4, r3
 1293 00e4 22EA0402 		bic	r2, r2, r4
 1294 00e8 0C68     		ldr	r4, [r1]
 1295 00ea 04FA03F3 		lsl	r3, r4, r3
 1296 00ee 1343     		orrs	r3, r3, r2
 1297 00f0 2B63     		str	r3, [r5, #48]
 1298 00f2 A2E7     		b	.L90
 1299              	.L94:
1710:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1300              		.loc 1 1710 0
 1301 00f4 132B     		cmp	r3, #19
 1302 00f6 0ED8     		bhi	.L96
1712:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
 1303              		.loc 1 1712 0
 1304 00f8 0568     		ldr	r5, [r0]
 1305 00fa 2A69     		ldr	r2, [r5, #16]
 1306 00fc 03EB4303 		add	r3, r3, r3, lsl #1
 1307 0100 1E3B     		subs	r3, r3, #30
 1308 0102 0724     		movs	r4, #7
 1309 0104 9C40     		lsls	r4, r4, r3
 1310 0106 22EA0402 		bic	r2, r2, r4
 1311 010a 8C68     		ldr	r4, [r1, #8]
 1312 010c 04FA03F3 		lsl	r3, r4, r3
 1313 0110 1343     		orrs	r3, r3, r2
 1314 0112 2B61     		str	r3, [r5, #16]
 1315 0114 A1E7     		b	.L95
 1316              	.L96:
1718:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1317              		.loc 1 1718 0
 1318 0116 1A2B     		cmp	r3, #26
 1319 0118 0ED8     		bhi	.L97
1720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfig->Channel),
 1320              		.loc 1 1720 0
 1321 011a 0568     		ldr	r5, [r0]
 1322 011c EA68     		ldr	r2, [r5, #12]
 1323 011e 03EB4303 		add	r3, r3, r3, lsl #1
 1324 0122 3C3B     		subs	r3, r3, #60
 1325 0124 0724     		movs	r4, #7
ARM GAS  /tmp/ccL9q7Dl.s 			page 72


 1326 0126 9C40     		lsls	r4, r4, r3
 1327 0128 22EA0402 		bic	r2, r2, r4
 1328 012c 8C68     		ldr	r4, [r1, #8]
 1329 012e 04FA03F3 		lsl	r3, r4, r3
 1330 0132 1343     		orrs	r3, r3, r2
 1331 0134 EB60     		str	r3, [r5, #12]
 1332 0136 90E7     		b	.L95
 1333              	.L97:
 1334              	.LBB24:
 1335              	.LBB25:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1336              		.loc 2 375 0
 1337              		.syntax unified
 1338              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1339 0138 00BF     		nop
 1340              	@ 0 "" 2
 1341              		.thumb
 1342              		.syntax unified
 1343 013a 8EE7     		b	.L95
 1344              	.L103:
 1345              	.LBE25:
 1346              	.LBE24:
1735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1347              		.loc 1 1735 0
 1348 013c 124B     		ldr	r3, .L104
 1349 013e 5B68     		ldr	r3, [r3, #4]
 1350 0140 13F4000F 		tst	r3, #8388608
 1351 0144 8DD1     		bne	.L98
1737:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1352              		.loc 1 1737 0
 1353 0146 104A     		ldr	r2, .L104
 1354 0148 5368     		ldr	r3, [r2, #4]
 1355 014a 43F40003 		orr	r3, r3, #8388608
 1356 014e 5360     		str	r3, [r2, #4]
1739:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 1357              		.loc 1 1739 0
 1358 0150 0B68     		ldr	r3, [r1]
 1359 0152 102B     		cmp	r3, #16
 1360 0154 85D1     		bne	.L98
1743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           while(wait_loop_index != 0)
 1361              		.loc 1 1743 0
 1362 0156 0D4B     		ldr	r3, .L104+4
 1363 0158 1B68     		ldr	r3, [r3]
 1364 015a 02F14672 		add	r2, r2, #51904512
 1365 015e 02F52D32 		add	r2, r2, #177152
 1366 0162 02F28332 		addw	r2, r2, #899
 1367 0166 A2FB0323 		umull	r2, r3, r2, r3
 1368 016a 9B0C     		lsrs	r3, r3, #18
 1369 016c 03EB8303 		add	r3, r3, r3, lsl #2
 1370 0170 5A00     		lsls	r2, r3, #1
 1371 0172 0192     		str	r2, [sp, #4]
1744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
 1372              		.loc 1 1744 0
 1373 0174 02E0     		b	.L99
 1374              	.L100:
1746:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           }
 1375              		.loc 1 1746 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 73


 1376 0176 019B     		ldr	r3, [sp, #4]
 1377 0178 013B     		subs	r3, r3, #1
 1378 017a 0193     		str	r3, [sp, #4]
 1379              	.L99:
1744:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
 1380              		.loc 1 1744 0
 1381 017c 019B     		ldr	r3, [sp, #4]
 1382 017e 002B     		cmp	r3, #0
 1383 0180 F9D1     		bne	.L100
 1384 0182 6EE7     		b	.L98
 1385              	.L101:
1660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1386              		.loc 1 1660 0
 1387 0184 0220     		movs	r0, #2
 1388              	.LVL79:
 1389 0186 70E7     		b	.L88
 1390              	.L105:
 1391              		.align	2
 1392              	.L104:
 1393 0188 00270140 		.word	1073817344
 1394 018c 00000000 		.word	SystemCoreClock
 1395              		.cfi_endproc
 1396              	.LFE82:
 1398              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 1399              		.align	1
 1400              		.global	HAL_ADC_AnalogWDGConfig
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu softvfp
 1406              	HAL_ADC_AnalogWDGConfig:
 1407              	.LFB83:
1774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 1408              		.loc 1 1774 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412              		@ link register save eliminated.
 1413              	.LVL80:
1790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1414              		.loc 1 1790 0
 1415 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1416 0004 012B     		cmp	r3, #1
 1417 0006 29D0     		beq	.L110
1774:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 1418              		.loc 1 1774 0 discriminator 2
 1419 0008 30B4     		push	{r4, r5}
 1420              	.LCFI19:
 1421              		.cfi_def_cfa_offset 8
 1422              		.cfi_offset 4, -8
 1423              		.cfi_offset 5, -4
1790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1424              		.loc 1 1790 0 discriminator 2
 1425 000a 0123     		movs	r3, #1
 1426 000c 80F84830 		strb	r3, [r0, #72]
1795:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1427              		.loc 1 1795 0 discriminator 2
ARM GAS  /tmp/ccL9q7Dl.s 			page 74


 1428 0010 8B68     		ldr	r3, [r1, #8]
 1429 0012 012B     		cmp	r3, #1
 1430 0014 1CD0     		beq	.L115
1803:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 1431              		.loc 1 1803 0
 1432 0016 0268     		ldr	r2, [r0]
 1433 0018 5368     		ldr	r3, [r2, #4]
 1434 001a 23F04003 		bic	r3, r3, #64
 1435 001e 5360     		str	r3, [r2, #4]
 1436              	.L109:
1811:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_JAWDEN |
 1437              		.loc 1 1811 0
 1438 0020 0268     		ldr	r2, [r0]
 1439 0022 5468     		ldr	r4, [r2, #4]
 1440 0024 0E4B     		ldr	r3, .L116
 1441 0026 2340     		ands	r3, r3, r4
 1442 0028 5360     		str	r3, [r2, #4]
1816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
 1443              		.loc 1 1816 0
 1444 002a 0468     		ldr	r4, [r0]
 1445 002c 6368     		ldr	r3, [r4, #4]
 1446 002e 0A68     		ldr	r2, [r1]
1817:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1447              		.loc 1 1817 0
 1448 0030 4D68     		ldr	r5, [r1, #4]
1816:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
 1449              		.loc 1 1816 0
 1450 0032 2A43     		orrs	r2, r2, r5
 1451 0034 1343     		orrs	r3, r3, r2
 1452 0036 6360     		str	r3, [r4, #4]
1820:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1453              		.loc 1 1820 0
 1454 0038 0368     		ldr	r3, [r0]
 1455 003a CA68     		ldr	r2, [r1, #12]
 1456 003c 9A62     		str	r2, [r3, #40]
1823:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1457              		.loc 1 1823 0
 1458 003e 0368     		ldr	r3, [r0]
 1459 0040 0A69     		ldr	r2, [r1, #16]
 1460 0042 DA62     		str	r2, [r3, #44]
1826:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1461              		.loc 1 1826 0
 1462 0044 0023     		movs	r3, #0
 1463 0046 80F84830 		strb	r3, [r0, #72]
1829:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1464              		.loc 1 1829 0
 1465 004a 1846     		mov	r0, r3
 1466              	.LVL81:
1830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1467              		.loc 1 1830 0
 1468 004c 30BC     		pop	{r4, r5}
 1469              	.LCFI20:
 1470              		.cfi_remember_state
 1471              		.cfi_restore 5
 1472              		.cfi_restore 4
 1473              		.cfi_def_cfa_offset 0
 1474 004e 7047     		bx	lr
ARM GAS  /tmp/ccL9q7Dl.s 			page 75


 1475              	.LVL82:
 1476              	.L115:
 1477              	.LCFI21:
 1478              		.cfi_restore_state
1798:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 1479              		.loc 1 1798 0
 1480 0050 0268     		ldr	r2, [r0]
 1481 0052 5368     		ldr	r3, [r2, #4]
 1482 0054 43F04003 		orr	r3, r3, #64
 1483 0058 5360     		str	r3, [r2, #4]
 1484 005a E1E7     		b	.L109
 1485              	.L110:
 1486              	.LCFI22:
 1487              		.cfi_def_cfa_offset 0
 1488              		.cfi_restore 4
 1489              		.cfi_restore 5
1790:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1490              		.loc 1 1790 0
 1491 005c 0220     		movs	r0, #2
 1492              	.LVL83:
 1493 005e 7047     		bx	lr
 1494              	.L117:
 1495              		.align	2
 1496              	.L116:
 1497 0060 E0FD3FFF 		.word	-12583456
 1498              		.cfi_endproc
 1499              	.LFE83:
 1501              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 1502              		.align	1
 1503              		.global	HAL_ADC_GetState
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu softvfp
 1509              	HAL_ADC_GetState:
 1510              	.LFB84:
1861:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
 1511              		.loc 1 1861 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 0
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515              		@ link register save eliminated.
 1516              	.LVL84:
1863:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1517              		.loc 1 1863 0
 1518 0000 C06C     		ldr	r0, [r0, #76]
 1519              	.LVL85:
1864:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1520              		.loc 1 1864 0
 1521 0002 7047     		bx	lr
 1522              		.cfi_endproc
 1523              	.LFE84:
 1525              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 1526              		.align	1
 1527              		.global	HAL_ADC_GetError
 1528              		.syntax unified
 1529              		.thumb
ARM GAS  /tmp/ccL9q7Dl.s 			page 76


 1530              		.thumb_func
 1531              		.fpu softvfp
 1533              	HAL_ADC_GetError:
 1534              	.LFB85:
1872:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->ErrorCode;
 1535              		.loc 1 1872 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 0
 1538              		@ frame_needed = 0, uses_anonymous_args = 0
 1539              		@ link register save eliminated.
 1540              	.LVL86:
1873:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1541              		.loc 1 1873 0
 1542 0000 006D     		ldr	r0, [r0, #80]
 1543              	.LVL87:
1874:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1544              		.loc 1 1874 0
 1545 0002 7047     		bx	lr
 1546              		.cfi_endproc
 1547              	.LFE85:
 1549              		.section	.text.ADC_Enable,"ax",%progbits
 1550              		.align	1
 1551              		.global	ADC_Enable
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu softvfp
 1557              	ADC_Enable:
 1558              	.LFB86:
1902:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1559              		.loc 1 1902 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 8
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              	.LVL88:
 1564 0000 30B5     		push	{r4, r5, lr}
 1565              	.LCFI23:
 1566              		.cfi_def_cfa_offset 12
 1567              		.cfi_offset 4, -12
 1568              		.cfi_offset 5, -8
 1569              		.cfi_offset 14, -4
 1570 0002 83B0     		sub	sp, sp, #12
 1571              	.LCFI24:
 1572              		.cfi_def_cfa_offset 24
 1573              	.LVL89:
1904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1574              		.loc 1 1904 0
 1575 0004 0023     		movs	r3, #0
 1576 0006 0193     		str	r3, [sp, #4]
1910:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1577              		.loc 1 1910 0
 1578 0008 0368     		ldr	r3, [r0]
 1579 000a 1A68     		ldr	r2, [r3]
 1580 000c 12F0400F 		tst	r2, #64
 1581 0010 30D1     		bne	.L126
1913:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1582              		.loc 1 1913 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 77


 1583 0012 9A68     		ldr	r2, [r3, #8]
 1584 0014 42F00102 		orr	r2, r2, #1
 1585 0018 9A60     		str	r2, [r3, #8]
1917:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(wait_loop_index != 0)
 1586              		.loc 1 1917 0
 1587 001a 184B     		ldr	r3, .L129
 1588 001c 1B68     		ldr	r3, [r3]
 1589 001e 184A     		ldr	r2, .L129+4
 1590 0020 A2FB0323 		umull	r2, r3, r2, r3
 1591 0024 9B0C     		lsrs	r3, r3, #18
 1592 0026 03EB4303 		add	r3, r3, r3, lsl #1
 1593 002a 0193     		str	r3, [sp, #4]
1918:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1594              		.loc 1 1918 0
 1595 002c 02E0     		b	.L122
 1596              	.L123:
1920:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1597              		.loc 1 1920 0
 1598 002e 019B     		ldr	r3, [sp, #4]
 1599 0030 013B     		subs	r3, r3, #1
 1600 0032 0193     		str	r3, [sp, #4]
 1601              	.L122:
1918:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1602              		.loc 1 1918 0
 1603 0034 019B     		ldr	r3, [sp, #4]
 1604 0036 002B     		cmp	r3, #0
 1605 0038 F9D1     		bne	.L123
 1606 003a 0446     		mov	r4, r0
1924:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1607              		.loc 1 1924 0
 1608 003c FFF7FEFF 		bl	HAL_GetTick
 1609              	.LVL90:
 1610 0040 0546     		mov	r5, r0
 1611              	.LVL91:
 1612              	.L124:
1927:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1613              		.loc 1 1927 0
 1614 0042 2368     		ldr	r3, [r4]
 1615 0044 1B68     		ldr	r3, [r3]
 1616 0046 13F0400F 		tst	r3, #64
 1617 004a 11D1     		bne	.L128
1929:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1618              		.loc 1 1929 0
 1619 004c FFF7FEFF 		bl	HAL_GetTick
 1620              	.LVL92:
 1621 0050 401B     		subs	r0, r0, r5
 1622 0052 0228     		cmp	r0, #2
 1623 0054 F5D9     		bls	.L124
1932:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1624              		.loc 1 1932 0
 1625 0056 E36C     		ldr	r3, [r4, #76]
 1626 0058 43F01003 		orr	r3, r3, #16
 1627 005c E364     		str	r3, [r4, #76]
1935:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1628              		.loc 1 1935 0
 1629 005e 236D     		ldr	r3, [r4, #80]
 1630 0060 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccL9q7Dl.s 			page 78


 1631 0064 2365     		str	r3, [r4, #80]
1938:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1632              		.loc 1 1938 0
 1633 0066 0023     		movs	r3, #0
 1634 0068 84F84830 		strb	r3, [r4, #72]
1940:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 1635              		.loc 1 1940 0
 1636 006c 0120     		movs	r0, #1
 1637 006e 02E0     		b	.L121
 1638              	.L128:
1946:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1639              		.loc 1 1946 0
 1640 0070 0020     		movs	r0, #0
 1641 0072 00E0     		b	.L121
 1642              	.LVL93:
 1643              	.L126:
 1644 0074 0020     		movs	r0, #0
 1645              	.LVL94:
 1646              	.L121:
1947:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1647              		.loc 1 1947 0
 1648 0076 03B0     		add	sp, sp, #12
 1649              	.LCFI25:
 1650              		.cfi_def_cfa_offset 12
 1651              		@ sp needed
 1652 0078 30BD     		pop	{r4, r5, pc}
 1653              	.L130:
 1654 007a 00BF     		.align	2
 1655              	.L129:
 1656 007c 00000000 		.word	SystemCoreClock
 1657 0080 83DE1B43 		.word	1125899907
 1658              		.cfi_endproc
 1659              	.LFE86:
 1661              		.section	.text.HAL_ADC_Start,"ax",%progbits
 1662              		.align	1
 1663              		.global	HAL_ADC_Start
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu softvfp
 1669              	HAL_ADC_Start:
 1670              	.LFB68:
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1671              		.loc 1 812 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              	.LVL95:
 819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1676              		.loc 1 819 0
 1677 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1678 0004 012B     		cmp	r3, #1
 1679 0006 02D1     		bne	.L141
 1680 0008 0223     		movs	r3, #2
 875:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1681              		.loc 1 875 0
 1682 000a 1846     		mov	r0, r3
ARM GAS  /tmp/ccL9q7Dl.s 			page 79


 1683              	.LVL96:
 1684 000c 7047     		bx	lr
 1685              	.LVL97:
 1686              	.L141:
 812:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1687              		.loc 1 812 0 discriminator 2
 1688 000e 10B5     		push	{r4, lr}
 1689              	.LCFI26:
 1690              		.cfi_def_cfa_offset 8
 1691              		.cfi_offset 4, -8
 1692              		.cfi_offset 14, -4
 1693 0010 0446     		mov	r4, r0
 819:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1694              		.loc 1 819 0 discriminator 2
 1695 0012 0123     		movs	r3, #1
 1696 0014 80F84830 		strb	r3, [r0, #72]
 822:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1697              		.loc 1 822 0 discriminator 2
 1698 0018 FFF7FEFF 		bl	ADC_Enable
 1699              	.LVL98:
 825:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1700              		.loc 1 825 0 discriminator 2
 1701 001c 0346     		mov	r3, r0
 1702 001e 48BB     		cbnz	r0, .L132
 830:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1703              		.loc 1 830 0
 1704 0020 E26C     		ldr	r2, [r4, #76]
 1705 0022 22F4E062 		bic	r2, r2, #1792
 1706 0026 22F00102 		bic	r2, r2, #1
 1707 002a 42F48072 		orr	r2, r2, #256
 1708 002e E264     		str	r2, [r4, #76]
 836:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1709              		.loc 1 836 0
 1710 0030 2268     		ldr	r2, [r4]
 1711 0032 5168     		ldr	r1, [r2, #4]
 1712 0034 11F4806F 		tst	r1, #1024
 1713 0038 05D0     		beq	.L133
 838:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1714              		.loc 1 838 0
 1715 003a E16C     		ldr	r1, [r4, #76]
 1716 003c 21F44051 		bic	r1, r1, #12288
 1717 0040 41F48051 		orr	r1, r1, #4096
 1718 0044 E164     		str	r1, [r4, #76]
 1719              	.L133:
 842:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1720              		.loc 1 842 0
 1721 0046 E16C     		ldr	r1, [r4, #76]
 1722 0048 11F4805F 		tst	r1, #4096
 1723 004c 14D0     		beq	.L134
 845:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1724              		.loc 1 845 0
 1725 004e 216D     		ldr	r1, [r4, #80]
 1726 0050 21F00601 		bic	r1, r1, #6
 1727 0054 2165     		str	r1, [r4, #80]
 1728              	.L135:
 856:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1729              		.loc 1 856 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 80


 1730 0056 0021     		movs	r1, #0
 1731 0058 84F84810 		strb	r1, [r4, #72]
 860:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1732              		.loc 1 860 0
 1733 005c 6FF02201 		mvn	r1, #34
 1734 0060 1160     		str	r1, [r2]
 866:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1735              		.loc 1 866 0
 1736 0062 2268     		ldr	r2, [r4]
 1737 0064 9168     		ldr	r1, [r2, #8]
 1738 0066 11F0405F 		tst	r1, #805306368
 1739 006a 03D1     		bne	.L132
 869:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1740              		.loc 1 869 0
 1741 006c 9168     		ldr	r1, [r2, #8]
 1742 006e 41F08041 		orr	r1, r1, #1073741824
 1743 0072 9160     		str	r1, [r2, #8]
 1744              	.L132:
 875:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1745              		.loc 1 875 0
 1746 0074 1846     		mov	r0, r3
 1747              	.LVL99:
 1748 0076 10BD     		pop	{r4, pc}
 1749              	.LVL100:
 1750              	.L134:
 850:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1751              		.loc 1 850 0
 1752 0078 0021     		movs	r1, #0
 1753 007a 2165     		str	r1, [r4, #80]
 1754 007c EBE7     		b	.L135
 1755              		.cfi_endproc
 1756              	.LFE68:
 1758              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1759              		.align	1
 1760              		.global	HAL_ADC_Start_IT
 1761              		.syntax unified
 1762              		.thumb
 1763              		.thumb_func
 1764              		.fpu softvfp
 1766              	HAL_ADC_Start_IT:
 1767              	.LFB72:
1098:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1768              		.loc 1 1098 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772              	.LVL101:
1105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1773              		.loc 1 1105 0
 1774 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1775 0004 012B     		cmp	r3, #1
 1776 0006 02D1     		bne	.L152
 1777 0008 0223     		movs	r3, #2
1164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1778              		.loc 1 1164 0
 1779 000a 1846     		mov	r0, r3
 1780              	.LVL102:
ARM GAS  /tmp/ccL9q7Dl.s 			page 81


 1781 000c 7047     		bx	lr
 1782              	.LVL103:
 1783              	.L152:
1098:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1784              		.loc 1 1098 0 discriminator 2
 1785 000e 10B5     		push	{r4, lr}
 1786              	.LCFI27:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 4, -8
 1789              		.cfi_offset 14, -4
 1790 0010 0446     		mov	r4, r0
1105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1791              		.loc 1 1105 0 discriminator 2
 1792 0012 0123     		movs	r3, #1
 1793 0014 80F84830 		strb	r3, [r0, #72]
1108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1794              		.loc 1 1108 0 discriminator 2
 1795 0018 FFF7FEFF 		bl	ADC_Enable
 1796              	.LVL104:
1111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1797              		.loc 1 1111 0 discriminator 2
 1798 001c 0346     		mov	r3, r0
 1799 001e 0028     		cmp	r0, #0
 1800 0020 30D1     		bne	.L143
1116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1801              		.loc 1 1116 0
 1802 0022 E26C     		ldr	r2, [r4, #76]
 1803 0024 22F4E062 		bic	r2, r2, #1792
 1804 0028 22F00102 		bic	r2, r2, #1
 1805 002c 42F48072 		orr	r2, r2, #256
 1806 0030 E264     		str	r2, [r4, #76]
1122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1807              		.loc 1 1122 0
 1808 0032 2268     		ldr	r2, [r4]
 1809 0034 5168     		ldr	r1, [r2, #4]
 1810 0036 11F4806F 		tst	r1, #1024
 1811 003a 05D0     		beq	.L144
1124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1812              		.loc 1 1124 0
 1813 003c E16C     		ldr	r1, [r4, #76]
 1814 003e 21F44051 		bic	r1, r1, #12288
 1815 0042 41F48051 		orr	r1, r1, #4096
 1816 0046 E164     		str	r1, [r4, #76]
 1817              	.L144:
1128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1818              		.loc 1 1128 0
 1819 0048 E16C     		ldr	r1, [r4, #76]
 1820 004a 11F4805F 		tst	r1, #4096
 1821 004e 1BD0     		beq	.L145
1131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1822              		.loc 1 1131 0
 1823 0050 216D     		ldr	r1, [r4, #80]
 1824 0052 21F00601 		bic	r1, r1, #6
 1825 0056 2165     		str	r1, [r4, #80]
 1826              	.L146:
1142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1827              		.loc 1 1142 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 82


 1828 0058 0021     		movs	r1, #0
 1829 005a 84F84810 		strb	r1, [r4, #72]
1146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1830              		.loc 1 1146 0
 1831 005e 6FF02201 		mvn	r1, #34
 1832 0062 1160     		str	r1, [r2]
1149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1833              		.loc 1 1149 0
 1834 0064 2168     		ldr	r1, [r4]
 1835 0066 4A68     		ldr	r2, [r1, #4]
 1836 0068 42F08062 		orr	r2, r2, #67108864
 1837 006c 42F02002 		orr	r2, r2, #32
 1838 0070 4A60     		str	r2, [r1, #4]
1155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1839              		.loc 1 1155 0
 1840 0072 2268     		ldr	r2, [r4]
 1841 0074 9168     		ldr	r1, [r2, #8]
 1842 0076 11F0405F 		tst	r1, #805306368
 1843 007a 03D1     		bne	.L143
1158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1844              		.loc 1 1158 0
 1845 007c 9168     		ldr	r1, [r2, #8]
 1846 007e 41F08041 		orr	r1, r1, #1073741824
 1847 0082 9160     		str	r1, [r2, #8]
 1848              	.L143:
1164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1849              		.loc 1 1164 0
 1850 0084 1846     		mov	r0, r3
 1851              	.LVL105:
 1852 0086 10BD     		pop	{r4, pc}
 1853              	.LVL106:
 1854              	.L145:
1136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1855              		.loc 1 1136 0
 1856 0088 0021     		movs	r1, #0
 1857 008a 2165     		str	r1, [r4, #80]
 1858 008c E4E7     		b	.L146
 1859              		.cfi_endproc
 1860              	.LFE72:
 1862              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1863              		.align	1
 1864              		.global	HAL_ADC_Start_DMA
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1868              		.fpu softvfp
 1870              	HAL_ADC_Start_DMA:
 1871              	.LFB74:
1220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1872              		.loc 1 1220 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL107:
 1877 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1878              	.LCFI28:
 1879              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccL9q7Dl.s 			page 83


 1880              		.cfi_offset 3, -24
 1881              		.cfi_offset 4, -20
 1882              		.cfi_offset 5, -16
 1883              		.cfi_offset 6, -12
 1884              		.cfi_offset 7, -8
 1885              		.cfi_offset 14, -4
 1886              	.LVL108:
1227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1887              		.loc 1 1227 0
 1888 0002 90F84840 		ldrb	r4, [r0, #72]	@ zero_extendqisi2
 1889 0006 012C     		cmp	r4, #1
 1890 0008 02D1     		bne	.L160
 1891 000a 0225     		movs	r5, #2
 1892              	.LVL109:
 1893              	.L154:
1307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1894              		.loc 1 1307 0
 1895 000c 2846     		mov	r0, r5
 1896 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1897              	.LVL110:
 1898              	.L160:
 1899 0010 1646     		mov	r6, r2
 1900 0012 0F46     		mov	r7, r1
 1901 0014 0446     		mov	r4, r0
1227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1902              		.loc 1 1227 0 discriminator 2
 1903 0016 0123     		movs	r3, #1
 1904 0018 80F84830 		strb	r3, [r0, #72]
1230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1905              		.loc 1 1230 0 discriminator 2
 1906 001c FFF7FEFF 		bl	ADC_Enable
 1907              	.LVL111:
1233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1908              		.loc 1 1233 0 discriminator 2
 1909 0020 0546     		mov	r5, r0
 1910 0022 0028     		cmp	r0, #0
 1911 0024 F2D1     		bne	.L154
1238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1912              		.loc 1 1238 0
 1913 0026 E36C     		ldr	r3, [r4, #76]
 1914 0028 23F4E063 		bic	r3, r3, #1792
 1915 002c 23F00103 		bic	r3, r3, #1
 1916 0030 43F48073 		orr	r3, r3, #256
 1917 0034 E364     		str	r3, [r4, #76]
1244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1918              		.loc 1 1244 0
 1919 0036 2368     		ldr	r3, [r4]
 1920 0038 5B68     		ldr	r3, [r3, #4]
 1921 003a 13F4806F 		tst	r3, #1024
 1922 003e 05D0     		beq	.L155
1246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1923              		.loc 1 1246 0
 1924 0040 E36C     		ldr	r3, [r4, #76]
 1925 0042 23F44053 		bic	r3, r3, #12288
 1926 0046 43F48053 		orr	r3, r3, #4096
 1927 004a E364     		str	r3, [r4, #76]
 1928              	.L155:
ARM GAS  /tmp/ccL9q7Dl.s 			page 84


1250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1929              		.loc 1 1250 0
 1930 004c E36C     		ldr	r3, [r4, #76]
 1931 004e 13F4805F 		tst	r3, #4096
 1932 0052 2ED0     		beq	.L156
1253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1933              		.loc 1 1253 0
 1934 0054 236D     		ldr	r3, [r4, #80]
 1935 0056 23F00603 		bic	r3, r3, #6
 1936 005a 2365     		str	r3, [r4, #80]
 1937              	.L157:
1264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1938              		.loc 1 1264 0
 1939 005c 0023     		movs	r3, #0
 1940 005e 84F84830 		strb	r3, [r4, #72]
1267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1941              		.loc 1 1267 0
 1942 0062 636C     		ldr	r3, [r4, #68]
 1943 0064 144A     		ldr	r2, .L161
 1944 0066 9A62     		str	r2, [r3, #40]
1270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1945              		.loc 1 1270 0
 1946 0068 636C     		ldr	r3, [r4, #68]
 1947 006a 144A     		ldr	r2, .L161+4
 1948 006c DA62     		str	r2, [r3, #44]
1273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1949              		.loc 1 1273 0
 1950 006e 636C     		ldr	r3, [r4, #68]
 1951 0070 134A     		ldr	r2, .L161+8
 1952 0072 1A63     		str	r2, [r3, #48]
1281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1953              		.loc 1 1281 0
 1954 0074 2368     		ldr	r3, [r4]
 1955 0076 6FF02202 		mvn	r2, #34
 1956 007a 1A60     		str	r2, [r3]
1284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1957              		.loc 1 1284 0
 1958 007c 2268     		ldr	r2, [r4]
 1959 007e 5368     		ldr	r3, [r2, #4]
 1960 0080 43F08063 		orr	r3, r3, #67108864
 1961 0084 5360     		str	r3, [r2, #4]
1287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1962              		.loc 1 1287 0
 1963 0086 2268     		ldr	r2, [r4]
 1964 0088 9368     		ldr	r3, [r2, #8]
 1965 008a 43F48073 		orr	r3, r3, #256
 1966 008e 9360     		str	r3, [r2, #8]
1290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1967              		.loc 1 1290 0
 1968 0090 2168     		ldr	r1, [r4]
 1969 0092 3346     		mov	r3, r6
 1970 0094 3A46     		mov	r2, r7
 1971 0096 5831     		adds	r1, r1, #88
 1972 0098 606C     		ldr	r0, [r4, #68]
 1973              	.LVL112:
 1974 009a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1975              	.LVL113:
ARM GAS  /tmp/ccL9q7Dl.s 			page 85


1298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1976              		.loc 1 1298 0
 1977 009e 2368     		ldr	r3, [r4]
 1978 00a0 9A68     		ldr	r2, [r3, #8]
 1979 00a2 12F0405F 		tst	r2, #805306368
 1980 00a6 B1D1     		bne	.L154
1301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1981              		.loc 1 1301 0
 1982 00a8 9A68     		ldr	r2, [r3, #8]
 1983 00aa 42F08042 		orr	r2, r2, #1073741824
 1984 00ae 9A60     		str	r2, [r3, #8]
 1985 00b0 ACE7     		b	.L154
 1986              	.LVL114:
 1987              	.L156:
1258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1988              		.loc 1 1258 0
 1989 00b2 0023     		movs	r3, #0
 1990 00b4 2365     		str	r3, [r4, #80]
 1991 00b6 D1E7     		b	.L157
 1992              	.L162:
 1993              		.align	2
 1994              	.L161:
 1995 00b8 00000000 		.word	ADC_DMAConvCplt
 1996 00bc 00000000 		.word	ADC_DMAHalfConvCplt
 1997 00c0 00000000 		.word	ADC_DMAError
 1998              		.cfi_endproc
 1999              	.LFE74:
 2001              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 2002              		.align	1
 2003              		.global	ADC_ConversionStop_Disable
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2007              		.fpu softvfp
 2009              	ADC_ConversionStop_Disable:
 2010              	.LFB87:
1957:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 2011              		.loc 1 1957 0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 0
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              	.LVL115:
 2016 0000 38B5     		push	{r3, r4, r5, lr}
 2017              	.LCFI29:
 2018              		.cfi_def_cfa_offset 16
 2019              		.cfi_offset 3, -16
 2020              		.cfi_offset 4, -12
 2021              		.cfi_offset 5, -8
 2022              		.cfi_offset 14, -4
 2023              	.LVL116:
1961:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2024              		.loc 1 1961 0
 2025 0002 0368     		ldr	r3, [r0]
 2026 0004 1A68     		ldr	r2, [r3]
 2027 0006 12F0400F 		tst	r2, #64
 2028 000a 01D1     		bne	.L169
1986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
ARM GAS  /tmp/ccL9q7Dl.s 			page 86


 2029              		.loc 1 1986 0
 2030 000c 0020     		movs	r0, #0
 2031              	.LVL117:
1987:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2032              		.loc 1 1987 0
 2033 000e 38BD     		pop	{r3, r4, r5, pc}
 2034              	.LVL118:
 2035              	.L169:
 2036 0010 0446     		mov	r4, r0
1964:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
 2037              		.loc 1 1964 0
 2038 0012 9A68     		ldr	r2, [r3, #8]
 2039 0014 22F00102 		bic	r2, r2, #1
 2040 0018 9A60     		str	r2, [r3, #8]
1967:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2041              		.loc 1 1967 0
 2042 001a FFF7FEFF 		bl	HAL_GetTick
 2043              	.LVL119:
 2044 001e 0546     		mov	r5, r0
 2045              	.LVL120:
 2046              	.L165:
1970:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 2047              		.loc 1 1970 0
 2048 0020 2368     		ldr	r3, [r4]
 2049 0022 1B68     		ldr	r3, [r3]
 2050 0024 13F0400F 		tst	r3, #64
 2051 0028 0ED0     		beq	.L170
1972:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 2052              		.loc 1 1972 0
 2053 002a FFF7FEFF 		bl	HAL_GetTick
 2054              	.LVL121:
 2055 002e 401B     		subs	r0, r0, r5
 2056 0030 0228     		cmp	r0, #2
 2057 0032 F5D9     		bls	.L165
1975:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 2058              		.loc 1 1975 0
 2059 0034 E36C     		ldr	r3, [r4, #76]
 2060 0036 43F01003 		orr	r3, r3, #16
 2061 003a E364     		str	r3, [r4, #76]
1978:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 2062              		.loc 1 1978 0
 2063 003c 236D     		ldr	r3, [r4, #80]
 2064 003e 43F00103 		orr	r3, r3, #1
 2065 0042 2365     		str	r3, [r4, #80]
1980:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 2066              		.loc 1 1980 0
 2067 0044 0120     		movs	r0, #1
 2068 0046 38BD     		pop	{r3, r4, r5, pc}
 2069              	.LVL122:
 2070              	.L170:
1986:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 2071              		.loc 1 1986 0
 2072 0048 0020     		movs	r0, #0
 2073 004a 38BD     		pop	{r3, r4, r5, pc}
 2074              		.cfi_endproc
 2075              	.LFE87:
 2077              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
ARM GAS  /tmp/ccL9q7Dl.s 			page 87


 2078              		.align	1
 2079              		.global	HAL_ADC_DeInit
 2080              		.syntax unified
 2081              		.thumb
 2082              		.thumb_func
 2083              		.fpu softvfp
 2085              	HAL_ADC_DeInit:
 2086              	.LFB65:
 616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2087              		.loc 1 616 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091              	.LVL123:
 2092 0000 38B5     		push	{r3, r4, r5, lr}
 2093              	.LCFI30:
 2094              		.cfi_def_cfa_offset 16
 2095              		.cfi_offset 3, -16
 2096              		.cfi_offset 4, -12
 2097              		.cfi_offset 5, -8
 2098              		.cfi_offset 14, -4
 2099              	.LVL124:
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2100              		.loc 1 620 0
 2101 0002 0028     		cmp	r0, #0
 2102 0004 7FD0     		beq	.L174
 2103 0006 0446     		mov	r4, r0
 629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2104              		.loc 1 629 0
 2105 0008 C36C     		ldr	r3, [r0, #76]
 2106 000a 43F00203 		orr	r3, r3, #2
 2107 000e C364     		str	r3, [r0, #76]
 633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2108              		.loc 1 633 0
 2109 0010 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2110              	.LVL125:
 638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2111              		.loc 1 638 0
 2112 0014 0546     		mov	r5, r0
 2113 0016 20B1     		cbz	r0, .L176
 2114              	.LVL126:
 2115              	.L173:
 743:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2116              		.loc 1 743 0
 2117 0018 0023     		movs	r3, #0
 2118 001a 84F84830 		strb	r3, [r4, #72]
 2119              	.LVL127:
 2120              	.L172:
 747:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2121              		.loc 1 747 0
 2122 001e 2846     		mov	r0, r5
 2123 0020 38BD     		pop	{r3, r4, r5, pc}
 2124              	.LVL128:
 2125              	.L176:
 642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2126              		.loc 1 642 0
 2127 0022 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccL9q7Dl.s 			page 88


 2128 0024 6FF01F02 		mvn	r2, #31
 2129 0028 1A60     		str	r2, [r3]
 646:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAWDEN  | ADC_CR1_PDI     | ADC_CR1_PDD    |
 2130              		.loc 1 646 0
 2131 002a 2268     		ldr	r2, [r4]
 2132 002c 5168     		ldr	r1, [r2, #4]
 2133 002e 374B     		ldr	r3, .L177
 2134 0030 0B40     		ands	r3, r3, r1
 2135 0032 5360     		str	r3, [r2, #4]
 654:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2136              		.loc 1 654 0
 2137 0034 2268     		ldr	r2, [r4]
 2138 0036 9168     		ldr	r1, [r2, #8]
 2139 0038 354B     		ldr	r3, .L177+4
 2140 003a 0B40     		ands	r3, r3, r1
 2141 003c 9360     		str	r3, [r2, #8]
 2142              	.LBB26:
 2143              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2144              		.loc 2 375 0
 2145              		.syntax unified
 2146              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2147 003e 00BF     		nop
 2148              	@ 0 "" 2
 2149              		.thumb
 2150              		.syntax unified
 2151              	.LBE27:
 2152              	.LBE26:
 660:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2153              		.loc 1 660 0
 2154 0040 2268     		ldr	r2, [r4]
 2155 0042 D368     		ldr	r3, [r2, #12]
 2156 0044 5B0D     		lsrs	r3, r3, #21
 2157 0046 5B05     		lsls	r3, r3, #21
 2158 0048 D360     		str	r3, [r2, #12]
 663:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
 2159              		.loc 1 663 0
 2160 004a 2268     		ldr	r2, [r4]
 2161 004c 1369     		ldr	r3, [r2, #16]
 2162 004e 03F04043 		and	r3, r3, #-1073741824
 2163 0052 1361     		str	r3, [r2, #16]
 669:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
 2164              		.loc 1 669 0
 2165 0054 2268     		ldr	r2, [r4]
 2166 0056 5369     		ldr	r3, [r2, #20]
 2167 0058 03F04043 		and	r3, r3, #-1073741824
 2168 005c 5361     		str	r3, [r2, #20]
 675:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR2 */
 2169              		.loc 1 675 0
 2170 005e 2268     		ldr	r2, [r4]
 2171 0060 9369     		ldr	r3, [r2, #24]
 2172 0062 23F47F63 		bic	r3, r3, #4080
 2173 0066 23F00F03 		bic	r3, r3, #15
 2174 006a 9361     		str	r3, [r2, #24]
 677:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR3 */
 2175              		.loc 1 677 0
 2176 006c 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccL9q7Dl.s 			page 89


 2177 006e D369     		ldr	r3, [r2, #28]
 2178 0070 23F47F63 		bic	r3, r3, #4080
 2179 0074 23F00F03 		bic	r3, r3, #15
 2180 0078 D361     		str	r3, [r2, #28]
 679:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR4 */
 2181              		.loc 1 679 0
 2182 007a 2268     		ldr	r2, [r4]
 2183 007c 136A     		ldr	r3, [r2, #32]
 2184 007e 23F47F63 		bic	r3, r3, #4080
 2185 0082 23F00F03 		bic	r3, r3, #15
 2186 0086 1362     		str	r3, [r2, #32]
 681:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2187              		.loc 1 681 0
 2188 0088 2268     		ldr	r2, [r4]
 2189 008a 536A     		ldr	r3, [r2, #36]
 2190 008c 23F47F63 		bic	r3, r3, #4080
 2191 0090 23F00F03 		bic	r3, r3, #15
 2192 0094 5362     		str	r3, [r2, #36]
 684:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register LTR */
 2193              		.loc 1 684 0
 2194 0096 2268     		ldr	r2, [r4]
 2195 0098 936A     		ldr	r3, [r2, #40]
 2196 009a 23F47F63 		bic	r3, r3, #4080
 2197 009e 23F00F03 		bic	r3, r3, #15
 2198 00a2 9362     		str	r3, [r2, #40]
 686:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2199              		.loc 1 686 0
 2200 00a4 2268     		ldr	r2, [r4]
 2201 00a6 D36A     		ldr	r3, [r2, #44]
 2202 00a8 23F47F63 		bic	r3, r3, #4080
 2203 00ac 23F00F03 		bic	r3, r3, #15
 2204 00b0 D362     		str	r3, [r2, #44]
 689:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2205              		.loc 1 689 0
 2206 00b2 2268     		ldr	r2, [r4]
 2207 00b4 116B     		ldr	r1, [r2, #48]
 2208 00b6 174B     		ldr	r3, .L177+8
 2209 00b8 0B40     		ands	r3, r3, r1
 2210 00ba 1363     		str	r3, [r2, #48]
 692:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
 2211              		.loc 1 692 0
 2212 00bc 2268     		ldr	r2, [r4]
 2213 00be 536B     		ldr	r3, [r2, #52]
 2214 00c0 03F04043 		and	r3, r3, #-1073741824
 2215 00c4 5363     		str	r3, [r2, #52]
 696:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
 2216              		.loc 1 696 0
 2217 00c6 2268     		ldr	r2, [r4]
 2218 00c8 936B     		ldr	r3, [r2, #56]
 2219 00ca 03F04043 		and	r3, r3, #-1073741824
 2220 00ce 9363     		str	r3, [r2, #56]
 700:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
 2221              		.loc 1 700 0
 2222 00d0 2268     		ldr	r2, [r4]
 2223 00d2 D36B     		ldr	r3, [r2, #60]
 2224 00d4 03F04043 		and	r3, r3, #-1073741824
 2225 00d8 D363     		str	r3, [r2, #60]
ARM GAS  /tmp/ccL9q7Dl.s 			page 90


 704:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
 2226              		.loc 1 704 0
 2227 00da 2268     		ldr	r2, [r4]
 2228 00dc 136C     		ldr	r3, [r2, #64]
 2229 00de 03F04043 		and	r3, r3, #-1073741824
 2230 00e2 1364     		str	r3, [r2, #64]
 709:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2231              		.loc 1 709 0
 2232 00e4 2268     		ldr	r2, [r4]
 2233 00e6 536C     		ldr	r3, [r2, #68]
 2234 00e8 9B0D     		lsrs	r3, r3, #22
 2235 00ea 9B05     		lsls	r3, r3, #22
 2236 00ec 5364     		str	r3, [r2, #68]
 720:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2237              		.loc 1 720 0
 2238 00ee 0A4A     		ldr	r2, .L177+12
 2239 00f0 5368     		ldr	r3, [r2, #4]
 2240 00f2 23F40003 		bic	r3, r3, #8388608
 2241 00f6 5360     		str	r3, [r2, #4]
 732:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2242              		.loc 1 732 0
 2243 00f8 2046     		mov	r0, r4
 2244              	.LVL129:
 2245 00fa FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2246              	.LVL130:
 735:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2247              		.loc 1 735 0
 2248 00fe 0023     		movs	r3, #0
 2249 0100 2365     		str	r3, [r4, #80]
 738:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2250              		.loc 1 738 0
 2251 0102 E364     		str	r3, [r4, #76]
 2252 0104 88E7     		b	.L173
 2253              	.LVL131:
 2254              	.L174:
 622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 2255              		.loc 1 622 0
 2256 0106 0125     		movs	r5, #1
 2257 0108 89E7     		b	.L172
 2258              	.L178:
 2259 010a 00BF     		.align	2
 2260              	.L177:
 2261 010c 00003CF8 		.word	-130285568
 2262 0110 8CF08080 		.word	-2139033460
 2263 0114 00800FFE 		.word	-32538624
 2264 0118 00270140 		.word	1073817344
 2265              		.cfi_endproc
 2266              	.LFE65:
 2268              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 2269              		.align	1
 2270              		.global	HAL_ADC_Stop
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.fpu softvfp
 2276              	HAL_ADC_Stop:
 2277              	.LFB69:
ARM GAS  /tmp/ccL9q7Dl.s 			page 91


 887:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2278              		.loc 1 887 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 0, uses_anonymous_args = 0
 2282              	.LVL132:
 894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2283              		.loc 1 894 0
 2284 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2285 0004 012B     		cmp	r3, #1
 2286 0006 02D1     		bne	.L187
 2287 0008 0223     		movs	r3, #2
 914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2288              		.loc 1 914 0
 2289 000a 1846     		mov	r0, r3
 2290              	.LVL133:
 2291 000c 7047     		bx	lr
 2292              	.LVL134:
 2293              	.L187:
 887:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2294              		.loc 1 887 0 discriminator 2
 2295 000e 10B5     		push	{r4, lr}
 2296              	.LCFI31:
 2297              		.cfi_def_cfa_offset 8
 2298              		.cfi_offset 4, -8
 2299              		.cfi_offset 14, -4
 2300 0010 0446     		mov	r4, r0
 894:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2301              		.loc 1 894 0 discriminator 2
 2302 0012 0123     		movs	r3, #1
 2303 0014 80F84830 		strb	r3, [r0, #72]
 898:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2304              		.loc 1 898 0 discriminator 2
 2305 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2306              	.LVL135:
 901:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2307              		.loc 1 901 0 discriminator 2
 2308 001c 0346     		mov	r3, r0
 2309 001e 38B9     		cbnz	r0, .L181
 904:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2310              		.loc 1 904 0
 2311 0020 E26C     		ldr	r2, [r4, #76]
 2312 0022 22F48852 		bic	r2, r2, #4352
 2313 0026 22F00102 		bic	r2, r2, #1
 2314 002a 42F00102 		orr	r2, r2, #1
 2315 002e E264     		str	r2, [r4, #76]
 2316              	.L181:
 910:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2317              		.loc 1 910 0
 2318 0030 0022     		movs	r2, #0
 2319 0032 84F84820 		strb	r2, [r4, #72]
 914:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2320              		.loc 1 914 0
 2321 0036 1846     		mov	r0, r3
 2322              	.LVL136:
 2323 0038 10BD     		pop	{r4, pc}
 2324              		.cfi_endproc
ARM GAS  /tmp/ccL9q7Dl.s 			page 92


 2325              	.LFE69:
 2327              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 2328              		.align	1
 2329              		.global	HAL_ADC_Stop_IT
 2330              		.syntax unified
 2331              		.thumb
 2332              		.thumb_func
 2333              		.fpu softvfp
 2335              	HAL_ADC_Stop_IT:
 2336              	.LFB73:
1174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2337              		.loc 1 1174 0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341              	.LVL137:
1181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2342              		.loc 1 1181 0
 2343 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2344 0004 012B     		cmp	r3, #1
 2345 0006 02D1     		bne	.L196
 2346 0008 0223     		movs	r3, #2
1204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2347              		.loc 1 1204 0
 2348 000a 1846     		mov	r0, r3
 2349              	.LVL138:
 2350 000c 7047     		bx	lr
 2351              	.LVL139:
 2352              	.L196:
1174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2353              		.loc 1 1174 0 discriminator 2
 2354 000e 10B5     		push	{r4, lr}
 2355              	.LCFI32:
 2356              		.cfi_def_cfa_offset 8
 2357              		.cfi_offset 4, -8
 2358              		.cfi_offset 14, -4
 2359 0010 0446     		mov	r4, r0
1181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2360              		.loc 1 1181 0 discriminator 2
 2361 0012 0123     		movs	r3, #1
 2362 0014 80F84830 		strb	r3, [r0, #72]
1185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2363              		.loc 1 1185 0 discriminator 2
 2364 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2365              	.LVL140:
1188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2366              		.loc 1 1188 0 discriminator 2
 2367 001c 0346     		mov	r3, r0
 2368 001e 60B9     		cbnz	r0, .L190
1191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2369              		.loc 1 1191 0
 2370 0020 2168     		ldr	r1, [r4]
 2371 0022 4A68     		ldr	r2, [r1, #4]
 2372 0024 22F02002 		bic	r2, r2, #32
 2373 0028 4A60     		str	r2, [r1, #4]
1194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2374              		.loc 1 1194 0
ARM GAS  /tmp/ccL9q7Dl.s 			page 93


 2375 002a E26C     		ldr	r2, [r4, #76]
 2376 002c 22F48852 		bic	r2, r2, #4352
 2377 0030 22F00102 		bic	r2, r2, #1
 2378 0034 42F00102 		orr	r2, r2, #1
 2379 0038 E264     		str	r2, [r4, #76]
 2380              	.L190:
1200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2381              		.loc 1 1200 0
 2382 003a 0022     		movs	r2, #0
 2383 003c 84F84820 		strb	r2, [r4, #72]
1204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2384              		.loc 1 1204 0
 2385 0040 1846     		mov	r0, r3
 2386              	.LVL141:
 2387 0042 10BD     		pop	{r4, pc}
 2388              		.cfi_endproc
 2389              	.LFE73:
 2391              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2392              		.align	1
 2393              		.global	HAL_ADC_Stop_DMA
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2397              		.fpu softvfp
 2399              	HAL_ADC_Stop_DMA:
 2400              	.LFB75:
1320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2401              		.loc 1 1320 0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 0
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 2405              	.LVL142:
1327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2406              		.loc 1 1327 0
 2407 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2408 0004 012B     		cmp	r3, #1
 2409 0006 02D1     		bne	.L207
 2410 0008 0223     		movs	r3, #2
1366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2411              		.loc 1 1366 0
 2412 000a 1846     		mov	r0, r3
 2413              	.LVL143:
 2414 000c 7047     		bx	lr
 2415              	.LVL144:
 2416              	.L207:
1320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2417              		.loc 1 1320 0 discriminator 2
 2418 000e 10B5     		push	{r4, lr}
 2419              	.LCFI33:
 2420              		.cfi_def_cfa_offset 8
 2421              		.cfi_offset 4, -8
 2422              		.cfi_offset 14, -4
 2423 0010 0446     		mov	r4, r0
1327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2424              		.loc 1 1327 0 discriminator 2
 2425 0012 0123     		movs	r3, #1
 2426 0014 80F84830 		strb	r3, [r0, #72]
ARM GAS  /tmp/ccL9q7Dl.s 			page 94


1331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2427              		.loc 1 1331 0 discriminator 2
 2428 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2429              	.LVL145:
1334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2430              		.loc 1 1334 0 discriminator 2
 2431 001c 0346     		mov	r3, r0
 2432 001e 20B1     		cbz	r0, .L208
 2433              	.L199:
 2434              	.LVL146:
1362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2435              		.loc 1 1362 0
 2436 0020 0022     		movs	r2, #0
 2437 0022 84F84820 		strb	r2, [r4, #72]
1366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2438              		.loc 1 1366 0
 2439 0026 1846     		mov	r0, r3
 2440 0028 10BD     		pop	{r4, pc}
 2441              	.LVL147:
 2442              	.L208:
1337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2443              		.loc 1 1337 0
 2444 002a 2268     		ldr	r2, [r4]
 2445 002c 9368     		ldr	r3, [r2, #8]
 2446 002e 23F48073 		bic	r3, r3, #256
 2447 0032 9360     		str	r3, [r2, #8]
1341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2448              		.loc 1 1341 0
 2449 0034 606C     		ldr	r0, [r4, #68]
 2450              	.LVL148:
 2451 0036 FFF7FEFF 		bl	HAL_DMA_Abort
 2452              	.LVL149:
1344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 2453              		.loc 1 1344 0
 2454 003a 0346     		mov	r3, r0
 2455 003c 68B9     		cbnz	r0, .L200
1347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2456              		.loc 1 1347 0
 2457 003e E26C     		ldr	r2, [r4, #76]
 2458 0040 22F48852 		bic	r2, r2, #4352
 2459 0044 22F00102 		bic	r2, r2, #1
 2460 0048 42F00102 		orr	r2, r2, #1
 2461 004c E264     		str	r2, [r4, #76]
 2462              	.L201:
1358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 2463              		.loc 1 1358 0
 2464 004e 2168     		ldr	r1, [r4]
 2465 0050 4A68     		ldr	r2, [r1, #4]
 2466 0052 22F08062 		bic	r2, r2, #67108864
 2467 0056 4A60     		str	r2, [r1, #4]
 2468 0058 E2E7     		b	.L199
 2469              	.L200:
1354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 2470              		.loc 1 1354 0
 2471 005a E26C     		ldr	r2, [r4, #76]
 2472 005c 42F04002 		orr	r2, r2, #64
 2473 0060 E264     		str	r2, [r4, #76]
ARM GAS  /tmp/ccL9q7Dl.s 			page 95


 2474 0062 F4E7     		b	.L201
 2475              		.cfi_endproc
 2476              	.LFE75:
 2478              		.text
 2479              	.Letext0:
 2480              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 2481              		.file 4 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 2482              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 2483              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 2484              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 2485              		.file 8 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 2486              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 2487              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 2488              		.file 11 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include
 2489              		.file 12 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 2490              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 2491              		.file 14 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 2492              		.file 15 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc.h"
 2493              		.file 16 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 2494              		.file 17 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc_ex.h"
ARM GAS  /tmp/ccL9q7Dl.s 			page 96


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_adc.c
     /tmp/ccL9q7Dl.s:16     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccL9q7Dl.s:23     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccL9q7Dl.s:37     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccL9q7Dl.s:44     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccL9q7Dl.s:376    .text.HAL_ADC_Init:0000000000000184 $d
     /tmp/ccL9q7Dl.s:385    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccL9q7Dl.s:392    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccL9q7Dl.s:405    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccL9q7Dl.s:412    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccL9q7Dl.s:567    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccL9q7Dl.s:574    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccL9q7Dl.s:664    .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccL9q7Dl.s:671    .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccL9q7Dl.s:689    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccL9q7Dl.s:696    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccL9q7Dl.s:709    .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccL9q7Dl.s:715    .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccL9q7Dl.s:795    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccL9q7Dl.s:802    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccL9q7Dl.s:815    .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccL9q7Dl.s:821    .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccL9q7Dl.s:845    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccL9q7Dl.s:852    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccL9q7Dl.s:865    .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccL9q7Dl.s:872    .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccL9q7Dl.s:885    .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccL9q7Dl.s:891    .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccL9q7Dl.s:923    .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccL9q7Dl.s:930    .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccL9q7Dl.s:1139   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1146   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccL9q7Dl.s:1393   .text.HAL_ADC_ConfigChannel:0000000000000188 $d
     /tmp/ccL9q7Dl.s:1399   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1406   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccL9q7Dl.s:1497   .text.HAL_ADC_AnalogWDGConfig:0000000000000060 $d
     /tmp/ccL9q7Dl.s:1502   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1509   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccL9q7Dl.s:1526   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1533   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccL9q7Dl.s:1550   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1557   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccL9q7Dl.s:1656   .text.ADC_Enable:000000000000007c $d
     /tmp/ccL9q7Dl.s:1662   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1669   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccL9q7Dl.s:1759   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1766   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccL9q7Dl.s:1863   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccL9q7Dl.s:1870   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccL9q7Dl.s:1995   .text.HAL_ADC_Start_DMA:00000000000000b8 $d
     /tmp/ccL9q7Dl.s:2002   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccL9q7Dl.s:2009   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccL9q7Dl.s:2078   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccL9q7Dl.s:2085   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccL9q7Dl.s:2261   .text.HAL_ADC_DeInit:000000000000010c $d
     /tmp/ccL9q7Dl.s:2269   .text.HAL_ADC_Stop:0000000000000000 $t
ARM GAS  /tmp/ccL9q7Dl.s 			page 97


     /tmp/ccL9q7Dl.s:2276   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccL9q7Dl.s:2328   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccL9q7Dl.s:2335   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccL9q7Dl.s:2392   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccL9q7Dl.s:2399   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_ADCEx_InjectedConvCpltCallback
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
