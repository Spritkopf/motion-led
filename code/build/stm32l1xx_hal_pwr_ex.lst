ARM GAS  /tmp/cctxk6Jf.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_pwr_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWREx_GetVoltageRange
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWREx_GetVoltageRange:
  24              	.LFB64:
  25              		.file 1 "Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c"
   1:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @file    stm32l1xx_hal_pwr_ex.c
   4:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *           + Extended Initialization and de-initialization functions
   9:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *           + Extended Peripheral Control functions
  10:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         
  11:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   ******************************************************************************
  12:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @attention
  13:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *
  14:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  15:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *
  16:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  17:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * are permitted provided that the following conditions are met:
  18:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  19:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer.
  20:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  21:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  22:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *      and/or other materials provided with the distribution.
  23:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  24:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *      may be used to endorse or promote products derived from this software
  25:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *      without specific prior written permission.
  26:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *
  27:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  30:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  31:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  32:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  33:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/cctxk6Jf.s 			page 2


  34:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  35:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *
  38:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   ******************************************************************************
  39:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  40:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  41:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  42:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** #include "stm32l1xx_hal.h"
  43:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  44:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /** @addtogroup STM32L1xx_HAL_Driver
  45:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @{
  46:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  47:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  48:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
  49:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief    PWR HAL module driver
  50:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @{
  51:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  52:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  53:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  54:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  55:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  56:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  57:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
  58:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
  59:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
  60:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
  61:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  62:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
  63:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @{
  64:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  65:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  66:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Peripheral Extended Features Functions
  67:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief    Low Power modes configuration functions
  68:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *
  69:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** @verbatim
  70:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  71:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****  ===============================================================================
  72:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****                  ##### Peripheral extended features functions #####
  73:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****  ===============================================================================
  74:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** @endverbatim
  75:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @{
  76:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  77:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  78:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
  79:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief Return Voltage Scaling Range.   
  80:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1, PWR_REGULATOR_VOLTAGE_SCALE2 or PWR_REGULA
  81:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */  
  82:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange(void)
  83:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
  26              		.loc 1 83 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  84:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   return  (PWR->CR & PWR_CR_VOS);
  31              		.loc 1 84 0
ARM GAS  /tmp/cctxk6Jf.s 			page 3


  32 0000 024B     		ldr	r3, .L2
  33 0002 1868     		ldr	r0, [r3]
  85:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
  34              		.loc 1 85 0
  35 0004 00F4C050 		and	r0, r0, #6144
  36 0008 7047     		bx	lr
  37              	.L3:
  38 000a 00BF     		.align	2
  39              	.L2:
  40 000c 00700040 		.word	1073770496
  41              		.cfi_endproc
  42              	.LFE64:
  44              		.section	.text.HAL_PWREx_EnableFastWakeUp,"ax",%progbits
  45              		.align	1
  46              		.global	HAL_PWREx_EnableFastWakeUp
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	HAL_PWREx_EnableFastWakeUp:
  53              	.LFB65:
  86:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  87:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
  88:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
  89:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Enables the Fast WakeUp from Ultra Low Power mode.
  90:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @note   This bit works in conjunction with ULP bit. 
  91:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  92:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         exiting from low power mode.
  93:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
  94:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
  95:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFastWakeUp(void)
  96:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
  54              		.loc 1 96 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL0:
  60              	.LBB18:
  61              	.LBB19:
  62              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
ARM GAS  /tmp/cctxk6Jf.s 			page 4


  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctxk6Jf.s 			page 5


  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
ARM GAS  /tmp/cctxk6Jf.s 			page 6


 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctxk6Jf.s 			page 7


 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
ARM GAS  /tmp/cctxk6Jf.s 			page 8


 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
ARM GAS  /tmp/cctxk6Jf.s 			page 9


 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
ARM GAS  /tmp/cctxk6Jf.s 			page 10


 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cctxk6Jf.s 			page 11


 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctxk6Jf.s 			page 12


 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctxk6Jf.s 			page 13


 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  63              		.loc 2 531 0
  64 0000 4FF48063 		mov	r3, #1024
  65              		.syntax unified
  66              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  67 0004 93FAA3F3 		rbit r3, r3
  68              	@ 0 "" 2
  69              	.LVL1:
  70              		.thumb
  71              		.syntax unified
  72              	.LBE19:
  73              	.LBE18:
  97:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Enable the fast wake up */
  98:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
  74              		.loc 1 98 0
  75 0008 B3FA83F3 		clz	r3, r3
  76 000c 9B00     		lsls	r3, r3, #2
  77 000e 03F18443 		add	r3, r3, #1107296256
  78 0012 03F56023 		add	r3, r3, #917504
  79 0016 0122     		movs	r2, #1
  80 0018 1A60     		str	r2, [r3]
  81 001a 7047     		bx	lr
  82              		.cfi_endproc
  83              	.LFE65:
  85              		.section	.text.HAL_PWREx_DisableFastWakeUp,"ax",%progbits
  86              		.align	1
  87              		.global	HAL_PWREx_DisableFastWakeUp
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	HAL_PWREx_DisableFastWakeUp:
  94              	.LFB66:
  99:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
 101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
 102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Disables the Fast WakeUp from Ultra Low Power mode.
 103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
 104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
 105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFastWakeUp(void)
 106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
  95              		.loc 1 106 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.LVL2:
 101              	.LBB20:
 102              	.LBB21:
 103              		.loc 2 531 0
 104 0000 4FF48063 		mov	r3, #1024
 105              		.syntax unified
 106              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 107 0004 93FAA3F3 		rbit r3, r3
 108              	@ 0 "" 2
 109              	.LVL3:
ARM GAS  /tmp/cctxk6Jf.s 			page 14


 110              		.thumb
 111              		.syntax unified
 112              	.LBE21:
 113              	.LBE20:
 107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Disable the fast wake up */
 108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_FWU_BB = (uint32_t)DISABLE;
 114              		.loc 1 108 0
 115 0008 B3FA83F3 		clz	r3, r3
 116 000c 9B00     		lsls	r3, r3, #2
 117 000e 03F18443 		add	r3, r3, #1107296256
 118 0012 03F56023 		add	r3, r3, #917504
 119 0016 0022     		movs	r2, #0
 120 0018 1A60     		str	r2, [r3]
 121 001a 7047     		bx	lr
 122              		.cfi_endproc
 123              	.LFE66:
 125              		.section	.text.HAL_PWREx_EnableUltraLowPower,"ax",%progbits
 126              		.align	1
 127              		.global	HAL_PWREx_EnableUltraLowPower
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu softvfp
 133              	HAL_PWREx_EnableUltraLowPower:
 134              	.LFB67:
 109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
 111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
 112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Enables the Ultra Low Power mode
 113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
 114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
 115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUltraLowPower(void)
 116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
 135              		.loc 1 116 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140              	.LVL4:
 141              	.LBB22:
 142              	.LBB23:
 143              		.loc 2 531 0
 144 0000 4FF40073 		mov	r3, #512
 145              		.syntax unified
 146              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 147 0004 93FAA3F3 		rbit r3, r3
 148              	@ 0 "" 2
 149              	.LVL5:
 150              		.thumb
 151              		.syntax unified
 152              	.LBE23:
 153              	.LBE22:
 117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Enable the Ultra Low Power mode */
 118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 154              		.loc 1 118 0
 155 0008 B3FA83F3 		clz	r3, r3
 156 000c 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/cctxk6Jf.s 			page 15


 157 000e 03F18443 		add	r3, r3, #1107296256
 158 0012 03F56023 		add	r3, r3, #917504
 159 0016 0122     		movs	r2, #1
 160 0018 1A60     		str	r2, [r3]
 161 001a 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE67:
 165              		.section	.text.HAL_PWREx_DisableUltraLowPower,"ax",%progbits
 166              		.align	1
 167              		.global	HAL_PWREx_DisableUltraLowPower
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu softvfp
 173              	HAL_PWREx_DisableUltraLowPower:
 174              	.LFB68:
 119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
 121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
 122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Disables the Ultra Low Power mode
 123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
 124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
 125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUltraLowPower(void)
 126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
 175              		.loc 1 126 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180              	.LVL6:
 181              	.LBB24:
 182              	.LBB25:
 183              		.loc 2 531 0
 184 0000 4FF40073 		mov	r3, #512
 185              		.syntax unified
 186              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 187 0004 93FAA3F3 		rbit r3, r3
 188              	@ 0 "" 2
 189              	.LVL7:
 190              		.thumb
 191              		.syntax unified
 192              	.LBE25:
 193              	.LBE24:
 127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Disable the Ultra Low Power mode */
 128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_ULP_BB = (uint32_t)DISABLE;
 194              		.loc 1 128 0
 195 0008 B3FA83F3 		clz	r3, r3
 196 000c 9B00     		lsls	r3, r3, #2
 197 000e 03F18443 		add	r3, r3, #1107296256
 198 0012 03F56023 		add	r3, r3, #917504
 199 0016 0022     		movs	r2, #0
 200 0018 1A60     		str	r2, [r3]
 201 001a 7047     		bx	lr
 202              		.cfi_endproc
 203              	.LFE68:
 205              		.section	.text.HAL_PWREx_EnableLowPowerRunMode,"ax",%progbits
 206              		.align	1
ARM GAS  /tmp/cctxk6Jf.s 			page 16


 207              		.global	HAL_PWREx_EnableLowPowerRunMode
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu softvfp
 213              	HAL_PWREx_EnableLowPowerRunMode:
 214              	.LFB69:
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
 131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
 132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Enters the Low Power Run mode.
 133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @note   Low power run mode can only be entered when VCORE is in range 2.
 134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         In addition, the dynamic voltage scaling must not be used when Low
 135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         power run mode is selected. Only Stop and Sleep modes with regulator
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         configured in Low power mode is allowed when Low power run mode is 
 137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *         selected.
 138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @note   In Low power run mode, all I/O pins keep the same state as in Run mode.
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
 140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
 141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** void HAL_PWREx_EnableLowPowerRunMode(void)
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
 215              		.loc 1 142 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LVL8:
 221              	.LBB26:
 222              	.LBB27:
 223              		.loc 2 531 0
 224 0000 0122     		movs	r2, #1
 225              		.syntax unified
 226              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 227 0002 92FAA2F3 		rbit r3, r2
 228              	@ 0 "" 2
 229              	.LVL9:
 230              		.thumb
 231              		.syntax unified
 232              	.LBE27:
 233              	.LBE26:
 143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Enters the Low Power Run mode */
 144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_LPSDSR_BB = (uint32_t)ENABLE;
 234              		.loc 1 144 0
 235 0006 B3FA83F3 		clz	r3, r3
 236 000a 9B00     		lsls	r3, r3, #2
 237 000c 03F18443 		add	r3, r3, #1107296256
 238 0010 03F56023 		add	r3, r3, #917504
 239 0014 1A60     		str	r2, [r3]
 240              	.LVL10:
 241              	.LBB28:
 242              	.LBB29:
 243              		.loc 2 531 0
 244 0016 4FF48043 		mov	r3, #16384
 245              		.syntax unified
 246              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 247 001a 93FAA3F3 		rbit r3, r3
 248              	@ 0 "" 2
ARM GAS  /tmp/cctxk6Jf.s 			page 17


 249              	.LVL11:
 250              		.thumb
 251              		.syntax unified
 252              	.LBE29:
 253              	.LBE28:
 145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_LPRUN_BB  = (uint32_t)ENABLE;
 254              		.loc 1 145 0
 255 001e B3FA83F3 		clz	r3, r3
 256 0022 9B00     		lsls	r3, r3, #2
 257 0024 03F18443 		add	r3, r3, #1107296256
 258 0028 03F56023 		add	r3, r3, #917504
 259 002c 1A60     		str	r2, [r3]
 260 002e 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE69:
 264              		.section	.text.HAL_PWREx_DisableLowPowerRunMode,"ax",%progbits
 265              		.align	1
 266              		.global	HAL_PWREx_DisableLowPowerRunMode
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu softvfp
 272              	HAL_PWREx_DisableLowPowerRunMode:
 273              	.LFB70:
 146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** 
 148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** /**
 149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @brief  Exits the Low Power Run mode.
 150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   * @retval None
 151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   */
 152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
 153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** {
 274              		.loc 1 153 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL12:
 280              	.LBB30:
 281              	.LBB31:
 282              		.loc 2 531 0
 283 0000 4FF48043 		mov	r3, #16384
 284              		.syntax unified
 285              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 286 0004 93FAA3F3 		rbit r3, r3
 287              	@ 0 "" 2
 288              	.LVL13:
 289              		.thumb
 290              		.syntax unified
 291              	.LBE31:
 292              	.LBE30:
 154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   /* Exits the Low Power Run mode */
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_LPRUN_BB  = (uint32_t)DISABLE;
 293              		.loc 1 155 0
 294 0008 B3FA83F3 		clz	r3, r3
 295 000c 9B00     		lsls	r3, r3, #2
 296 000e 03F18443 		add	r3, r3, #1107296256
ARM GAS  /tmp/cctxk6Jf.s 			page 18


 297 0012 03F56023 		add	r3, r3, #917504
 298 0016 0020     		movs	r0, #0
 299 0018 1860     		str	r0, [r3]
 300              	.LVL14:
 301              	.LBB32:
 302              	.LBB33:
 303              		.loc 2 531 0
 304 001a 0123     		movs	r3, #1
 305              		.syntax unified
 306              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 307 001c 93FAA3F3 		rbit r3, r3
 308              	@ 0 "" 2
 309              	.LVL15:
 310              		.thumb
 311              		.syntax unified
 312              	.LBE33:
 313              	.LBE32:
 156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_LPSDSR_BB = (uint32_t)DISABLE;
 314              		.loc 1 156 0
 315 0020 B3FA83F3 		clz	r3, r3
 316 0024 9B00     		lsls	r3, r3, #2
 317 0026 03F18443 		add	r3, r3, #1107296256
 318 002a 03F56023 		add	r3, r3, #917504
 319 002e 1860     		str	r0, [r3]
 157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c ****   return HAL_OK;
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr_ex.c **** }
 320              		.loc 1 158 0
 321 0030 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE70:
 325              		.text
 326              	.Letext0:
 327              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 328              		.file 4 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 329              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 330              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 331              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 332              		.file 8 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 333              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 334              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include
 335              		.file 11 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 336              		.file 12 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 337              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
ARM GAS  /tmp/cctxk6Jf.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_pwr_ex.c
     /tmp/cctxk6Jf.s:16     .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/cctxk6Jf.s:23     .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/cctxk6Jf.s:40     .text.HAL_PWREx_GetVoltageRange:000000000000000c $d
     /tmp/cctxk6Jf.s:45     .text.HAL_PWREx_EnableFastWakeUp:0000000000000000 $t
     /tmp/cctxk6Jf.s:52     .text.HAL_PWREx_EnableFastWakeUp:0000000000000000 HAL_PWREx_EnableFastWakeUp
     /tmp/cctxk6Jf.s:86     .text.HAL_PWREx_DisableFastWakeUp:0000000000000000 $t
     /tmp/cctxk6Jf.s:93     .text.HAL_PWREx_DisableFastWakeUp:0000000000000000 HAL_PWREx_DisableFastWakeUp
     /tmp/cctxk6Jf.s:126    .text.HAL_PWREx_EnableUltraLowPower:0000000000000000 $t
     /tmp/cctxk6Jf.s:133    .text.HAL_PWREx_EnableUltraLowPower:0000000000000000 HAL_PWREx_EnableUltraLowPower
     /tmp/cctxk6Jf.s:166    .text.HAL_PWREx_DisableUltraLowPower:0000000000000000 $t
     /tmp/cctxk6Jf.s:173    .text.HAL_PWREx_DisableUltraLowPower:0000000000000000 HAL_PWREx_DisableUltraLowPower
     /tmp/cctxk6Jf.s:206    .text.HAL_PWREx_EnableLowPowerRunMode:0000000000000000 $t
     /tmp/cctxk6Jf.s:213    .text.HAL_PWREx_EnableLowPowerRunMode:0000000000000000 HAL_PWREx_EnableLowPowerRunMode
     /tmp/cctxk6Jf.s:265    .text.HAL_PWREx_DisableLowPowerRunMode:0000000000000000 $t
     /tmp/cctxk6Jf.s:272    .text.HAL_PWREx_DisableLowPowerRunMode:0000000000000000 HAL_PWREx_DisableLowPowerRunMode
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
