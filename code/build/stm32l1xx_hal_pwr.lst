ARM GAS  /tmp/ccfZxel6.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWR_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWR_DeInit:
  24              	.LFB64:
  25              		.file 1 "Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c"
   1:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @file    stm32l1xx_hal_pwr.c
   4:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
   7:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   8:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   9:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
  10:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           + Peripheral Control functions 
  11:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  12:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   ******************************************************************************
  13:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @attention
  14:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  15:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  16:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  17:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  18:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  19:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  21:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  23:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  24:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  26:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *      without specific prior written permission.
  27:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  28:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccfZxel6.s 			page 2


  34:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  39:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   ******************************************************************************
  40:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
  41:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  42:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  43:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #include "stm32l1xx_hal.h"
  44:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  45:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /** @addtogroup STM32L1xx_HAL_Driver
  46:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @{
  47:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
  48:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  49:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /** @defgroup PWR PWR
  50:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief    PWR HAL module driver
  51:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @{
  52:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
  53:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  54:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  55:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  56:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  57:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  58:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #define PVD_MODE_IT               (0x00010000U)
  59:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #define PVD_MODE_EVT              (0x00020000U)
  60:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #define PVD_RISING_EDGE           (0x00000001U)
  61:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #define PVD_FALLING_EDGE          (0x00000002U)
  62:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  63:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  64:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  65:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  66:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  67:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  68:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  69:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @{
  70:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
  71:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  72:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  73:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *  @brief   Initialization and de-initialization functions
  74:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
  75:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** @verbatim
  76:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****  ===============================================================================
  77:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  78:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****  ===============================================================================
  79:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
  80:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data
  81:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       registers) is protected against possible unwanted
  82:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       write accesses.
  83:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  84:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  85:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  86:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  87:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  88:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** @endverbatim
  89:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @{
  90:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
ARM GAS  /tmp/ccfZxel6.s 			page 3


  91:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
  92:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
  93:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  94:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   Before calling this function, the VOS[1:0] bits should be configured 
  95:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         to "10" and the system frequency has to be configured accordingly. 
  96:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         To configure the VOS[1:0] bits, use the PWR_VoltageScalingConfig()
  97:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         function.      
  98:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   ULP and FWU bits are not reset by this function.    
  99:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 100:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 101:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 102:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
  26              		.loc 1 102 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 103:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  31              		.loc 1 103 0
  32 0000 044B     		ldr	r3, .L2
  33 0002 9A69     		ldr	r2, [r3, #24]
  34 0004 42F08052 		orr	r2, r2, #268435456
  35 0008 9A61     		str	r2, [r3, #24]
 104:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  36              		.loc 1 104 0
  37 000a 9A69     		ldr	r2, [r3, #24]
  38 000c 22F08052 		bic	r2, r2, #268435456
  39 0010 9A61     		str	r2, [r3, #24]
  40 0012 7047     		bx	lr
  41              	.L3:
  42              		.align	2
  43              	.L2:
  44 0014 00380240 		.word	1073887232
  45              		.cfi_endproc
  46              	.LFE64:
  48              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  49              		.align	1
  50              		.global	HAL_PWR_EnableBkUpAccess
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu softvfp
  56              	HAL_PWR_EnableBkUpAccess:
  57              	.LFB65:
 105:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 106:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 107:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 108:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Enables access to the backup domain (RTC registers, RTC
 109:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         backup data registers ).
 110:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
 111:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 112:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 113:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 114:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 115:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
  58              		.loc 1 115 0
  59              		.cfi_startproc
ARM GAS  /tmp/ccfZxel6.s 			page 4


  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL0:
  64              	.LBB32:
  65              	.LBB33:
  66              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccfZxel6.s 			page 5


  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccfZxel6.s 			page 6


 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
ARM GAS  /tmp/ccfZxel6.s 			page 7


 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccfZxel6.s 			page 8


 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccfZxel6.s 			page 9


 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
ARM GAS  /tmp/ccfZxel6.s 			page 10


 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
ARM GAS  /tmp/ccfZxel6.s 			page 11


 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccfZxel6.s 			page 12


 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
ARM GAS  /tmp/ccfZxel6.s 			page 13


 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  67              		.loc 2 531 0
  68 0000 4FF48073 		mov	r3, #256
  69              		.syntax unified
  70              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  71 0004 93FAA3F3 		rbit r3, r3
  72              	@ 0 "" 2
  73              	.LVL1:
  74              		.thumb
  75              		.syntax unified
  76              	.LBE33:
  77              	.LBE32:
 116:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Enable access to RTC and backup registers */
 117:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  78              		.loc 1 117 0
  79 0008 B3FA83F3 		clz	r3, r3
  80 000c 9B00     		lsls	r3, r3, #2
  81 000e 03F18443 		add	r3, r3, #1107296256
  82 0012 03F56023 		add	r3, r3, #917504
  83 0016 0122     		movs	r2, #1
  84 0018 1A60     		str	r2, [r3]
  85 001a 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE65:
  89              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  90              		.align	1
  91              		.global	HAL_PWR_DisableBkUpAccess
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	HAL_PWR_DisableBkUpAccess:
  98              	.LFB66:
ARM GAS  /tmp/ccfZxel6.s 			page 14


 118:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 119:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 120:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 121:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Disables access to the backup domain (RTC registers, RTC
 122:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         backup data registers).
 123:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
 124:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 125:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 126:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 127:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 128:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
  99              		.loc 1 128 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL2:
 105              	.LBB34:
 106              	.LBB35:
 107              		.loc 2 531 0
 108 0000 4FF48073 		mov	r3, #256
 109              		.syntax unified
 110              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 111 0004 93FAA3F3 		rbit r3, r3
 112              	@ 0 "" 2
 113              	.LVL3:
 114              		.thumb
 115              		.syntax unified
 116              	.LBE35:
 117              	.LBE34:
 129:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Disable access to RTC and backup registers */
 130:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 118              		.loc 1 130 0
 119 0008 B3FA83F3 		clz	r3, r3
 120 000c 9B00     		lsls	r3, r3, #2
 121 000e 03F18443 		add	r3, r3, #1107296256
 122 0012 03F56023 		add	r3, r3, #917504
 123 0016 0022     		movs	r2, #0
 124 0018 1A60     		str	r2, [r3]
 125 001a 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE66:
 129              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 130              		.align	1
 131              		.global	HAL_PWR_ConfigPVD
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	HAL_PWR_ConfigPVD:
 138              	.LFB67:
 131:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 132:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 133:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 134:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @}
 135:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 136:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
ARM GAS  /tmp/ccfZxel6.s 			page 15


 137:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 138:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief    Low Power modes configuration functions
 139:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *
 140:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** @verbatim
 141:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 142:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****  ===============================================================================
 143:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 144:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****  ===============================================================================
 145:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****      
 146:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     *** PVD configuration ***
 147:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     =========================
 148:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 149:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 150:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 151:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) The PVD can use an external input analog voltage (PVD_IN) which is compared 
 152:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       internally to VREFINT. The PVD_IN (PB7) has to be configured in Analog mode 
 153:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       when PWR_PVDLevel_7 is selected (PLS[2:0] = 111).
 154:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 155:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
 156:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 157:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 158:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 159:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 160:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 161:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 162:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     ================================
 163:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 164:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) WakeUp pin is used to wake up the system from Standby mode. This pin is
 165:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 166:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) There are two or three WakeUp pins:
 167:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           WakeUp Pin 1 on PA.00.
 168:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           WakeUp Pin 2 on PC.13.
 169:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           WakeUp Pin 3 on PE.06. : Only on product with GPIOE available 
 170:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 171:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 172:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     *** Main and Backup Regulators configuration ***
 173:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     ================================================
 174:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 175:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) The main internal regulator can be configured to have a tradeoff between
 176:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           performance and power consumption when the device does not operate at
 177:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           the maximum frequency. This is done through __HAL_PWR_VOLTAGESCALING_CONFIG()
 178:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           macro which configure VOS bit in PWR_CR register:
 179:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) When this bit is set (Regulator voltage output Scale 1 mode selected)
 180:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              the System frequency can go up to 32 MHz.
 181:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 2 mode selected)
 182:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              the System frequency can go up to 16 MHz.
 183:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) When this bit is reset (Regulator voltage output Scale 3 mode selected)
 184:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              the System frequency can go up to 4.2 MHz.
 185:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               
 186:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         Refer to the datasheets for more details.
 187:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 188:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     *** Low Power modes configuration ***
 189:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     =====================================
 190:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****      [..]
 191:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       The device features 5 low-power modes:
 192:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Low power run mode: regulator in low power mode, limited clock frequency, 
 193:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         limited number of peripherals running.
ARM GAS  /tmp/ccfZxel6.s 			page 16


 194:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M3 core stopped, peripherals kept running.
 195:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Low power sleep mode: Cortex-M3 core stopped, limited clock frequency, 
 196:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****          limited number of peripherals running, regulator in low power mode.
 197:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Stop mode: All clocks are stopped, regulator running, regulator in low power mode.
 198:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Standby mode: VCORE domain powered off
 199:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 200:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Low power run mode ***
 201:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    =========================
 202:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 203:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****        To further reduce the consumption when the system is in Run mode, the regulator can be
 204:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         configured in low power mode. In this mode, the system frequency should not exceed
 205:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         MSI frequency range1.
 206:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         In Low power run mode, all I/O pins keep the same state as in Run mode.
 207:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 208:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Entry:
 209:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) VCORE in range2
 210:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) Decrease the system frequency tonot exceed the frequency of MSI frequency range1.
 211:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) The regulator is forced in low power mode using the HAL_PWREx_EnableLowPowerRunMode()
 212:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              function.
 213:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Exit:
 214:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) The regulator is forced in Main regulator mode using the HAL_PWREx_DisableLowPowerRunM
 215:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               function.
 216:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) Increase the system frequency if needed.
 217:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 218:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Sleep mode ***
 219:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    ==================
 220:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 221:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Entry:
 222:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_S
 223:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               functions with
 224:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 225:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 226:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****      
 227:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Exit:
 228:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 229:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 230:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 231:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Low power sleep mode ***
 232:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    ============================
 233:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 234:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Entry:
 235:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           The Low power sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGUL
 236:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               functions with
 237:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 238:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 239:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****        (+) The Flash memory can be switched off by using the control bits (SLEEP_PD in the FLASH_AC
 240:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              This reduces power consumption but increases the wake-up time.
 241:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****          
 242:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Exit:
 243:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) If the WFI instruction was used to enter Low power sleep mode, any peripheral interrup
 244:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               acknowledged by the nested vectored interrupt controller (NVIC) can wake up the devic
 245:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               from Low power sleep mode. If the WFE instruction was used to enter Low power sleep m
 246:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****               the MCU exits Sleep mode as soon as an event occurs. 
 247:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                 
 248:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Stop mode ***
 249:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    =================
 250:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
ARM GAS  /tmp/ccfZxel6.s 			page 17


 251:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       The Stop mode is based on the Cortex-M3 deepsleep mode combined with peripheral
 252:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       clock gating. The voltage regulator can be configured either in normal or low-power mode.
 253:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       In Stop mode, all clocks in the VCORE domain are stopped, the PLL, the MSI, the HSI and
 254:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       the HSE RC oscillators are disabled. Internal SRAM and register contents are preserved.
 255:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       To get the lowest consumption in Stop mode, the internal Flash memory also enters low
 256:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       power mode. When the Flash memory is in power-down mode, an additional startup delay is
 257:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       incurred when waking up from Stop mode.
 258:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       To minimize the consumption In Stop mode, VREFINT, the BOR, PVD, and temperature
 259:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       sensor can be switched off before entering Stop mode. They can be switched on again by
 260:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       software after exiting Stop mode using the ULP bit in the PWR_CR register.
 261:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       In Stop mode, all I/O pins keep the same state as in Run mode.
 262:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 263:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Entry:
 264:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****            The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEP
 265:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              function with:
 266:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) Main regulator ON.
 267:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) Low Power regulator ON.
 268:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 269:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 270:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Exit:
 271:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) By issuing an interrupt or a wakeup event, the MSI RC oscillator is selected as system
 272:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 273:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Standby mode ***
 274:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    ====================
 275:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****      [..]
 276:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based on the
 277:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       Cortex-M3 deepsleep mode, with the voltage regulator disabled. The VCORE domain is
 278:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       consequently powered off. The PLL, the MSI, the HSI oscillator and the HSE oscillator are
 279:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       also switched off. SRAM and register contents are lost except for the RTC registers, RTC
 280:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       backup registers and Standby circuitry.
 281:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       
 282:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       To minimize the consumption In Standby mode, VREFINT, the BOR, PVD, and temperature
 283:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****        sensor can be switched off before entering the Standby mode. They can be switched 
 284:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****        on again by software after exiting the Standby mode.
 285:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****        function.
 286:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       
 287:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Entry:
 288:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 289:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       (+) Exit:
 290:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 291:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 292:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 293:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 294:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****    =============================================
 295:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     [..]
 296:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 297:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 298:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 299:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 300:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop mode
 301:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 302:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 303:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    or Event modes) and Enable the RTC Alarm Interrupt using the HAL_RTC_SetAlarm_IT
 304:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    function
 305:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the HAL_RTC_Init() 
 306:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    and HAL_RTC_SetTime() functions.
 307:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
ARM GAS  /tmp/ccfZxel6.s 			page 18


 308:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              is necessary to:
 309:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the EXTI Line 19 to be sensitive to rising edges (Interrupt or Event m
 310:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    Enable the RTC Tamper or time stamp Interrupt using the HAL_RTCEx_SetTamper_IT()
 311:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    or HAL_RTCEx_SetTimeStamp_IT() functions.
 312:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 313:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the EXTI Line 20 to be sensitive to rising edges (Interrupt or Event m
 314:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    Enable the RTC WakeUp Interrupt using the HAL_RTCEx_SetWakeUpTimer_IT() function
 315:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUp
 316:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    function.
 317:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 318:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Standby mode
 319:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 320:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Enable the RTC Alarm Interrupt using the HAL_RTC_SetAlarm_IT() function.
 321:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the RTC to generate the RTC alarm using the HAL_RTC_Init() 
 322:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    and HAL_RTC_SetTime() functions.
 323:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 324:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              is necessary to:
 325:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Enable the RTC Tamper or time stamp Interrupt and Configure the RTC to 
 326:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    detect the tamper or time stamp event using the HAL_RTCEx_SetTimeStamp_IT()
 327:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    or HAL_RTCEx_SetTamper_IT()functions.
 328:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 329:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Enable the RTC WakeUp Interrupt and Configure the RTC to generate the RTC WakeUp
 330:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    using the HAL_RTCEx_SetWakeUpTimer_IT() and HAL_RTCEx_SetWakeUpTimer() functions
 331:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 332:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 333:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an comparator 1 or comparator 2 wakeup
 334:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              event, it is necessary to:
 335:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the EXTI Line 21 or EXTI Line 22 for comparator to be sensitive to to 
 336:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    selected edges (falling, rising or falling and rising) (Interrupt or Event modes
 337:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****                    the COMP functions.
 338:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****              (+++) Configure the comparator to generate the event.      
 339:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         
 340:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****             
 341:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****         
 342:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** @endverbatim
 343:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @{
 344:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 345:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 346:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 347:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 348:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param  sConfigPVD: pointer to an PWR_PVDTypeDef structure that contains the configuration
 349:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         information for the PVD.
 350:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 351:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each
 352:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         detection level.
 353:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 354:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 355:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 356:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 139              		.loc 1 356 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL4:
 357:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check the parameters */
 358:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
ARM GAS  /tmp/ccfZxel6.s 			page 19


 359:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 360:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 361:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 362:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 145              		.loc 1 362 0
 146 0000 1E4A     		ldr	r2, .L11
 147 0002 1368     		ldr	r3, [r2]
 148 0004 23F0E003 		bic	r3, r3, #224
 149 0008 0168     		ldr	r1, [r0]
 150 000a 0B43     		orrs	r3, r3, r1
 151 000c 1360     		str	r3, [r2]
 363:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 364:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 365:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 152              		.loc 1 365 0
 153 000e 1C4B     		ldr	r3, .L11+4
 154 0010 5A68     		ldr	r2, [r3, #4]
 155 0012 22F48032 		bic	r2, r2, #65536
 156 0016 5A60     		str	r2, [r3, #4]
 366:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 157              		.loc 1 366 0
 158 0018 1A68     		ldr	r2, [r3]
 159 001a 22F48032 		bic	r2, r2, #65536
 160 001e 1A60     		str	r2, [r3]
 367:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE();
 161              		.loc 1 367 0
 162 0020 9A68     		ldr	r2, [r3, #8]
 163 0022 22F48032 		bic	r2, r2, #65536
 164 0026 9A60     		str	r2, [r3, #8]
 165 0028 DA68     		ldr	r2, [r3, #12]
 166 002a 22F48032 		bic	r2, r2, #65536
 167 002e DA60     		str	r2, [r3, #12]
 368:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 369:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Configure interrupt mode */
 370:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 168              		.loc 1 370 0
 169 0030 4368     		ldr	r3, [r0, #4]
 170 0032 13F4803F 		tst	r3, #65536
 171 0036 04D0     		beq	.L7
 371:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 372:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 172              		.loc 1 372 0
 173 0038 114A     		ldr	r2, .L11+4
 174 003a 1368     		ldr	r3, [r2]
 175 003c 43F48033 		orr	r3, r3, #65536
 176 0040 1360     		str	r3, [r2]
 177              	.L7:
 373:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 374:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 375:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Configure event mode */
 376:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 178              		.loc 1 376 0
 179 0042 4368     		ldr	r3, [r0, #4]
 180 0044 13F4003F 		tst	r3, #131072
 181 0048 04D0     		beq	.L8
 377:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 378:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
ARM GAS  /tmp/ccfZxel6.s 			page 20


 182              		.loc 1 378 0
 183 004a 0D4A     		ldr	r2, .L11+4
 184 004c 5368     		ldr	r3, [r2, #4]
 185 004e 43F48033 		orr	r3, r3, #65536
 186 0052 5360     		str	r3, [r2, #4]
 187              	.L8:
 379:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 380:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 381:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Configure the edge */
 382:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 188              		.loc 1 382 0
 189 0054 4368     		ldr	r3, [r0, #4]
 190 0056 13F0010F 		tst	r3, #1
 191 005a 04D0     		beq	.L9
 383:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 384:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 192              		.loc 1 384 0
 193 005c 084A     		ldr	r2, .L11+4
 194 005e 9368     		ldr	r3, [r2, #8]
 195 0060 43F48033 		orr	r3, r3, #65536
 196 0064 9360     		str	r3, [r2, #8]
 197              	.L9:
 385:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 386:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   
 387:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 198              		.loc 1 387 0
 199 0066 4368     		ldr	r3, [r0, #4]
 200 0068 13F0020F 		tst	r3, #2
 201 006c 04D0     		beq	.L6
 388:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 389:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 202              		.loc 1 389 0
 203 006e 044A     		ldr	r2, .L11+4
 204 0070 D368     		ldr	r3, [r2, #12]
 205 0072 43F48033 		orr	r3, r3, #65536
 206 0076 D360     		str	r3, [r2, #12]
 207              	.L6:
 208 0078 7047     		bx	lr
 209              	.L12:
 210 007a 00BF     		.align	2
 211              	.L11:
 212 007c 00700040 		.word	1073770496
 213 0080 00040140 		.word	1073808384
 214              		.cfi_endproc
 215              	.LFE67:
 217              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 218              		.align	1
 219              		.global	HAL_PWR_EnablePVD
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu softvfp
 225              	HAL_PWR_EnablePVD:
 226              	.LFB68:
 390:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 391:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 392:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
ARM GAS  /tmp/ccfZxel6.s 			page 21


 393:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 394:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Enables the Power Voltage Detector(PVD).
 395:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 396:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 397:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 398:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 227              		.loc 1 398 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 232              	.LVL5:
 233              	.LBB36:
 234              	.LBB37:
 235              		.loc 2 531 0
 236 0000 1023     		movs	r3, #16
 237              		.syntax unified
 238              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 239 0002 93FAA3F3 		rbit r3, r3
 240              	@ 0 "" 2
 241              	.LVL6:
 242              		.thumb
 243              		.syntax unified
 244              	.LBE37:
 245              	.LBE36:
 399:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Enable the power voltage detector */
 400:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 246              		.loc 1 400 0
 247 0006 B3FA83F3 		clz	r3, r3
 248 000a 9B00     		lsls	r3, r3, #2
 249 000c 03F18443 		add	r3, r3, #1107296256
 250 0010 03F56023 		add	r3, r3, #917504
 251 0014 0122     		movs	r2, #1
 252 0016 1A60     		str	r2, [r3]
 253 0018 7047     		bx	lr
 254              		.cfi_endproc
 255              	.LFE68:
 257              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 258              		.align	1
 259              		.global	HAL_PWR_DisablePVD
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu softvfp
 265              	HAL_PWR_DisablePVD:
 266              	.LFB69:
 401:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 402:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 403:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 404:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  Disables the Power Voltage Detector(PVD).
 405:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 406:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 407:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 408:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 267              		.loc 1 408 0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfZxel6.s 			page 22


 270              		@ frame_needed = 0, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272              	.LVL7:
 273              	.LBB38:
 274              	.LBB39:
 275              		.loc 2 531 0
 276 0000 1023     		movs	r3, #16
 277              		.syntax unified
 278              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 279 0002 93FAA3F3 		rbit r3, r3
 280              	@ 0 "" 2
 281              	.LVL8:
 282              		.thumb
 283              		.syntax unified
 284              	.LBE39:
 285              	.LBE38:
 409:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Disable the power voltage detector */
 410:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 286              		.loc 1 410 0
 287 0006 B3FA83F3 		clz	r3, r3
 288 000a 9B00     		lsls	r3, r3, #2
 289 000c 03F18443 		add	r3, r3, #1107296256
 290 0010 03F56023 		add	r3, r3, #917504
 291 0014 0022     		movs	r2, #0
 292 0016 1A60     		str	r2, [r3]
 293 0018 7047     		bx	lr
 294              		.cfi_endproc
 295              	.LFE69:
 297              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 298              		.align	1
 299              		.global	HAL_PWR_EnableWakeUpPin
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu softvfp
 305              	HAL_PWR_EnableWakeUpPin:
 306              	.LFB70:
 411:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 412:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 413:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 414:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 415:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to enable.
 416:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 417:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 418:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2
 419:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available 
 420:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 421:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 422:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 423:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 307              		.loc 1 423 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL9:
 313              	.LBB40:
ARM GAS  /tmp/ccfZxel6.s 			page 23


 314              	.LBB41:
 315              		.loc 2 531 0
 316              		.syntax unified
 317              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 318 0000 90FAA0F0 		rbit r0, r0
 319              	@ 0 "" 2
 320              	.LVL10:
 321              		.thumb
 322              		.syntax unified
 323              	.LBE41:
 324              	.LBE40:
 424:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check the parameter */
 425:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 426:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Enable the EWUPx pin */
 427:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 325              		.loc 1 427 0
 326 0004 B0FA80F0 		clz	r0, r0
 327 0008 0122     		movs	r2, #1
 328 000a 024B     		ldr	r3, .L16
 329 000c 43F82020 		str	r2, [r3, r0, lsl #2]
 330 0010 7047     		bx	lr
 331              	.L17:
 332 0012 00BF     		.align	2
 333              	.L16:
 334 0014 80000E42 		.word	1108213888
 335              		.cfi_endproc
 336              	.LFE70:
 338              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 339              		.align	1
 340              		.global	HAL_PWR_DisableWakeUpPin
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu softvfp
 346              	HAL_PWR_DisableWakeUpPin:
 347              	.LFB71:
 428:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 429:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 430:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 431:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 432:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 433:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *        This parameter can be one of the following values:
 434:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 435:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2  
 436:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available 
 437:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 438:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 439:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 440:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 348              		.loc 1 440 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL11:
 354              	.LBB42:
 355              	.LBB43:
ARM GAS  /tmp/ccfZxel6.s 			page 24


 356              		.loc 2 531 0
 357              		.syntax unified
 358              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 359 0000 90FAA0F0 		rbit r0, r0
 360              	@ 0 "" 2
 361              	.LVL12:
 362              		.thumb
 363              		.syntax unified
 364              	.LBE43:
 365              	.LBE42:
 441:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check the parameter */
 442:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 443:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Disable the EWUPx pin */
 444:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 366              		.loc 1 444 0
 367 0004 B0FA80F0 		clz	r0, r0
 368 0008 0022     		movs	r2, #0
 369 000a 024B     		ldr	r3, .L19
 370 000c 43F82020 		str	r2, [r3, r0, lsl #2]
 371 0010 7047     		bx	lr
 372              	.L20:
 373 0012 00BF     		.align	2
 374              	.L19:
 375 0014 80000E42 		.word	1108213888
 376              		.cfi_endproc
 377              	.LFE71:
 379              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 380              		.align	1
 381              		.global	HAL_PWR_EnterSLEEPMode
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	HAL_PWR_EnterSLEEPMode:
 388              	.LFB72:
 445:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 446:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 447:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 448:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 449:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note  In Sleep mode, all I/O pins keep the same state as in Run mode.
 450:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in SLEEP mode.
 451:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 452:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 453:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 454:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if SLEEP mode is entered with WFI or WFE instruction.
 455:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
 456:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           the interrupt wake up source.
 457:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 458:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 459:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 460:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 461:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 462:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 463:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 389              		.loc 1 463 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccfZxel6.s 			page 25


 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394              	.LVL13:
 464:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check the parameters */
 465:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 466:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 467:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 468:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator v
 469:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 395              		.loc 1 469 0
 396 0000 094A     		ldr	r2, .L25
 397 0002 1368     		ldr	r3, [r2]
 398 0004 23F00303 		bic	r3, r3, #3
 399 0008 1843     		orrs	r0, r0, r3
 400              	.LVL14:
 401 000a 1060     		str	r0, [r2]
 470:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 471:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 472:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 402              		.loc 1 472 0
 403 000c 074A     		ldr	r2, .L25+4
 404 000e 1369     		ldr	r3, [r2, #16]
 405 0010 23F00403 		bic	r3, r3, #4
 406 0014 1361     		str	r3, [r2, #16]
 473:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 474:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 475:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 407              		.loc 1 475 0
 408 0016 0129     		cmp	r1, #1
 409 0018 03D0     		beq	.L24
 410              	.LBB44:
 411              	.LBB45:
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 412              		.loc 2 406 0
 413              		.syntax unified
 414              	@ 406 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 415 001a 40BF     		sev
 416              	@ 0 "" 2
 417              		.thumb
 418              		.syntax unified
 419              	.LBE45:
 420              	.LBE44:
 421              	.LBB46:
 422              	.LBB47:
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 423              		.loc 2 396 0
 424              		.syntax unified
 425              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 426 001c 20BF     		wfe
 427              	@ 0 "" 2
 428              		.thumb
 429              		.syntax unified
 430              	.LBE47:
 431              	.LBE46:
 432              	.LBB48:
 433              	.LBB49:
 434              		.syntax unified
ARM GAS  /tmp/ccfZxel6.s 			page 26


 435              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 436 001e 20BF     		wfe
 437              	@ 0 "" 2
 438              		.thumb
 439              		.syntax unified
 440 0020 7047     		bx	lr
 441              	.L24:
 442              	.LBE49:
 443              	.LBE48:
 444              	.LBB50:
 445              	.LBB51:
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446              		.loc 2 385 0
 447              		.syntax unified
 448              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 449 0022 30BF     		wfi
 450              	@ 0 "" 2
 451              		.thumb
 452              		.syntax unified
 453 0024 7047     		bx	lr
 454              	.L26:
 455 0026 00BF     		.align	2
 456              	.L25:
 457 0028 00700040 		.word	1073770496
 458 002c 00ED00E0 		.word	-536810240
 459              	.LBE51:
 460              	.LBE50:
 461              		.cfi_endproc
 462              	.LFE72:
 464              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 465              		.align	1
 466              		.global	HAL_PWR_EnterSTOPMode
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu softvfp
 472              	HAL_PWR_EnterSTOPMode:
 473              	.LFB73:
 476:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 477:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 478:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFI();
 479:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 480:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   else
 481:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 482:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* Request Wait For Event */
 483:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __SEV();
 484:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFE();
 485:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFE();
 486:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 487:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 488:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 489:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 490:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 491:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 492:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note  When exiting Stop mode by using an interrupt or a wakeup event,
 493:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *        MSI RC oscillator is selected as system clock.
 494:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
ARM GAS  /tmp/ccfZxel6.s 			page 27


 495:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 496:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption
 497:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 498:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 499:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 500:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 501:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 502:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @param STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
 503:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 504:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 505:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
 506:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 507:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 508:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 509:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 474              		.loc 1 509 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 479              	.LVL15:
 510:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check the parameters */
 511:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 512:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 513:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 514:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator va
 515:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 480              		.loc 1 515 0
 481 0000 0B4A     		ldr	r2, .L31
 482 0002 1368     		ldr	r3, [r2]
 483 0004 23F00303 		bic	r3, r3, #3
 484 0008 1843     		orrs	r0, r0, r3
 485              	.LVL16:
 486 000a 1060     		str	r0, [r2]
 516:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 517:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 518:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 487              		.loc 1 518 0
 488 000c 094A     		ldr	r2, .L31+4
 489 000e 1369     		ldr	r3, [r2, #16]
 490 0010 43F00403 		orr	r3, r3, #4
 491 0014 1361     		str	r3, [r2, #16]
 519:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 520:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 521:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 492              		.loc 1 521 0
 493 0016 0129     		cmp	r1, #1
 494 0018 08D0     		beq	.L30
 495              	.LBB52:
 496              	.LBB53:
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 497              		.loc 2 406 0
 498              		.syntax unified
 499              	@ 406 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 500 001a 40BF     		sev
 501              	@ 0 "" 2
 502              		.thumb
ARM GAS  /tmp/ccfZxel6.s 			page 28


 503              		.syntax unified
 504              	.LBE53:
 505              	.LBE52:
 506              	.LBB54:
 507              	.LBB55:
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508              		.loc 2 396 0
 509              		.syntax unified
 510              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 511 001c 20BF     		wfe
 512              	@ 0 "" 2
 513              		.thumb
 514              		.syntax unified
 515              	.LBE55:
 516              	.LBE54:
 517              	.LBB56:
 518              	.LBB57:
 519              		.syntax unified
 520              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 521 001e 20BF     		wfe
 522              	@ 0 "" 2
 523              		.thumb
 524              		.syntax unified
 525              	.L29:
 526              	.LBE57:
 527              	.LBE56:
 522:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 523:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 524:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFI();
 525:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 526:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   else
 527:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 528:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* Request Wait For Event */
 529:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __SEV();
 530:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFE();
 531:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __WFE();
 532:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 533:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 534:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 528              		.loc 1 534 0
 529 0020 044A     		ldr	r2, .L31+4
 530 0022 1369     		ldr	r3, [r2, #16]
 531 0024 23F00403 		bic	r3, r3, #4
 532 0028 1361     		str	r3, [r2, #16]
 533 002a 7047     		bx	lr
 534              	.L30:
 535              	.LBB58:
 536              	.LBB59:
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 537              		.loc 2 385 0
 538              		.syntax unified
 539              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 540 002c 30BF     		wfi
 541              	@ 0 "" 2
 542              		.thumb
 543              		.syntax unified
 544 002e F7E7     		b	.L29
ARM GAS  /tmp/ccfZxel6.s 			page 29


 545              	.L32:
 546              		.align	2
 547              	.L31:
 548 0030 00700040 		.word	1073770496
 549 0034 00ED00E0 		.word	-536810240
 550              	.LBE59:
 551              	.LBE58:
 552              		.cfi_endproc
 553              	.LFE73:
 555              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 556              		.align	1
 557              		.global	HAL_PWR_EnterSTANDBYMode
 558              		.syntax unified
 559              		.thumb
 560              		.thumb_func
 561              		.fpu softvfp
 563              	HAL_PWR_EnterSTANDBYMode:
 564              	.LFB74:
 535:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 536:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 537:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 538:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Enters Standby mode.
 539:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note  In Standby mode, all I/O pins are high impedance except for:
 540:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          - Reset pad (still available) 
 541:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC
 542:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 543:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.
 544:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          - WKUP pin 2 (PC13) if enabled.
 545:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *          - WKUP pin 3 (PE6) if enabled.
 546:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 547:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 548:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 549:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 565              		.loc 1 549 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 550:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Select Standby mode */
 551:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 570              		.loc 1 551 0
 571 0000 054A     		ldr	r2, .L34
 572 0002 1368     		ldr	r3, [r2]
 573 0004 43F00203 		orr	r3, r3, #2
 574 0008 1360     		str	r3, [r2]
 552:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 553:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 554:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 575              		.loc 1 554 0
 576 000a 044A     		ldr	r2, .L34+4
 577 000c 1369     		ldr	r3, [r2, #16]
 578 000e 43F00403 		orr	r3, r3, #4
 579 0012 1361     		str	r3, [r2, #16]
 580              	.LBB60:
 581              	.LBB61:
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 582              		.loc 2 385 0
ARM GAS  /tmp/ccfZxel6.s 			page 30


 583              		.syntax unified
 584              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 585 0014 30BF     		wfi
 586              	@ 0 "" 2
 587              		.thumb
 588              		.syntax unified
 589 0016 7047     		bx	lr
 590              	.L35:
 591              		.align	2
 592              	.L34:
 593 0018 00700040 		.word	1073770496
 594 001c 00ED00E0 		.word	-536810240
 595              	.LBE61:
 596              	.LBE60:
 597              		.cfi_endproc
 598              	.LFE74:
 600              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 601              		.align	1
 602              		.global	HAL_PWR_EnableSleepOnExit
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu softvfp
 608              	HAL_PWR_EnableSleepOnExit:
 609              	.LFB75:
 555:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 556:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 557:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #if defined ( __CC_ARM)
 558:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __force_stores();
 559:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** #endif
 560:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 561:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   __WFI();
 562:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 563:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 564:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 565:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 566:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 567:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 568:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 569:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 570:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       interruptions handling.         
 571:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 572:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 573:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 574:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 610              		.loc 1 574 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 575:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 576:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 615              		.loc 1 576 0
 616 0000 024A     		ldr	r2, .L37
 617 0002 1369     		ldr	r3, [r2, #16]
 618 0004 43F00203 		orr	r3, r3, #2
 619 0008 1361     		str	r3, [r2, #16]
ARM GAS  /tmp/ccfZxel6.s 			page 31


 620 000a 7047     		bx	lr
 621              	.L38:
 622              		.align	2
 623              	.L37:
 624 000c 00ED00E0 		.word	-536810240
 625              		.cfi_endproc
 626              	.LFE75:
 628              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 629              		.align	1
 630              		.global	HAL_PWR_DisableSleepOnExit
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu softvfp
 636              	HAL_PWR_DisableSleepOnExit:
 637              	.LFB76:
 577:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 578:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 579:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 580:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 581:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 582:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 583:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 584:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 585:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 586:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 587:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 638              		.loc 1 587 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 588:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 589:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 643              		.loc 1 589 0
 644 0000 024A     		ldr	r2, .L40
 645 0002 1369     		ldr	r3, [r2, #16]
 646 0004 23F00203 		bic	r3, r3, #2
 647 0008 1361     		str	r3, [r2, #16]
 648 000a 7047     		bx	lr
 649              	.L41:
 650              		.align	2
 651              	.L40:
 652 000c 00ED00E0 		.word	-536810240
 653              		.cfi_endproc
 654              	.LFE76:
 656              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 657              		.align	1
 658              		.global	HAL_PWR_EnableSEVOnPend
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	HAL_PWR_EnableSEVOnPend:
 665              	.LFB77:
 590:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 591:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
ARM GAS  /tmp/ccfZxel6.s 			page 32


 592:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 593:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 594:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Enables CORTEX M3 SEVONPEND bit. 
 595:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 596:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 597:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 598:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 599:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 600:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 666              		.loc 1 600 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 601:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 602:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 671              		.loc 1 602 0
 672 0000 024A     		ldr	r2, .L43
 673 0002 1369     		ldr	r3, [r2, #16]
 674 0004 43F01003 		orr	r3, r3, #16
 675 0008 1361     		str	r3, [r2, #16]
 676 000a 7047     		bx	lr
 677              	.L44:
 678              		.align	2
 679              	.L43:
 680 000c 00ED00E0 		.word	-536810240
 681              		.cfi_endproc
 682              	.LFE77:
 684              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 685              		.align	1
 686              		.global	HAL_PWR_DisableSEVOnPend
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 690              		.fpu softvfp
 692              	HAL_PWR_DisableSEVOnPend:
 693              	.LFB78:
 603:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 604:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 605:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 606:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 607:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief Disables CORTEX M3 SEVONPEND bit. 
 608:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 609:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 610:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 611:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 612:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 613:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 694              		.loc 1 613 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 614:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 615:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 699              		.loc 1 615 0
 700 0000 024A     		ldr	r2, .L46
ARM GAS  /tmp/ccfZxel6.s 			page 33


 701 0002 1369     		ldr	r3, [r2, #16]
 702 0004 23F01003 		bic	r3, r3, #16
 703 0008 1361     		str	r3, [r2, #16]
 704 000a 7047     		bx	lr
 705              	.L47:
 706              		.align	2
 707              	.L46:
 708 000c 00ED00E0 		.word	-536810240
 709              		.cfi_endproc
 710              	.LFE78:
 712              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 713              		.align	1
 714              		.weak	HAL_PWR_PVDCallback
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 718              		.fpu softvfp
 720              	HAL_PWR_PVDCallback:
 721              	.LFB80:
 616:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 617:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 618:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 619:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 620:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 621:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  This function handles the PWR PVD interrupt request.
 622:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @note   This API should be called under the PVD_IRQHandler().
 623:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 624:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 625:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 627:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check PWR exti flag */
 628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 629:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 630:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 632:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 633:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 635:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** }
 637:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 638:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** /**
 639:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 640:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   * @retval None
 641:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   */
 642:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 643:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** {
 722              		.loc 1 643 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 727 0000 7047     		bx	lr
 728              		.cfi_endproc
 729              	.LFE80:
 731              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 732              		.align	1
ARM GAS  /tmp/ccfZxel6.s 			page 34


 733              		.global	HAL_PWR_PVD_IRQHandler
 734              		.syntax unified
 735              		.thumb
 736              		.thumb_func
 737              		.fpu softvfp
 739              	HAL_PWR_PVD_IRQHandler:
 740              	.LFB79:
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check PWR exti flag */
 741              		.loc 1 626 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 626:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   /* Check PWR exti flag */
 745              		.loc 1 626 0
 746 0000 08B5     		push	{r3, lr}
 747              	.LCFI0:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
 628:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   {
 751              		.loc 1 628 0
 752 0002 064B     		ldr	r3, .L53
 753 0004 5B69     		ldr	r3, [r3, #20]
 754 0006 13F4803F 		tst	r3, #65536
 755 000a 00D1     		bne	.L52
 756              	.L49:
 757 000c 08BD     		pop	{r3, pc}
 758              	.L52:
 631:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 759              		.loc 1 631 0
 760 000e FFF7FEFF 		bl	HAL_PWR_PVDCallback
 761              	.LVL17:
 634:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c ****   }
 762              		.loc 1 634 0
 763 0012 4FF48032 		mov	r2, #65536
 764 0016 014B     		ldr	r3, .L53
 765 0018 5A61     		str	r2, [r3, #20]
 636:Drivers/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_pwr.c **** 
 766              		.loc 1 636 0
 767 001a F7E7     		b	.L49
 768              	.L54:
 769              		.align	2
 770              	.L53:
 771 001c 00040140 		.word	1073808384
 772              		.cfi_endproc
 773              	.LFE79:
 775              		.text
 776              	.Letext0:
 777              		.file 3 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_defau
 778              		.file 4 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 779              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 780              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 781              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 782              		.file 8 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 783              		.file 9 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 784              		.file 10 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 785              		.file 11 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include
ARM GAS  /tmp/ccfZxel6.s 			page 35


 786              		.file 12 "/home/ricardo/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 787              		.file 13 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_pwr.h"
ARM GAS  /tmp/ccfZxel6.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_pwr.c
     /tmp/ccfZxel6.s:16     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/ccfZxel6.s:23     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/ccfZxel6.s:44     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/ccfZxel6.s:49     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/ccfZxel6.s:56     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccfZxel6.s:90     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/ccfZxel6.s:97     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccfZxel6.s:130    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/ccfZxel6.s:137    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/ccfZxel6.s:212    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/ccfZxel6.s:218    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/ccfZxel6.s:225    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/ccfZxel6.s:258    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/ccfZxel6.s:265    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/ccfZxel6.s:298    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccfZxel6.s:305    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccfZxel6.s:334    .text.HAL_PWR_EnableWakeUpPin:0000000000000014 $d
     /tmp/ccfZxel6.s:339    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccfZxel6.s:346    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccfZxel6.s:375    .text.HAL_PWR_DisableWakeUpPin:0000000000000014 $d
     /tmp/ccfZxel6.s:380    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/ccfZxel6.s:387    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccfZxel6.s:457    .text.HAL_PWR_EnterSLEEPMode:0000000000000028 $d
     /tmp/ccfZxel6.s:465    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccfZxel6.s:472    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/ccfZxel6.s:548    .text.HAL_PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/ccfZxel6.s:556    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccfZxel6.s:563    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccfZxel6.s:593    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
     /tmp/ccfZxel6.s:601    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/ccfZxel6.s:608    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccfZxel6.s:624    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/ccfZxel6.s:629    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/ccfZxel6.s:636    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccfZxel6.s:652    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/ccfZxel6.s:657    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/ccfZxel6.s:664    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccfZxel6.s:680    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/ccfZxel6.s:685    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/ccfZxel6.s:692    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccfZxel6.s:708    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d
     /tmp/ccfZxel6.s:713    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/ccfZxel6.s:720    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
     /tmp/ccfZxel6.s:732    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
     /tmp/ccfZxel6.s:739    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
     /tmp/ccfZxel6.s:771    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
